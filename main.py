import os
import time
import requests
import re
import jwt
import smtplib
import threading
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
from flask import Flask, request, jsonify, render_template_string
from openai import OpenAI

# RAG —Å–∏—Å—Ç–µ–º–∏–π–Ω –∏–º–ø–æ—Ä—Ç –Ω—ç–º—ç—Ö
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urldefrag
from dotenv import load_dotenv
import logging
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.embeddings import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.chains import RetrievalQA
from langchain.schema import Document
from langchain_openai import OpenAI as LC_OpenAI
from langchain.prompts import PromptTemplate

# Load .env
load_dotenv()

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –û—Ä—á–Ω—ã —Ö—É–≤—å—Å–∞–≥—á–∏–¥
OPENAI_API_KEY    = os.environ["OPENAI_API_KEY"]
ASSISTANT_ID      = os.environ["ASSISTANT_ID"]
CHATWOOT_API_KEY  = os.environ["CHATWOOT_API_KEY"]
ACCOUNT_ID        = os.environ["ACCOUNT_ID"]
CHATWOOT_BASE_URL = "https://app.chatwoot.com"

# RAG —Å–∏—Å—Ç–µ–º–∏–π–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ
DOCS_BASE_URL = os.environ.get("DOCS_BASE_URL", "https://docs.cloud.mn")
VECTOR_STORE_PATH = "docs_faiss_index"

# Email —Ç–æ—Ö–∏—Ä–≥–æ–æ
SMTP_SERVER = os.environ.get("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT = int(os.environ.get("SMTP_PORT", "587"))
SENDER_EMAIL = os.environ["SENDER_EMAIL"]
SENDER_PASSWORD = os.environ["SENDER_PASSWORD"]

# Microsoft Teams —Ç–æ—Ö–∏—Ä–≥–æ–æ
TEAMS_WEBHOOK_URL = os.environ.get("TEAMS_WEBHOOK_URL")
MAX_AI_RETRIES = 2  # AI —Ö—ç–¥—ç–Ω —É–¥–∞–∞ –æ—Ä–æ–ª–¥—Å–æ–Ω—ã –¥–∞—Ä–∞–∞ –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞—Ö

# JWT —Ç–æ—Ö–∏—Ä–≥–æ–æ
JWT_SECRET = os.environ.get("JWT_SECRET", "your-secret-key-here")
VERIFICATION_URL_BASE = os.environ.get("VERIFICATION_URL_BASE", "http://localhost:5000")

# OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=OPENAI_API_KEY)

# =============== RAG –°–ò–°–¢–ï–ú–ò–ô–ù –§–£–ù–ö–¶–£–£–î ===============

def crawl_docs(base_url: str) -> list:
    """–î–æ–∫—É–º–µ–Ω—Ç —Å–∞–π—Ç–∞–∞—Å –º—ç–¥—ç—ç–ª—ç–ª —Ü—É–≥–ª—É—É–ª–∞—Ö"""
    seen = set()
    to_visit = {base_url}
    docs = []
    
    logger.info(f"Starting to crawl docs from {base_url}")
    
    while to_visit:
        url = to_visit.pop()
        url = urldefrag(url).url
        if url in seen or not url.startswith(base_url):
            continue
        seen.add(url)
        
        try:
            logger.info(f"Crawling: {url}")
            resp = requests.get(url, timeout=15)
            if resp.status_code != 200:
                logger.warning(f"Failed to fetch {url}: {resp.status_code}")
                continue
                
            soup = BeautifulSoup(resp.text, "lxml")
            
            # Better content extraction - try multiple selectors
            content = (
                soup.select_one("article") or 
                soup.select_one(".content") or
                soup.select_one("main") or
                soup.select_one(".markdown") or
                soup.select_one("#main-content")
            )
            
            if content:
                # Remove navigation, footer, header elements
                for unwanted in content.select("nav, footer, header, .nav, .footer, .header"):
                    unwanted.decompose()
                
                text = content.get_text(separator="\n").strip()
                if text and len(text) > 50:  # Filter out very short content
                    # Get page title for better context
                    title = soup.select_one("title")
                    title_text = title.get_text().strip() if title else ""
                    
                    docs.append({
                        "url": url, 
                        "text": text,
                        "title": title_text
                    })
                    logger.info(f"Extracted content from {url} - {len(text)} characters")
                    
            # Find more links
            for a in soup.find_all("a", href=True):
                link = urljoin(url, a["href"])
                if link.startswith(base_url) and "#" not in link:  # Avoid anchor links
                    to_visit.add(link)
                    
        except Exception as e:
            logger.error(f"Error crawling {url}: {str(e)}")
            continue
            
    logger.info(f"Crawling completed. Found {len(docs)} documents")
    return docs

def chunk_documents(documents: list) -> list:
    """–î–æ–∫—É–º–µ–Ω—Ç—É—É–¥—ã–≥ –∂–∏–∂–∏–≥ —Ö—ç—Å—ç–≥—Ç —Ö—É–≤–∞–∞—Ö"""
    splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,  # Increased chunk size for better content
        chunk_overlap=100,  # Increased overlap for better context
        separators=["\n\n", "\n", ".", "!", "?", ",", " ", ""]
    )
    
    chunks = []
    for doc in documents:
        text_chunks = splitter.split_text(doc["text"])
        for i, chunk in enumerate(text_chunks):
            # Create proper Document objects with metadata
            doc_obj = Document(
                page_content=chunk,
                metadata={
                    "source": doc["url"],
                    "title": doc.get("title", ""),
                    "chunk_id": i
                }
            )
            chunks.append(doc_obj)
    
    logger.info(f"Created {len(chunks)} chunks from {len(documents)} documents")
    return chunks

def load_vectorstore():
    """Vector store –∞—á–∞–∞–ª–∞—Ö —ç—Å–≤—ç–ª —à–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç—Ö"""
    embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)
    
    if os.path.exists(VECTOR_STORE_PATH):
        logger.info("Loading existing vector store...")
        return FAISS.load_local(VECTOR_STORE_PATH, embeddings, allow_dangerous_deserialization=True)
    
    logger.info("Creating new vector store...")
    docs = crawl_docs(DOCS_BASE_URL)
    
    if not docs:
        raise ValueError("No documents found during crawling")
    
    chunks = chunk_documents(docs)
    vs = FAISS.from_documents(chunks, embeddings)
    vs.save_local(VECTOR_STORE_PATH)
    logger.info("Vector store created and saved")
    return vs

# Custom prompt for CloudMN docs
CUSTOM_PROMPT = PromptTemplate(
    template="""CloudMN —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω —Ç—É—Å–ª–∞—Ö. –î–æ–æ—Ä—Ö –º—ç–¥—ç—ç–ª–ª—ç—ç—Ä —Ö–∞—Ä–∏—É–ª–Ω–∞ —É—É:

–ú—ç–¥—ç—ç–ª—ç–ª: {context}

–ê—Å—É—É–ª—Ç: {question}

–•–∞—Ä–∏—É–ª—Ç (–º–æ–Ω–≥–æ–ª —Ö—ç–ª—ç—ç—Ä, —Ç–æ–≤—á –±”©–≥”©”©–¥ —Ç–æ–¥–æ—Ä—Ö–æ–π):""",
    input_variables=["context", "question"]
)

def search_docs_with_rag(question: str) -> dict:
    """RAG –∞—à–∏–≥–ª–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞–∞—Å —Ö–∞—Ä–∏—É–ª—Ç —Ö–∞–π—Ö"""
    try:
        if not qa_chain:
            return {
                "answer": "–î–æ–∫—É–º–µ–Ω—Ç —Ö–∞–π–ª—Ç—ã–Ω —Å–∏—Å—Ç–µ–º –±—ç–ª—ç–Ω –±–∏—à –±–∞–π–Ω–∞.",
                "sources": []
            }
        
        # Get answer with source documents
        result = qa_chain.invoke({"query": question})
        answer = result["result"]
        sources = result.get("source_documents", [])
        
        # Format response with sources
        response = {
            "answer": answer,
            "sources": []
        }
        
        # Add unique sources (limit to 3)
        seen_sources = set()
        for doc in sources[:3]:  # Limit sources
            source_url = doc.metadata.get("source", "")
            if source_url and source_url not in seen_sources:
                seen_sources.add(source_url)
                response["sources"].append({
                    "url": source_url,
                    "title": doc.metadata.get("title", "")
                })
        
        return response
        
    except Exception as e:
        logger.error(f"RAG —Ö–∞–π–ª—Ç–∞–Ω–¥ –∞–ª–¥–∞–∞: {str(e)}")
        return {
            "answer": f"–î–æ–∫—É–º–µ–Ω—Ç —Ö–∞–π–ª—Ç–∞–Ω–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}",
            "sources": []
        }

# Initialize RAG system
try:
    vectorstore = load_vectorstore()
    retriever = vectorstore.as_retriever(
        search_type="similarity",
        search_kwargs={"k": 5}
    )
    
    qa_chain = RetrievalQA.from_chain_type(
        llm=LC_OpenAI(
            openai_api_key=OPENAI_API_KEY, 
            temperature=0.1,
            max_tokens=800,
            model_name="gpt-3.5-turbo-instruct"
        ),
        chain_type="stuff",
        retriever=retriever,
        chain_type_kwargs={"prompt": CUSTOM_PROMPT},
        return_source_documents=True
    )
    logger.info("RAG system initialized successfully")
    
except Exception as e:
    logger.error(f"Failed to initialize RAG system: {str(e)}")
    qa_chain = None

# =============== CHATWOOT –§–£–ù–ö–¶–£–£–î ===============

def is_valid_email(email):
    """–ò–º—ç–π–ª —Ö–∞—è–≥–∏–π–Ω —Ñ–æ—Ä–º–∞—Ç—ã–≥ —à–∞–ª–≥–∞—Ö"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def generate_verification_token(email, conv_id, contact_id):
    """–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö JWT —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö"""
    payload = {
        'email': email,
        'conv_id': conv_id,
        'contact_id': contact_id,
        'exp': datetime.utcnow() + timedelta(hours=24)  # 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ –¥—É—É—Å–Ω–∞
    }
    return jwt.encode(payload, JWT_SECRET, algorithm='HS256')

def verify_token(token):
    """JWT —Ç–æ–∫–µ–Ω—ã–≥ —à–∞–ª–≥–∞—Ö"""
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=['HS256'])
        return payload
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None

def send_verification_email(email, token):
    """–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∏–º—ç–π–ª –∏–ª–≥—ç—ç—Ö"""
    try:
        verification_url = f"{VERIFICATION_URL_BASE}/verify?token={token}"
        
        print(f"üìß –ò–º—ç–π–ª –∏–ª–≥—ç—ç–∂ –±–∞–π–Ω–∞: {email}")
        print(f"üîó Verification URL: {verification_url}")
        print(f"üìÆ SMTP Server: {SMTP_SERVER}:{SMTP_PORT}")
        print(f"üë§ Sender Email: {SENDER_EMAIL}")
        
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = email
        msg['Subject'] = "–ò–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É"
        
        body = f"""
        –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!
        
        –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥–∏–π–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –¥–æ–æ—Ä—Ö –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É:
        
        {verification_url}
        
        –≠–Ω—ç –ª–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–Ω–æ.
        
        –•—ç—Ä—ç–≤ —Ç–∞ –±–∏—à –±–æ–ª –±–∏–¥—ç–Ω–¥ –º—ç–¥—ç–≥–¥—ç–Ω—ç “Ø“Ø.
        
        –ë–∞—è—Ä–ª–∞–ª–∞–∞!
        """
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        print("üîå SMTP —Å–µ—Ä–≤–µ—Ä—Ç —Ö–æ–ª–±–æ–≥–¥–æ–∂ –±–∞–π–Ω–∞...")
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        print("üîê SMTP authentication —Ö–∏–π–∂ –±–∞–π–Ω–∞...")
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        print("üì§ –ò–º—ç–π–ª –∏–ª–≥—ç—ç–∂ –±–∞–π–Ω–∞...")
        server.send_message(msg)
        server.quit()
        
        print(f"‚úÖ –ò–º—ç–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç: {email}")
        return True
    except smtplib.SMTPAuthenticationError as e:
        print(f"‚ùå SMTP –Ω—ç–≤—Ç—Ä—ç—Ö –∞–ª–¥–∞–∞: {e}")
        print("üí° Gmail App Password –∑”©–≤ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–Ω–∞ —É—É")
        return False
    except smtplib.SMTPRecipientsRefused as e:
        print(f"‚ùå –•“Ø–ª—ç—ç–Ω –∞–≤–∞–≥—á–∏–π–Ω –∏–º—ç–π–ª –±—É—Ä—É—É: {e}")
        return False
    except smtplib.SMTPServerDisconnected as e:
        print(f"‚ùå SMTP —Å–µ—Ä–≤–µ—Ä —Å–∞–ª—Å–∞–Ω: {e}")
        return False
    except smtplib.SMTPException as e:
        print(f"‚ùå SMTP –∞–ª–¥–∞–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        print(f"‚ùå –ê–ª–¥–∞–∞–Ω—ã —Ç”©—Ä”©–ª: {type(e).__name__}")
        return False

def get_contact(contact_id):
    """Contact –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
    resp = requests.get(url, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def update_contact(contact_id, attrs):
    """Contact-–∏–π–Ω custom attributes —à–∏–Ω—ç—á–ª—ç—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
    payload = {"custom_attributes": attrs}
    resp = requests.put(url, json=payload, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def get_conversation(conv_id):
    """Conversation –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
    resp = requests.get(url, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def update_conversation(conv_id, attrs):
    """Conversation-–∏–π–Ω custom attributes —à–∏–Ω—ç—á–ª—ç—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/custom_attributes"
    payload = {"custom_attributes": attrs}
    resp = requests.post(url, json=payload, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def send_to_chatwoot(conv_id, text):
    """Chatwoot —Ä—É—É –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/messages"
    headers = {"api_access_token": CHATWOOT_API_KEY}
    payload = {"content": text, "message_type": "outgoing"}
    r = requests.post(url, json=payload, headers=headers)
    r.raise_for_status()

def analyze_customer_issue(thread_id, current_message, customer_email=None):
    """AI –∞—à–∏–≥–ª–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±“Ø—Ö —á–∞—Ç —Ç“Ø“Ø—Ö–∏–π–≥ –¥“Ø–≥–Ω—ç–∂, comprehensive –º—ç–¥—ç—ç–ª—ç–ª ”©–≥”©—Ö"""
    try:
        # OpenAI thread-—Å —Å“Ø“Ø–ª–∏–π–Ω 10 –º–µ—Å—Å–µ–∂–∏–π–≥ –ª –∞–≤–∞—Ö (performance —Å–∞–π–∂—Ä—É—É–ª–∞—Ö)
        messages = client.beta.threads.messages.list(thread_id=thread_id, limit=10)
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂“Ø“Ø–¥–∏–π–≥ —Ü—É–≥–ª—É—É–ª–∞—Ö
        conversation_history = []
        for msg in reversed(messages.data):  # –≠—Ö–Ω—ç—ç—Å –Ω—å —ç—Ä—ç–º–±—ç–ª—ç—Ö
            if msg.role == "user":
                content = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        content += content_block.text.value
                if content.strip():
                    conversation_history.append(f"–•—ç—Ä—ç–≥–ª—ç–≥—á: {content.strip()}")
            elif msg.role == "assistant":
                content = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        content += content_block.text.value
                if content.strip():
                    conversation_history.append(f"AI: {content.strip()[:100]}...")  # –•—è–∑–≥–∞–∞—Ä–ª–∞—Ö
        
        # –•—ç—Ä—ç–≤ —á–∞—Ç —Ç“Ø“Ø—Ö —Ö–æ–æ—Å–æ–Ω –±–æ–ª –∑”©–≤—Ö”©–Ω –æ–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂—ç—ç—Ä –¥“Ø–≥–Ω—ç—Ö
        if not conversation_history:
            conversation_history = [f"–•—ç—Ä—ç–≥–ª—ç–≥—á: {current_message}"]
        
        # Conversation —Ç“Ø“Ø—Ö–∏–π–≥ string –±–æ–ª–≥–æ—Ö (—Å“Ø“Ø–ª–∏–π–Ω 5 –º–µ—Å—Å–µ–∂)
        chat_history = "\n".join(conversation_history[-5:])  # –•—è–∑–≥–∞–∞—Ä–ª–∞—Ö
        
        # –ò–ª“Ø“Ø —Ç–æ–¥–æ—Ä—Ö–æ–π system prompt
        system_msg = (
            "–¢–∞ –±–æ–ª –¥—ç–º–∂–ª—ç–≥–∏–π–Ω –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω. "
            "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±“Ø—Ö —á–∞—Ç —Ç“Ø“Ø—Ö–∏–π–≥ —Ö–∞—Ä–∂, –∞—Å—É—É–¥–ª—ã–≥ –∏–∂ –±“Ø—Ä—ç–Ω –¥“Ø–≥–Ω—ç–∂ ”©–≥–Ω”© “Ø“Ø. "
            "–•—ç—Ä—ç–≤ –æ–ª–æ–Ω –∞—Å—É—É–¥–∞–ª –±–∞–π–≤–∞–ª –≥–æ–ª –∞—Å—É—É–¥–ª—ã–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–∂ —Ñ–æ–∫—É—Å–ª–∞–Ω–∞ —É—É."
        )

        # –ë–æ–≥–∏–Ω–æ user prompt
        user_msg = f'''–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —á–∞—Ç —Ç“Ø“Ø—Ö:
{chat_history}

–û–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂: "{current_message}"

–î–∞—Ä–∞–∞—Ö —Ñ–æ—Ä–º–∞—Ç–∞–∞—Ä —Ç–æ–≤—á –¥“Ø–≥–Ω—ç–ª—Ç ”©–≥–Ω”© “Ø“Ø:

–ê–°–£–£–î–õ–´–ù –¢”®–†”®–õ: [–¢–µ—Ö–Ω–∏–∫–∏–π–Ω/–•—É–¥–∞–ª–¥–∞–∞–Ω—ã/–ú—ç–¥—ç—ç–ª–ª–∏–π–Ω/–ì–æ–º–¥–æ–ª]
–Ø–ê–†–ê–õ–¢–ê–ô –ë–ê–ô–î–ê–õ: [”®–Ω–¥”©—Ä/–î—É–Ω–¥/–ë–∞–≥–∞] 
–¢–û–í–ß –¢–ê–ô–õ–ë–ê–†: [1 ”©–≥“Ø“Ø–ª–±—ç—Ä—ç—ç—Ä]
–®–ê–ê–†–î–õ–ê–ì–ê–¢–ê–ô –ê–†–ì–ê –•–≠–ú–ñ–≠–≠: [–¢–æ–≤—á]'''

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",  # gpt-4-—ç—ç—Å —Ö—É—Ä–¥–∞–Ω
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
            max_tokens=200,  # –•—è–∑–≥–∞–∞—Ä–ª–∞—Ö
            temperature=0.2,
            timeout=15  # 15 —Å–µ–∫—É–Ω–¥—ã–Ω timeout
        )

        return response.choices[0].message.content.strip()

    except Exception as e:
        print(f"‚ùå –ê—Å—É—É–¥–∞–ª –¥“Ø–≥–Ω—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        # Fallback –¥“Ø–≥–Ω—ç–ª—Ç
        return f"""–ê–°–£–£–î–õ–´–ù –¢”®–†”®–õ: –¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π
–Ø–ê–†–ê–õ–¢–ê–ô –ë–ê–ô–î–ê–õ: –î—É–Ω–¥
–¢–û–í–ß –¢–ê–ô–õ–ë–ê–†: {current_message[:100]}
–®–ê–ê–†–î–õ–ê–ì–ê–¢–ê–ô –ê–†–ì–ê –•–≠–ú–ñ–≠–≠: –ê–∂–∏–ª—Ç–Ω—ã –∞–Ω—Ö–∞–∞—Ä–∞–ª —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π"""

def clean_ai_response(response: str) -> str:
    """AI —Ö–∞—Ä–∏—É–ª—Ç—ã–≥ —Ü—ç–≤—ç—Ä–ª—ç—Ö - JSON —Ñ–æ—Ä–º–∞—Ç—ã–≥ –∞—Ä–∏–ª–≥–∞—Ö"""
    try:
        # JSON pattern –æ–ª–æ—Ö
        import json
        
        # –•—ç—Ä—ç–≤ JSON –æ–±—ä–µ–∫—Ç –±–∞–π–≤–∞–ª –∞—Ä–∏–ª–≥–∞—Ö
        if response.strip().startswith('{') and response.strip().endswith('}'):
            try:
                # JSON parse —Ö–∏–π–∂ “Ø–∑—ç—Ö
                json_data = json.loads(response)
                
                # –•—ç—Ä—ç–≤ email, issue, details –≥—ç—Ö –º—ç—Ç key-“Ø“Ø–¥ –±–∞–π–≤–∞–ª —ç–Ω–≥–∏–π–Ω —Ç–µ–∫—Å—Ç –±–æ–ª–≥–æ—Ö
                if isinstance(json_data, dict):
                    if "email" in json_data or "issue" in json_data:
                        # JSON-—ç—ç—Å —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ –æ–π–ª–≥–æ–º–∂—Ç–æ–π –º—ç–¥—ç—ç–ª—ç–ª –≥–∞—Ä–≥–∞—Ö
                        clean_text = "–¢–∞–Ω—ã —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –¥—ç–º–∂–ª—ç–≥–∏–π–Ω –±–∞–≥—Ç –¥–∞–º–∂—É—É–ª–∞–∞. "
                        clean_text += "–£–¥–∞—Ö–≥“Ø–π –∞—Å—É—É–¥–ª—ã–≥ —à–∏–π–¥—ç–∂, —Ç–∞–Ω–¥ —Ö–∞—Ä–∏—É–ª—Ç ”©–≥”©—Ö –±–æ–ª–Ω–æ."
                        return clean_text
            except json.JSONDecodeError:
                pass
        
        # JSON pattern-—É—É–¥—ã–≥ –∞—Ä–∏–ª–≥–∞—Ö
        import re
        
        # {"email": "...", "issue": "...", "details": "..."} –≥—ç—Ö –º—ç—Ç pattern –∞—Ä–∏–ª–≥–∞—Ö
        json_pattern = r'\{[^}]*"email"[^}]*\}'
        response = re.sub(json_pattern, '', response)
        
        # –ò–ª“Ø“Ø–¥—ç–ª –º”©—Ä, —Ö–æ–æ—Å–æ–Ω –∑–∞–π –∞—Ä–∏–ª–≥–∞—Ö
        response = re.sub(r'\n\s*\n', '\n', response)
        response = response.strip()
        
        # –•—ç—Ä—ç–≤ —Ö–∞—Ä–∏—É–ª—Ç —Ö—ç—Ç –±–æ–≥–∏–Ω–æ –±–æ–ª—Å–æ–Ω –±–æ–ª default –º–µ—Å—Å–µ–∂
        if len(response) < 20:
            return "–¢–∞–Ω—ã —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞. –£–¥–∞—Ö–≥“Ø–π —Ö–∞—Ä–∏—É–ª—Ç ”©–≥”©—Ö –±–æ–ª–Ω–æ."
        
        return response
        
    except Exception as e:
        print(f"‚ùå AI —Ö–∞—Ä–∏—É–ª—Ç —Ü—ç–≤—ç—Ä–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return response  # –ê–ª–¥–∞–∞ –≥–∞—Ä–≤–∞–ª –∞–Ω—Ö–Ω—ã —Ö–∞—Ä–∏—É–ª—Ç—ã–≥ –±—É—Ü–∞–∞—Ö

def send_teams_notification(conv_id, customer_message, customer_email=None, escalation_reason="–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–∞–ª", ai_analysis=None):
    """Microsoft Teams —Ä—É—É —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω —Ç–∞–ª–∞–∞—Ä –∞–∂–∏–ª—Ç–∞–Ω–¥ –º—ç–¥—ç—ç–ª—ç—Ö"""
    if not TEAMS_WEBHOOK_URL:
        print("‚ö†Ô∏è Teams webhook URL —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞")
        return False
    
    try:
        # Chatwoot conversation URL
        conv_url = f"{CHATWOOT_BASE_URL}/app/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
        
        # AI –∞—Å—É—É–¥–ª—ã–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª –±—ç–ª—Ç–≥—ç—Ö
        error_summary = escalation_reason
        if ai_analysis:
            error_summary += f"\n\n–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –∞–Ω–∞–ª–∏–∑: {ai_analysis}"
        
        # Teams message format
        teams_message = {
            "type": "message",
            "attachments": [{
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                    "type": "AdaptiveCard",
                    "version": "1.3",
                    "body": [
                        {
                            "type": "TextBlock",
                            "text": "üìã –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç",
                            "weight": "Bolder",
                            "size": "Medium",
                            "color": "Attention"
                        },
                        {
                            "type": "TextBlock",
                            "text": "AI —Å–∏—Å—Ç–µ–º —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂, –∞–∂–∏–ª—Ç–Ω—ã –∞–Ω—Ö–∞–∞—Ä–∞–ª —Ç–∞—Ç–∞—Ö—É–π—Ü –∞—Å—É—É–¥–∞–ª –≥—ç–∂ “Ø–∑—ç–∂ –±–∞–π–Ω–∞.",
                            "wrap": True,
                            "color": "Default"
                        },
                        {
                            "type": "FactSet",
                            "facts": [
                                {
                                    "title": "–•–∞—Ä–∏–ª—Ü–∞–≥—á:",
                                    "value": customer_email or "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π"
                                },
                                {
                                    "title": "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂:",
                                    "value": customer_message[:300] + ("..." if len(customer_message) > 300 else "")
                                },
                                {
                                    "title": "–•—É–≥–∞—Ü–∞–∞:",
                                    "value": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                                }
                            ]
                        }
                    ]
                }
            }]
        }
        
        # AI –¥“Ø–≥–Ω—ç–ª—Ç –Ω—ç–º—ç—Ö
        if ai_analysis:
            teams_message["attachments"][0]["content"]["body"].append({
                "type": "TextBlock",
                "text": "ü§ñ AI –î“Ø–≥–Ω—ç–ª—Ç:",
                "weight": "Bolder",
                "size": "Medium",
                "spacing": "Large"
            })
            teams_message["attachments"][0]["content"]["body"].append({
                "type": "TextBlock",
                "text": ai_analysis,
                "wrap": True,
                "fontType": "Monospace",
                "color": "Good"
            })
        
        # Actions –Ω—ç–º—ç—Ö
        teams_message["attachments"][0]["content"]["actions"] = [
            {
                "type": "Action.OpenUrl",
                "title": "Chatwoot –¥—ç—ç—Ä —Ö–∞—Ä–∞—Ö",
                "url": conv_url
            }
        ]
        
        response = requests.post(TEAMS_WEBHOOK_URL, json=teams_message)
        response.raise_for_status()
        print(f"‚úÖ Teams —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç–ª—ç—ç: {escalation_reason}")
        return True
        
    except Exception as e:
        print(f"‚ùå Teams –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False

def get_ai_response(thread_id, message_content, conv_id=None, customer_email=None, retry_count=0):
    """OpenAI Assistant-—ç—ç—Å —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö"""
    try:
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂–∏–π–≥ thread —Ä—É—É –Ω—ç–º—ç—Ö
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=message_content
        )

        # Assistant run “Ø“Ø—Å–≥—ç—Ö
        run = client.beta.threads.runs.create(
            thread_id=thread_id, 
            assistant_id=ASSISTANT_ID
        )

        # Run –¥—É—É—Å–∞—Ö—ã–≥ —Ö“Ø–ª—ç—ç—Ö
        max_wait = 30
        wait_count = 0
        while wait_count < max_wait:
            run_status = client.beta.threads.runs.retrieve(
                thread_id=thread_id, 
                run_id=run.id
            )
            
            if run_status.status == "completed":
                break
            elif run_status.status in ["failed", "cancelled", "expired"]:
                error_msg = "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
                
                # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
                if retry_count == 0 and conv_id:
                    send_teams_notification(
                        conv_id, 
                        message_content, 
                        customer_email, 
                        f"AI run —Å—Ç–∞—Ç—É—Å –∞–ª–¥–∞–∞: {run_status.status}",
                        f"OpenAI run ID: {run.id}, Status: {run_status.status}"
                    )
                
                return error_msg
                
            time.sleep(1)
            wait_count += 1

        if wait_count >= max_wait:
            timeout_msg = "–•–∞—Ä–∏—É–ª–∞—Ö–∞–¥ —Ö—ç—Ç —É–¥–∞–∂ –±–∞–π–Ω–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
            
            # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω timeout –±–æ–ª)
            if retry_count == 0 and conv_id:
                send_teams_notification(
                    conv_id, 
                    message_content, 
                    customer_email, 
                    "AI —Ö–∞—Ä–∏—É–ª—Ç timeout (30 —Å–µ–∫—É–Ω–¥)",
                    f"OpenAI run ID: {run.id}, Thread ID: {thread_id}"
                )
            
            return timeout_msg

        # Assistant-–∏–π–Ω —Ö–∞—Ä–∏—É–ª—å—Ç—ã–≥ –∞–≤–∞—Ö
        messages = client.beta.threads.messages.list(thread_id=thread_id)
        
        for msg in messages.data:
            if msg.role == "assistant":
                reply = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        reply += content_block.text.value
                
                # AI —Ö–∞—Ä–∏—É–ª—Ç—ã–≥ —Ü—ç–≤—ç—Ä–ª—ç—Ö - JSON —Ñ–æ—Ä–º–∞—Ç—ã–≥ –∞—Ä–∏–ª–≥–∞—Ö
                cleaned_reply = clean_ai_response(reply)
                return cleaned_reply

        # –•–∞—Ä–∏—É–ª—Ç –æ–ª–¥–æ—Ö–≥“Ø–π
        no_response_msg = "–•–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
        
        # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
        if retry_count == 0 and conv_id:
            send_teams_notification(
                conv_id, 
                message_content, 
                customer_email, 
                "AI —Ö–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π",
                f"Thread ID: {thread_id}, Messages —Ö–∞–π–ª—Ç–∞–¥ —Ö–∞—Ä–∏—É–ª—Ç –±–∞–π—Ö–≥“Ø–π"
            )
        
        return no_response_msg
        
    except Exception as e:
        print(f"AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
        error_msg = "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
        
        # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
        if retry_count == 0 and conv_id:
            send_teams_notification(
                conv_id, 
                message_content, 
                customer_email, 
                "AI —Å–∏—Å—Ç–µ–º–∏–π–Ω –∞–ª–¥–∞–∞ (Exception)",
                f"Python exception: {str(e)}, Thread ID: {thread_id}"
            )
        
        return error_msg

@app.route("/verify", methods=["GET"])
def verify_email():
    """–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö endpoint"""
    token = request.args.get('token')
    if not token:
        return "–¢–æ–∫–µ–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π!", 400
    
    payload = verify_token(token)
    if not payload:
        return "–¢–æ–∫–µ–Ω —Ö“Ø—á–∏–Ω–≥“Ø–π —ç—Å–≤—ç–ª —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω!", 400
    
    try:
        # Contact level –¥—ç—ç—Ä email_verified = true –≥—ç–∂ —Ç—ç–º–¥—ç–≥–ª—ç—Ö
        conv_id = payload['conv_id']
        contact_id = payload['contact_id']
        email = payload['email']
        
        # Contact –¥—ç—ç—Ä –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞–¥–≥–∞–ª–∞—Ö
        update_contact(contact_id, {
            "email_verified": "1",  # Checkbox type-–¥ string "true" –∞—à–∏–≥–ª–∞—Ö
            "verified_email": email,
            "verification_date": datetime.utcnow().isoformat()
        })
        
        # Conversation –¥—ç—ç—Ä thread –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞–¥–≥–∞–ª–∞—Ö (thread –Ω—å conversation specific)
        thread_key = f"openai_thread_{contact_id}"
        update_conversation(conv_id, {
            thread_key: None  # –®–∏–Ω—ç thread —ç—Ö–ª“Ø“Ø–ª—ç—Ö
        })
        
        # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö
        send_to_chatwoot(conv_id, f"‚úÖ –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({email}) –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞! –û–¥–æ–æ —Ç–∞ chatbot-—Ç–æ–π —Ö–∞—Ä–∏–ª—Ü–∞–∂ –±–æ–ª–Ω–æ.")
        
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                .success { color: green; font-size: 24px; margin: 20px 0; }
                .info { color: #666; font-size: 16px; }
            </style>
        </head>
        <body>
            <div class="success">‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞!</div>
            <div class="info">–¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({{ email }}) –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞.<br>–û–¥–æ–æ —Ç–∞ chatbot-—Ç–æ–π–≥–æ–æ —Ö–∞—Ä–∏–ª—Ü–∞–∂ –±–æ–ª–Ω–æ.</div>
        </body>
        </html>
        """, email=email)
        
    except Exception as e:
        print(f"Verification –∞–ª–¥–∞–∞: {e}")
        return "–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞!", 500

@app.route("/webhook", methods=["POST"])
def webhook():
    """Chatwoot webhook handler - –±“Ø—Ä—ç–Ω —à–∏–Ω—ç –ª–æ–≥–∏–∫"""
    try:
        data = request.json
        print(f"üîÑ Webhook received: {data.get('message_type', 'unknown')}")
        
        # –ó”©–≤—Ö”©–Ω incoming –º–µ—Å—Å–µ–∂ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö
        if data.get("message_type") != "incoming":
            print("‚è≠Ô∏è Skipping: not incoming message")
            return jsonify({"status": "skipped - not incoming"}), 200

        # “Æ–Ω–¥—Å—ç–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
        conv_id = data["conversation"]["id"]
        message_content = data.get("content", "").strip()
        
        print(f"üìù Conv ID: {conv_id}, Message: '{message_content}'")
        
        # Contact ID –æ–ª–æ—Ö
        contact_id = None
        if "sender" in data and data["sender"]:
            contact_id = data["sender"].get("id")
        
        if not contact_id:
            print("‚ùå Contact ID –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            send_to_chatwoot(conv_id, "–ê–ª–¥–∞–∞: –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
            return jsonify({"status": "error - no contact"}), 400

        print(f"üë§ Contact ID: {contact_id}")

        # ========== –ë–ê–¢–ê–õ–ì–ê–ê–ñ–£–£–õ–ê–õ–¢ –®–ê–õ–ì–ê–• ==========
        print("üîç –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
        
        # Contact-–∏–π–Ω custom attributes –∞–≤–∞—Ö (webhook-—ç—ç—Å —à—É—É–¥)
        is_verified = False
        verified_email = ""
        
        # Webhook –¥–æ—Ç–æ—Ä contact –º—ç–¥—ç—ç–ª—ç–ª –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        if "conversation" in data and "meta" in data["conversation"] and "sender" in data["conversation"]["meta"]:
            sender_meta = data["conversation"]["meta"]["sender"]
            if "custom_attributes" in sender_meta:
                contact_attrs = sender_meta["custom_attributes"]
                email_verified_value = contact_attrs.get("email_verified", "")
                verified_email = contact_attrs.get("verified_email", "")
                
                # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç —à–∞–ª–≥–∞—Ö
                is_verified = str(email_verified_value).lower() in ["true", "1", "yes"]
                
                print(f"üìä Webhook-—ç—ç—Å –∞–≤—Å–∞–Ω: email_verified='{email_verified_value}', verified_email='{verified_email}'")
                print(f"‚úÖ Is verified: {is_verified}")
        
        # –•—ç—Ä—ç–≤ webhook –¥—ç—ç—Ä –±–∞–π—Ö–≥“Ø–π –±–æ–ª API-–∞–∞—Ä –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞—Ö
        if not is_verified:
            print("üîç API-–∞–∞—Ä –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
            try:
                contact = get_contact(contact_id)
                contact_attrs = contact.get("custom_attributes", {})
                email_verified_value = contact_attrs.get("email_verified", "")
                verified_email = contact_attrs.get("verified_email", "")
                
                is_verified = str(email_verified_value).lower() in ["true", "1", "yes"]
                print(f"üìä API-–∞–∞—Å –∞–≤—Å–∞–Ω: email_verified='{email_verified_value}', verified_email='{verified_email}'")
                print(f"‚úÖ Is verified: {is_verified}")
            except Exception as e:
                print(f"‚ùå API –∞–ª–¥–∞–∞: {e}")
                is_verified = False

        # ========== –ë–ê–¢–ê–õ–ì–ê–ê–ñ–£–£–õ–ê–õ–¢–´–ù “Æ–ô–õ–î–≠–õ ==========
        if not is_verified:
            print("üö´ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–∞–≥“Ø–π - –∏–º—ç–π–ª —à–∞–∞—Ä–¥–∞–∂ –±–∞–π–Ω–∞")
            
            # –ò–º—ç–π–ª —Ö–∞—è–≥ —à–∞–ª–≥–∞—Ö
            if is_valid_email(message_content):
                print(f"üìß –ó”©–≤ –∏–º—ç–π–ª: {message_content}")
                
                # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö
                token = generate_verification_token(message_content, conv_id, contact_id)
                
                # –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö
                if send_verification_email(message_content, token):
                    send_to_chatwoot(conv_id, 
                        f"üìß –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({message_content}) —Ä“Ø“Ø –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –ª–∏–Ω–∫ –∏–ª–≥—ç—ç–ª—ç—ç.\n\n"
                        "–ò–º—ç–π–ª—ç—ç —à–∞–ª–≥–∞–∞–¥ –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É. –õ–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–Ω–æ.\n\n"
                        "‚ö†Ô∏è Spam —Ñ–æ–ª–¥–µ—Ä—ã–≥ —à–∞–ª–≥–∞—Ö–∞–∞ –º–∞—Ä—Ç—É—É–∑–∞–π!")
                    print("‚úÖ –ò–º—ç–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç")
                else:
                    send_to_chatwoot(conv_id, "‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.")
                    print("‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞")
            else:
                print(f"‚ùå –ë—É—Ä—É—É –∏–º—ç–π–ª —Ñ–æ—Ä–º–∞—Ç: '{message_content}'")
                send_to_chatwoot(conv_id, 
                    "üëã –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! Chatbot –∞—à–∏–≥–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ —ç—Ö–ª—ç—ç–¥ –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É.\n\n"
                    "üìß –ó”©–≤ –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∏—á—ç—ç–¥ –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø.\n"
                    "–ñ–∏—à—ç—ç: example@gmail.com")
            
            return jsonify({"status": "waiting_verification"}), 200

        # ========== RAG –±–æ–ª–æ–Ω AI ASSISTANT –ó–≠–†–≠–ì –ê–ñ–ò–õ–õ–£–£–õ–ê–• ==========
        print("üöÄ RAG –±–æ–ª–æ–Ω AI Assistant-–≥ –∑—ç—Ä—ç–≥ –∞–∂–∏–ª–ª—É—É–ª–∂ –±–∞–π–Ω–∞...")
        
        # Thread –º—ç–¥—ç—ç–ª—ç–ª –±—ç–ª—Ç–≥—ç—Ö
        conv = get_conversation(conv_id)
        conv_attrs = conv.get("custom_attributes", {})
        thread_key = f"openai_thread_{contact_id}"
        thread_id = conv_attrs.get(thread_key)
        
        # Thread —à–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        if not thread_id:
            print("üßµ –®–∏–Ω—ç thread “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")
            thread = client.beta.threads.create()
            thread_id = thread.id
            update_conversation(conv_id, {thread_key: thread_id})
            print(f"‚úÖ Thread “Ø“Ø—Å–≥—ç–ª—ç—ç: {thread_id}")
        else:
            print(f"‚úÖ –û–¥–æ–æ –±–∞–π–≥–∞–∞ thread –∞—à–∏–≥–ª–∞–∂ –±–∞–π–Ω–∞: {thread_id}")
        
        # –•–∞—Ä–∏—É–ª—Ç—É—É–¥—ã–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö —Ö—É–≤—å—Å–∞–≥—á–∏–¥
        rag_response = {"answer": None, "sources": [], "success": False}
        ai_response_text = None
        ai_success = False
        
        # RAG —Ñ—É–Ω–∫—Ü
        def run_rag():
            nonlocal rag_response
            try:
                print("üìö RAG —Å–∏—Å—Ç–µ–º—ç—ç—Ä —Ö–∞–π–∂ –±–∞–π–Ω–∞...")
                result = search_docs_with_rag(message_content)
                if result["answer"] and "–∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞" not in result["answer"]:
                    rag_response = {
                        "answer": result["answer"],
                        "sources": result["sources"],
                        "success": True
                    }
                    print(f"‚úÖ RAG –∞–º–∂–∏–ª—Ç—Ç–∞–π: {result['answer'][:50]}...")
                else:
                    print("‚ùå RAG —Ö–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            except Exception as e:
                print(f"‚ùå RAG –∞–ª–¥–∞–∞: {e}")
        
        # AI Assistant —Ñ—É–Ω–∫—Ü
        def run_ai_assistant():
            nonlocal ai_response_text, ai_success
            try:
                print("ü§ñ AI Assistant –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞...")
                retry_count = 0
                while retry_count <= MAX_AI_RETRIES:
                    response = get_ai_response(thread_id, message_content, conv_id, verified_email, retry_count)
                    
                    # –•—ç—Ä—ç–≤ –∞–ª–¥–∞–∞—Ç–∞–π —Ö–∞—Ä–∏—É–ª—Ç –±–∏—à –±–æ–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π
                    if not any(error_phrase in response for error_phrase in [
                        "–∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", "—Ö—ç—Ç —É–¥–∞–∂ –±–∞–π–Ω–∞", "–æ–ª–¥—Å–æ–Ω–≥“Ø–π"
                    ]):
                        ai_response_text = response
                        ai_success = True
                        print(f"‚úÖ AI Assistant –∞–º–∂–∏–ª—Ç—Ç–∞–π: {response[:50]}...")
                        break
                        
                    retry_count += 1
                    if retry_count <= MAX_AI_RETRIES:
                        print(f"üîÑ AI –¥–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–∂ –±–∞–π–Ω–∞... ({retry_count}/{MAX_AI_RETRIES})")
                        time.sleep(2)
                
                if not ai_success:
                    print("‚ùå AI Assistant –±“Ø—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ –±“Ø—Ç—ç–ª–≥“Ø–π—Ç—ç–≤")
                    
            except Exception as e:
                print(f"‚ùå AI Assistant –∞–ª–¥–∞–∞: {e}")
        
        # –•–æ—ë—Ä —Å–∏—Å—Ç–µ–º–∏–π–≥ –∑—ç—Ä—ç–≥ –∞–∂–∏–ª–ª—É—É–ª–∞—Ö
        rag_thread = threading.Thread(target=run_rag)
        ai_thread = threading.Thread(target=run_ai_assistant)
        
        # Thread —ç—Ö–ª“Ø“Ø–ª—ç—Ö
        rag_thread.start()
        ai_thread.start()
        
        # –•–æ—ë—É–ª–∞–Ω–≥ –Ω—å –¥—É—É—Å–∞—Ö—ã–≥ —Ö“Ø–ª—ç—ç—Ö (–º–∞–∫—Å–∏–º—É–º 45 —Å–µ–∫—É–Ω–¥)
        rag_thread.join(timeout=30)
        ai_thread.join(timeout=30)
        
        print(f"üîç “Æ—Ä –¥“Ø–Ω: RAG={rag_response['success']}, AI={ai_success}")
        
        # ========== –•–ê–†–ò–£–õ–¢–£–£–î–´–ì –ù–≠–ì–¢–ì–≠–• ==========
        final_response = ""
        response_type = ""
        
        if rag_response["success"] and ai_success:
            # –•–æ—ë—É–ª–∞–∞ –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–æ–ª –Ω—ç–≥—Ç–≥—ç—Ö
            print("üéØ –•–æ—ë—Ä —Å–∏—Å—Ç–µ–º –∞–º–∂–∏–ª—Ç—Ç–∞–π - —Ö–∞—Ä–∏—É–ª—Ç—É—É–¥—ã–≥ –Ω—ç–≥—Ç–≥—ç–∂ –±–∞–π–Ω–∞")
            
            final_response = f"üìö **–î–æ–∫—É–º–µ–Ω—Ç–∞–∞—Å –æ–ª—Å–æ–Ω –º—ç–¥—ç—ç–ª—ç–ª:**\n{rag_response['answer']}\n\n"
            final_response += f"ü§ñ **AI —Ç—É—Å–ª–∞—Ö—ã–Ω –Ω—ç–º—ç–ª—Ç –∑”©–≤–ª”©–≥”©”©:**\n{ai_response_text}"
            
            # RAG sources –Ω—ç–º—ç—Ö
            if rag_response["sources"]:
                final_response += "\n\nüìñ **–•–æ–ª–±–æ–≥–¥–æ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—É—É–¥:**\n"
                for i, source in enumerate(rag_response["sources"], 1):
                    title = source.get("title", "–î–æ–∫—É–º–µ–Ω—Ç")
                    url = source.get("url", "")
                    final_response += f"{i}. [{title}]({url})\n"
            
            response_type = "RAG + AI Assistant"
            
        elif rag_response["success"]:
            # –ó”©–≤—Ö”©–Ω RAG –∞–º–∂–∏–ª—Ç—Ç–∞–π
            print("üìö –ó”©–≤—Ö”©–Ω RAG –∞–º–∂–∏–ª—Ç—Ç–∞–π")
            
            final_response = rag_response["answer"]
            
            # RAG sources –Ω—ç–º—ç—Ö
            if rag_response["sources"]:
                final_response += "\n\nüìö **–•–æ–ª–±–æ–≥–¥–æ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—É—É–¥:**\n"
                for i, source in enumerate(rag_response["sources"], 1):
                    title = source.get("title", "–î–æ–∫—É–º–µ–Ω—Ç")
                    url = source.get("url", "")
                    final_response += f"{i}. [{title}]({url})\n"
            
            response_type = "RAG"
            
        elif ai_success:
            # –ó”©–≤—Ö”©–Ω AI Assistant –∞–º–∂–∏–ª—Ç—Ç–∞–π
            print("ü§ñ –ó”©–≤—Ö”©–Ω AI Assistant –∞–º–∂–∏–ª—Ç—Ç–∞–π")
            final_response = ai_response_text
            response_type = "AI Assistant"
            
        else:
            # –•–æ—ë—É–ª–∞–∞ –±“Ø—Ç—ç–ª–≥“Ø–π—Ç—ç–≤
            print("‚ùå –•–æ—ë—Ä —Å–∏—Å—Ç–µ–º –±“Ø—Ç—ç–ª–≥“Ø–π—Ç—ç–≤ - –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∂ –±–∞–π–Ω–∞")
            
            send_teams_notification(
                conv_id, 
                message_content, 
                verified_email, 
                "RAG –±–æ–ª–æ–Ω AI Assistant —Ö–æ—ë—É–ª–∞–∞ –±“Ø—Ç—ç–ª–≥“Ø–π—Ç—ç–≤",
                f"Thread ID: {thread_id}, –•–æ—ë—Ä —Å–∏—Å—Ç–µ–º –∞–ª–¥–∞–∞ –≥–∞—Ä–≥–∞–ª–∞–∞"
            )
            
            final_response = (
                "üö® –£—É—á–ª–∞–∞—Ä–∞–π, —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞—Å—É—É–¥–∞–ª –≥–∞—Ä–ª–∞–∞.\n\n"
                "–ë–∏ —Ç–∞–Ω—ã –∞—Å—É—É–ª—Ç—ã–≥ —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –±–∞–≥—Ç –¥–∞–º–∂—É—É–ª–∞–∞. –£–¥–∞—Ö–≥“Ø–π –∞—Å—É—É–¥–ª—ã–≥ —à–∏–π–¥—ç–∂, —Ç–∞–Ω–¥ —Ö–∞—Ä–∏—É–ª—Ç ”©–≥”©—Ö –±–æ–ª–Ω–æ.\n\n"
                "üïê –¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø..."
            )
            response_type = "Error - Escalated"
        
        # ========== –•–ê–†–ò–£–õ–¢ –ò–õ–ì–≠–≠–• ==========
        # Chatwoot —Ä—É—É –∏–ª–≥—ç—ç—Ö
        send_to_chatwoot(conv_id, final_response)
        print(f"‚úÖ {response_type} —Ö–∞—Ä–∏—É–ª—Ç –∏–ª–≥—ç—ç–ª—ç—ç: {final_response[:50]}...")
        
        # Teams –º—ç–¥—ç—ç–ª—ç—Ö –ª–æ–≥–∏–∫ - –∑”©–≤—Ö”©–Ω —à–∏–Ω—ç –∞—Å—É—É–¥–∞–ª —ç—Å–≤—ç–ª —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞—Å—É—É–¥–∞–ª “Ø–µ–¥
        try:
            # –•—ç—Ä—ç–≤ —Ö–æ—ë—É–ª–∞–∞ –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–æ–ª Teams-–¥ –º—ç–¥—ç—ç–ª—ç—Ö —Ö—ç—Ä—ç–≥–≥“Ø–π
            if not (rag_response["success"] and ai_success):
                # Escalation —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
                should_escalate, escalation_reason = should_escalate_to_teams(thread_id, message_content)
                
                if should_escalate:
                    # AI –¥“Ø–≥–Ω—ç–ª—Ç —Ö–∏–π—Ö
                    ai_analysis = analyze_customer_issue(thread_id, message_content, verified_email)
                    
                    # Teams –º—ç–¥—ç—ç–ª—ç—Ö
                    send_teams_notification(
                        conv_id, 
                        message_content, 
                        verified_email, 
                        escalation_reason,
                        ai_analysis
                    )
                    print(f"üì¢ Teams –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç–ª—ç—ç: {escalation_reason}")
        except Exception as e:
            print(f"‚ùå Teams –º—ç–¥—ç—ç–ª—ç—Ö –∞–ª–¥–∞–∞: {e}")
        
        return jsonify({"status": "success"}), 200

    except Exception as e:
        print(f"üí• Webhook –∞–ª–¥–∞–∞: {e}")
        return jsonify({"status": f"error: {str(e)}"}), 500

@app.route("/docs-search", methods=["POST"])
def docs_search():
    """RAG —Å–∏—Å—Ç–µ–º—ç—ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç —Ö–∞–π—Ö —Ç—É—Å–¥–∞–∞ endpoint"""
    try:
        if not qa_chain:
            return jsonify({"error": "RAG —Å–∏—Å—Ç–µ–º –±—ç–ª—ç–Ω –±–∏—à –±–∞–π–Ω–∞"}), 500
            
        data = request.json
        if not data:
            return jsonify({"error": "JSON ”©–≥”©–≥–¥”©–ª –±–∞–π—Ö–≥“Ø–π"}), 400
            
        question = data.get("question", "").strip()
        if not question:
            return jsonify({"error": "–ê—Å—É—É–ª—Ç –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞"}), 400
            
        logger.info(f"RAG —Ö–∞–π–ª—Ç: {question}")
        
        # RAG —Ö–∞–π–ª—Ç —Ö–∏–π—Ö
        result = search_docs_with_rag(question)
        
        # Response —Ñ–æ—Ä–º–∞—Ç–ª–∞—Ö
        response = {
            "question": question,
            "answer": result["answer"],
            "sources": result["sources"],
            "timestamp": datetime.utcnow().isoformat()
        }
        
        logger.info(f"RAG —Ö–∞—Ä–∏—É–ª—Ç: {len(result['sources'])} sources –æ–ª–¥–ª–æ–æ")
        return jsonify(response), 200
        
    except Exception as e:
        logger.error(f"RAG endpoint –∞–ª–¥–∞–∞: {str(e)}")
        return jsonify({"error": f"–°–∏—Å—Ç–µ–º–∏–π–Ω –∞–ª–¥–∞–∞: {str(e)}"}), 500

@app.route("/health", methods=["GET"])
def health():
    """–°–∏—Å—Ç–µ–º–∏–π–Ω health check"""
    status = {
        "status": "ok",
        "timestamp": datetime.utcnow().isoformat(),
        "components": {
            "rag_system": qa_chain is not None,
            "openai_client": client is not None,
            "teams_webhook": TEAMS_WEBHOOK_URL is not None,
            "email_smtp": SENDER_EMAIL is not None and SENDER_PASSWORD is not None,
            "chatwoot_api": CHATWOOT_API_KEY is not None and ACCOUNT_ID is not None
        },
        "configuration": {
            "smtp_server": f"{SMTP_SERVER}:{SMTP_PORT}",
            "sender_email": SENDER_EMAIL if SENDER_EMAIL else "‚ùå –¢–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π",
            "sender_password_set": "‚úÖ –¢–æ—Ö–∏—Ä—É—É–ª—Å–∞–Ω" if SENDER_PASSWORD else "‚ùå –¢–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π",
            "verification_url_base": VERIFICATION_URL_BASE,
            "jwt_secret_set": "‚úÖ –¢–æ—Ö–∏—Ä—É—É–ª—Å–∞–Ω" if JWT_SECRET and JWT_SECRET != "your-secret-key-here" else "‚ùå Default —É—Ç–≥–∞",
            "chatwoot_base_url": CHATWOOT_BASE_URL,
            "docs_base_url": DOCS_BASE_URL,
            "vector_store_exists": os.path.exists(VECTOR_STORE_PATH)
        }
    }
    
    # –ò–º—ç–π–ª —Ç–æ—Ö–∏—Ä–≥–æ–æ–Ω—ã –Ω–∞—Ä–∏–π–≤—á–∏–ª—Å–∞–Ω —à–∞–ª–≥–∞–ª—Ç
    email_issues = []
    if not SENDER_EMAIL:
        email_issues.append("SENDER_EMAIL —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π")
    if not SENDER_PASSWORD:
        email_issues.append("SENDER_PASSWORD —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π")
    if SMTP_SERVER == "smtp.gmail.com" and "@gmail.com" not in (SENDER_EMAIL or ""):
        email_issues.append("Gmail SMTP –∞—à–∏–≥–ª–∞–∂ –±–∞–π–≥–∞–∞ —á Gmail —Ö–∞—è–≥ –±–∏—à")
    
    if email_issues:
        status["email_issues"] = email_issues
    
    # –ù–∏–π—Ç —Å—Ç–∞—Ç—É—Å —à–∞–ª–≥–∞—Ö
    all_ok = all(status["components"].values())
    if not all_ok:
        status["status"] = "warning"
        
    return jsonify(status), 200 if all_ok else 206

@app.route("/rebuild-docs", methods=["POST"])
def rebuild_docs():
    """–î–æ–∫—É–º–µ–Ω—Ç—ã–Ω vector store –¥–∞—Ö–∏–Ω –±“Ø—Ç—ç—ç—Ö"""
    try:
        logger.info("–î–æ–∫—É–º–µ–Ω—Ç—ã–Ω vector store –¥–∞—Ö–∏–Ω –±“Ø—Ç—ç—ç–∂ –±–∞–π–Ω–∞...")
        
        # –•—É—É—á–∏–Ω vector store —É—Å—Ç–≥–∞—Ö
        if os.path.exists(VECTOR_STORE_PATH):
            import shutil
            shutil.rmtree(VECTOR_STORE_PATH)
            logger.info("–•—É—É—á–∏–Ω vector store —É—Å—Ç–≥–∞–ª–∞–∞")
        
        # –®–∏–Ω—ç vector store “Ø“Ø—Å–≥—ç—Ö
        global qa_chain, vectorstore
        
        # –î–æ–∫—É–º–µ–Ω—Ç —Ü—É–≥–ª—É—É–ª–∞—Ö
        docs = crawl_docs(DOCS_BASE_URL)
        if not docs:
            return jsonify({"error": "–î–æ–∫—É–º–µ–Ω—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π"}), 400
        
        # Vector store “Ø“Ø—Å–≥—ç—Ö
        chunks = chunk_documents(docs)
        embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)
        vectorstore = FAISS.from_documents(chunks, embeddings)
        vectorstore.save_local(VECTOR_STORE_PATH)
        
        # QA chain –¥–∞—Ö–∏–Ω “Ø“Ø—Å–≥—ç—Ö
        retriever = vectorstore.as_retriever(
            search_type="similarity",
            search_kwargs={"k": 5}
        )
        
        qa_chain = RetrievalQA.from_chain_type(
            llm=LC_OpenAI(
                openai_api_key=OPENAI_API_KEY, 
                temperature=0.1,
                max_tokens=800,
                model_name="gpt-3.5-turbo-instruct"
            ),
            chain_type="stuff",
            retriever=retriever,
            chain_type_kwargs={"prompt": CUSTOM_PROMPT},
            return_source_documents=True
        )
        
        logger.info(f"Vector store –∞–º–∂–∏–ª—Ç—Ç–∞–π –¥–∞—Ö–∏–Ω –±“Ø—Ç—ç—ç–ª—ç—ç: {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç, {len(chunks)} chunk")
        
        return jsonify({
            "status": "success",
            "message": f"–î–æ–∫—É–º–µ–Ω—Ç—ã–Ω vector store –¥–∞—Ö–∏–Ω –±“Ø—Ç—ç—ç–ª—ç—ç",
            "documents_count": len(docs),
            "chunks_count": len(chunks),
            "timestamp": datetime.utcnow().isoformat()
        }), 200
        
    except Exception as e:
        logger.error(f"Vector store –¥–∞—Ö–∏–Ω –±“Ø—Ç—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {str(e)}")
        return jsonify({"error": f"–ê–ª–¥–∞–∞: {str(e)}"}), 500

def should_escalate_to_teams(thread_id, current_message):
    """–¢—É—Ö–∞–π–Ω –∞—Å—É—É–¥–ª—ã–≥ Teams-–¥ –∏–ª–≥—ç—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∏–π–¥—ç—Ö"""
    try:
        # OpenAI thread-—Å —Å“Ø“Ø–ª–∏–π–Ω 20 –º–µ—Å—Å–µ–∂–∏–π–≥ –∞–≤–∞—Ö
        messages = client.beta.threads.messages.list(thread_id=thread_id, limit=20)
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂“Ø“Ø–¥–∏–π–≥ —Ü—É–≥–ª—É—É–ª–∞—Ö
        user_messages = []
        for msg in reversed(messages.data):
            if msg.role == "user":
                content = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        content += content_block.text.value
                if content.strip():
                    user_messages.append(content.strip())
        
        # –•—ç—Ä—ç–≤ –∞–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂ –±–æ–ª Teams-–¥ –∏–ª–≥—ç—ç—Ö
        if len(user_messages) <= 1:
            return True, "–ê–Ω—Ö–Ω—ã –∞—Å—É—É–ª—Ç"
        
        # AI-–∞–∞—Ä —à–∏–Ω—ç –∞—Å—É—É–¥–∞–ª –º”©–Ω —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        system_msg = (
            "–¢–∞ –±–æ–ª —á–∞—Ç –¥“Ø–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç–Ω–∏–π –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω. "
            "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Å“Ø“Ø–ª–∏–π–Ω –º–µ—Å—Å–µ–∂ –Ω—å —à–∏–Ω—ç –∞—Å—É—É–¥–∞–ª –º”©–Ω —ç—Å—ç—Ö–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–Ω–æ —É—É."
        )
        
        user_msg = f'''
–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω ”©–º–Ω”©—Ö –º–µ—Å—Å–µ–∂“Ø“Ø–¥:
{chr(10).join(user_messages[:-1])}

–û–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂: "{current_message}"

–î–∞—Ä–∞–∞—Ö –∞–ª—å –Ω—ç–≥—ç—ç—Ä —Ö–∞—Ä–∏—É–ª–Ω–∞ —É—É:
- "–®–ò–ù_–ê–°–£–£–î–ê–õ" - —Ö—ç—Ä—ç–≤ –æ–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂ —à–∏–Ω—ç —Ç”©—Ä–ª–∏–π–Ω –∞—Å—É—É–¥–∞–ª –±–æ–ª
- "“Æ–†–ì–≠–õ–ñ–õ–≠–õ" - —Ö—ç—Ä—ç–≤ ”©–º–Ω”©—Ö –∞—Å—É—É–¥–ª—ã–Ω “Ø—Ä–≥—ç–ª–∂–ª—ç–ª, —Ç–æ–¥—Ä—É—É–ª–≥–∞ –±–æ–ª
- "–î–ê–•–ò–ù_–ê–°–£–£–õ–¢" - —Ö—ç—Ä—ç–≤ –∏–∂–∏–ª –∞—Å—É—É–¥–ª—ã–≥ –¥–∞—Ö–∏–Ω –∞—Å—É—É–∂ –±–∞–π–≥–∞–∞ –±–æ–ª
'''
        
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
            max_tokens=50,
            temperature=0.1
        )
        
        analysis_result = response.choices[0].message.content.strip()
        
        if "–®–ò–ù_–ê–°–£–£–î–ê–õ" in analysis_result:
            return True, "–®–∏–Ω—ç –∞—Å—É—É–¥–∞–ª –∏–ª—Ä—ç–≤"
        else:
            return False, "”®–º–Ω”©—Ö –∞—Å—É—É–¥–ª—ã–Ω “Ø—Ä–≥—ç–ª–∂–ª—ç–ª"
            
    except Exception as e:
        print(f"‚ùå Escalation —à–∏–π–¥—ç—Ö –∞–ª–¥–∞–∞: {e}")
        # –ê–ª–¥–∞–∞ –≥–∞—Ä–≤–∞–ª –∞–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂ –≥—ç–∂ “Ø–∑—ç—Ö
        return True, "–ê–ª–¥–∞–∞ - –∞–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂ –≥—ç–∂ “Ø–∑—ç–≤"

if __name__ == "__main__":
    app.run(debug=True, port=5000)