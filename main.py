import os
import time
import requests
import re
import jwt
import smtplib
import hashlib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
from flask import Flask, request, jsonify, render_template_string
from openai import OpenAI

app = Flask(__name__)

# –û—Ä—á–Ω—ã —Ö—É–≤—å—Å–∞–≥—á–∏–¥
OPENAI_API_KEY    = os.environ["OPENAI_API_KEY"]
ASSISTANT_ID      = os.environ["ASSISTANT_ID"]
CHATWOOT_API_KEY  = os.environ["CHATWOOT_API_KEY"]
ACCOUNT_ID        = os.environ["ACCOUNT_ID"]
CHATWOOT_BASE_URL = "https://app.chatwoot.com"

# Email —Ç–æ—Ö–∏—Ä–≥–æ–æ
SMTP_SERVER = os.environ.get("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT = int(os.environ.get("SMTP_PORT", "587"))
SENDER_EMAIL = os.environ["SENDER_EMAIL"]
SENDER_PASSWORD = os.environ["SENDER_PASSWORD"]

# Microsoft Teams —Ç–æ—Ö–∏—Ä–≥–æ–æ
TEAMS_WEBHOOK_URL = os.environ.get("TEAMS_WEBHOOK_URL")
MAX_AI_RETRIES = 2  # AI —Ö—ç–¥—ç–Ω —É–¥–∞–∞ –æ—Ä–æ–ª–¥—Å–æ–Ω—ã –¥–∞—Ä–∞–∞ –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞—Ö

# JWT —Ç–æ—Ö–∏—Ä–≥–æ–æ
JWT_SECRET = os.environ.get("JWT_SECRET", "your-secret-key-here")
VERIFICATION_URL_BASE = os.environ.get("VERIFICATION_URL_BASE", "http://localhost:5000")

# OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=OPENAI_API_KEY)

# –ò–º—ç–π–ª rate limiting –±—É—Ñ–µ—Ä—ã (—Å–∞–Ω–∞—Ö –æ–π–¥ —Ö–∞–¥–≥–∞–ª–∞—Ö)
email_attempts = {}
MAX_EMAIL_ATTEMPTS = 3  # 1 —Ü–∞–≥—Ç –¥—ç—ç–¥ —Ç–∞–ª –Ω—å 3 —É–¥–∞–∞
ATTEMPT_WINDOW = 3600   # 1 —Ü–∞–≥ (—Å–µ–∫—É–Ω–¥—ç—ç—Ä)

def is_valid_email(email):
    """–ò–º—ç–π–ª —Ö–∞—è–≥–∏–π–Ω —Ñ–æ—Ä–º–∞—Ç—ã–≥ —à–∞–ª–≥–∞—Ö - –∏–ª“Ø“Ø –Ω–∞—Ä–∏–π–≤—á–∏–ª—Å–∞–Ω"""
    if not email or len(email) > 254:  # RFC 5321 —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã–Ω –¥–∞–≥—É—É
        return False
    
    # “Æ–Ω–¥—Å—ç–Ω regex —à–∞–ª–≥–∞–ª—Ç
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(pattern, email):
        return False
    
    # @ —Ç—ç–º–¥—ç–≥ –Ω—ç–≥ –±–∞–π—Ö —ë—Å—Ç–æ–π
    if email.count('@') != 1:
        return False
    
    # Local –±–∞ domain —Ö—ç—Å–≥–∏–π–≥ —Ç—É—Å–≥–∞–∞—Ä–ª–∞—Ö
    local, domain = email.split('@')
    
    # Local —Ö—ç—Å–≥–∏–π–Ω —É—Ä—Ç —à–∞–ª–≥–∞—Ö (64 —Ç—ç–º–¥—ç–≥—Ç—ç—ç—Å –∏–ª“Ø“Ø–≥“Ø–π)
    if len(local) > 64:
        return False
    
    # Domain —Ö—ç—Å–≥–∏–π–Ω —É—Ä—Ç —à–∞–ª–≥–∞—Ö
    if len(domain) > 253:
        return False
    
    return True

def check_email_rate_limit(email):
    """–ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö –¥–∞–≤—Ç–∞–º–∂–∏–π–≥ —à–∞–ª–≥–∞—Ö"""
    now = time.time()
    email_hash = hashlib.md5(email.encode()).hexdigest()
    
    if email_hash in email_attempts:
        # –•—É—É—á–∏–Ω –æ—Ä–æ–ª–¥–ª–æ–≥—É—É–¥—ã–≥ —Ü—ç–≤—ç—Ä–ª—ç—Ö
        email_attempts[email_hash] = [
            timestamp for timestamp in email_attempts[email_hash] 
            if now - timestamp < ATTEMPT_WINDOW
        ]
        
        # –•—ç—Ç –æ–ª–æ–Ω –æ—Ä–æ–ª–¥–ª–æ–≥–æ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        if len(email_attempts[email_hash]) >= MAX_EMAIL_ATTEMPTS:
            return False, f"–•—ç—Ç –æ–ª–æ–Ω –æ—Ä–æ–ª–¥–ª–æ–≥–æ! {ATTEMPT_WINDOW//60} –º–∏–Ω—É—Ç—ã–Ω –¥–∞—Ä–∞–∞ –¥–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
    else:
        email_attempts[email_hash] = []
    
    # –®–∏–Ω—ç –æ—Ä–æ–ª–¥–ª–æ–≥–æ –Ω—ç–º—ç—Ö
    email_attempts[email_hash].append(now)
    return True, "OK"

def generate_verification_token(email, conv_id, contact_id):
    """–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö JWT —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö - –∏–ª“Ø“Ø —Ö–∞–º–≥–∞–∞–ª–∞–ª—Ç—Ç–∞–π"""
    payload = {
        'email': email.lower().strip(),  # Email-–≥ normalize —Ö–∏–π—Ö
        'conv_id': str(conv_id),
        'contact_id': str(contact_id),
        'issued_at': datetime.utcnow().timestamp(),
        'exp': datetime.utcnow() + timedelta(hours=24)  # 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ –¥—É—É—Å–Ω–∞
    }
    return jwt.encode(payload, JWT_SECRET, algorithm='HS256')

def verify_token(token):
    """JWT —Ç–æ–∫–µ–Ω—ã–≥ —à–∞–ª–≥–∞—Ö - –∏–ª“Ø“Ø –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π error handling"""
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=['HS256'])
        
        # –¢–æ–∫–µ–Ω–∏–π –Ω–∞—Å—ã–≥ –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞—Ö
        if 'exp' in payload:
            exp_time = payload['exp']
            if isinstance(exp_time, datetime):
                if datetime.utcnow() > exp_time:
                    return None
        
        return payload
    except jwt.ExpiredSignatureError:
        print("‚ùå JWT —Ç–æ–∫–µ–Ω —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω")
        return None
    except jwt.InvalidTokenError as e:
        print(f"‚ùå JWT —Ç–æ–∫–µ–Ω –±—É—Ä—É—É: {e}")
        return None
    except Exception as e:
        print(f"‚ùå JWT —Ç–æ–∫–µ–Ω —à–∞–ª–≥–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
        return None

def test_email_connection():
    """SMTP —Ö–æ–ª–±–æ–ª—Ç—ã–≥ —Ç–µ—Å—Ç —Ö–∏–π—Ö"""
    try:
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        server.quit()
        return True, "SMTP —Ö–æ–ª–±–æ–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π"
    except smtplib.SMTPAuthenticationError:
        return False, "SMTP –Ω—ç–≤—Ç—Ä—ç—Ö –Ω—ç—Ä –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É"
    except smtplib.SMTPConnectError:
        return False, f"SMTP —Å–µ—Ä–≤–µ—Ä—Ç—ç–π —Ö–æ–ª–±–æ–≥–¥–æ–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π: {SMTP_SERVER}:{SMTP_PORT}"
    except Exception as e:
        return False, f"SMTP —Ö–æ–ª–±–æ–ª—Ç—ã–Ω –∞–ª–¥–∞–∞: {str(e)}"

def send_verification_email(email, token):
    """–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∏–º—ç–π–ª –∏–ª–≥—ç—ç—Ö - HTML —Ñ–æ—Ä–º–∞—Ç –∞—à–∏–≥–ª–∞—Ö"""
    try:
        # Rate limiting —à–∞–ª–≥–∞—Ö
        can_send, message = check_email_rate_limit(email)
        if not can_send:
            print(f"‚ùå Rate limit: {message}")
            return False, message
        
        # SMTP —Ö–æ–ª–±–æ–ª—Ç —Ç–µ—Å—Ç —Ö–∏–π—Ö
        connection_ok, connection_msg = test_email_connection()
        if not connection_ok:
            print(f"‚ùå SMTP —Ö–æ–ª–±–æ–ª—Ç: {connection_msg}")
            return False, connection_msg
        
        verification_url = f"{VERIFICATION_URL_BASE}/verify?token={token}"
        
        msg = MIMEMultipart('alternative')
        msg['From'] = SENDER_EMAIL
        msg['To'] = email
        msg['Subject'] = "üîê –ò–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É"
        
        # HTML –∞–≥—É—É–ª–≥–∞
        html_body = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç</title>
    <style>
        body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 0; background-color: #f5f5f5; }}
        .container {{ max-width: 600px; margin: 0 auto; background-color: white; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }}
        .content {{ padding: 30px; }}
        .verify-button {{ 
            display: inline-block; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white; 
            padding: 15px 30px; 
            text-decoration: none; 
            border-radius: 25px; 
            font-weight: bold;
            margin: 20px 0;
            text-align: center;
        }}
        .verify-button:hover {{ opacity: 0.9; }}
        .info-box {{ background-color: #e3f2fd; border-left: 4px solid #2196f3; padding: 15px; margin: 20px 0; }}
        .warning-box {{ background-color: #fff3e0; border-left: 4px solid #ff9800; padding: 15px; margin: 20px 0; }}
        .footer {{ background-color: #f8f9fa; padding: 20px; text-align: center; color: #666; font-size: 12px; }}
        .logo {{ font-size: 24px; font-weight: bold; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">ü§ñ ChatBot</div>
            <h1>–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç</h1>
        </div>
        
        <div class="content">
            <h2>üëã –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!</h2>
            <p>–¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥–∏–π–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –¥–æ–æ—Ä—Ö —Ç–æ–≤—á–ª—É—É—Ä –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É:</p>
            
            <div style="text-align: center;">
                <a href="{verification_url}" class="verify-button">
                    ‚úÖ –ò–º—ç–π–ª—ç—ç –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö
                </a>
            </div>
            
            <div class="info-box">
                <strong>üí° –ú—ç–¥—ç—ç–ª—ç–ª:</strong>
                <ul>
                    <li>–≠–Ω—ç –ª–∏–Ω–∫ –∑”©–≤—Ö”©–Ω 24 —Ü–∞–≥–∏–π–Ω —Ç—É—Ä—à —Ö“Ø—á–∏–Ω—Ç—ç–π</li>
                    <li>–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª—Å–Ω—ã –¥–∞—Ä–∞–∞ —Ç–∞ chatbot-—Ç–æ–π —Ö–∞—Ä–∏–ª—Ü–∞–∂ –±–æ–ª–Ω–æ</li>
                    <li>–ê—é—É–ª–≥“Ø–π –±–∞–π–¥–ª—ã–Ω “Ø“Ø–¥–Ω—ç—ç—Å –ª–∏–Ω–∫–∏–π–≥ —Ö—É–≤–∞–∞–ª—Ü–∞—Ö–≥“Ø–π –±–∞–π—Ö—ã–≥ –∑”©–≤–ª”©–∂ –±–∞–π–Ω–∞</li>
                </ul>
            </div>
            
            <div class="warning-box">
                <strong>‚ö†Ô∏è –ê–Ω—Ö–∞–∞—Ä:</strong> –•—ç—Ä—ç–≤ —Ç–∞ —ç–Ω—ç –∏–º—ç–π–ª–∏–π–≥ —Ö“Ø—Å—Å—ç–Ω–≥“Ø–π –±–æ–ª –±–∏–¥—ç–Ω–¥ –º—ç–¥—ç–≥–¥—ç–Ω—ç “Ø“Ø —ç—Å–≤—ç–ª —ç–Ω—ç –∏–º—ç–π–ª–∏–π–≥ —É—Å—Ç–≥–∞–∞—Ä–∞–π.
            </div>
            
            <p>–•—ç—Ä—ç–≤ —Ç–æ–≤—á–ª—É—É—Ä –∞–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–∞–π–≤–∞–ª –¥–æ–æ—Ä—Ö –ª–∏–Ω–∫–∏–π–≥ —Ö—É—É–ª–∂, —Ö”©—Ç—á–∏–π–Ω —Ö–∞—è–≥–∏–π–Ω —Ç–∞–ª–±–∞—Ä—Ç –±—É—É–ª–≥–∞–Ω–∞ —É—É:</p>
            <p style="word-break: break-all; background-color: #f8f9fa; padding: 10px; border-radius: 5px; font-family: monospace;">
                {verification_url}
            </p>
        </div>
        
        <div class="footer">
            <p>–≠–Ω—ç –∞–≤—Ç–æ–º–∞—Ç –∏–ª–≥—ç—ç–≥–¥—Å—ç–Ω –∏–º—ç–π–ª —é–º. –•–∞—Ä–∏—É –±–∏—á–∏—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞–≥“Ø–π.</p>
            <p>¬© 2024 ChatBot System. –ë“Ø—Ö —ç—Ä—Ö —Ö—É—É–ª–∏–∞—Ä —Ö–∞–º–≥–∞–∞–ª–∞–≥–¥—Å–∞–Ω.</p>
        </div>
    </div>
</body>
</html>
        """
        
        # Text –∞–≥—É—É–ª–≥–∞ (HTML –¥—ç–º–∂–∏—Ö–≥“Ø–π –∏–º—ç–π–ª –∫–ª–∏–µ–Ω—Ç—ç–¥)
        text_body = f"""
üîê –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç

–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!

–¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥–∏–π–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –¥–æ–æ—Ä—Ö –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É:

{verification_url}

‚è∞ –≠–Ω—ç –ª–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–Ω–æ.

‚ö†Ô∏è –•—ç—Ä—ç–≤ —Ç–∞ –±–∏—à –±–æ–ª —ç–Ω—ç –∏–º—ç–π–ª–∏–π–≥ —É—Å—Ç–≥–∞–Ω–∞ —É—É.

---
–≠–Ω—ç –∞–≤—Ç–æ–º–∞—Ç –∏–ª–≥—ç—ç–≥–¥—Å—ç–Ω –∏–º—ç–π–ª —é–º.
¬© 2024 ChatBot System
        """
        
        # MIME —Ö—ç—Å–≥“Ø“Ø–¥ –Ω—ç–º—ç—Ö
        text_part = MIMEText(text_body, 'plain', 'utf-8')
        html_part = MIMEText(html_body, 'html', 'utf-8')
        
        msg.attach(text_part)
        msg.attach(html_part)
        
        # –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        server.send_message(msg)
        server.quit()
        
        print(f"‚úÖ –ò–º—ç–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç: {email}")
        return True, "–ê–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç"
        
    except smtplib.SMTPAuthenticationError as e:
        error_msg = "SMTP –Ω—ç–≤—Ç—Ä—ç—Ö –∞–ª–¥–∞–∞ - –Ω—ç—Ä –Ω—É—É—Ü “Ø–≥ —à–∞–ª–≥–∞–Ω–∞ —É—É"
        print(f"‚ùå {error_msg}: {e}")
        return False, error_msg
    except smtplib.SMTPRecipientsRefused as e:
        error_msg = "–•“Ø–ª—ç—ç–Ω –∞–≤–∞–≥—á–∏–π–Ω –∏–º—ç–π–ª —Ö–∞—è–≥ –±—É—Ä—É—É"
        print(f"‚ùå {error_msg}: {e}")
        return False, error_msg
    except smtplib.SMTPServerDisconnected as e:
        error_msg = "SMTP —Å–µ—Ä–≤–µ—Ä—Ç—ç–π —Ö–æ–ª–±–æ–ª—Ç —Ç–∞—Å–∞—Ä—Å–∞–Ω"
        print(f"‚ùå {error_msg}: {e}")
        return False, error_msg
    except Exception as e:
        error_msg = f"–ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {str(e)}"
        print(f"‚ùå {error_msg}")
        return False, error_msg

def get_contact(contact_id):
    """Contact –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
    resp = requests.get(url, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def update_contact(contact_id, attrs):
    """Contact-–∏–π–Ω custom attributes —à–∏–Ω—ç—á–ª—ç—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
    payload = {"custom_attributes": attrs}
    resp = requests.put(url, json=payload, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def get_conversation(conv_id):
    """Conversation –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
    resp = requests.get(url, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def update_conversation(conv_id, attrs):
    """Conversation-–∏–π–Ω custom attributes —à–∏–Ω—ç—á–ª—ç—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/custom_attributes"
    payload = {"custom_attributes": attrs}
    resp = requests.post(url, json=payload, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def send_to_chatwoot(conv_id, text):
    """Chatwoot —Ä—É—É –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/messages"
    headers = {"api_access_token": CHATWOOT_API_KEY}
    payload = {"content": text, "message_type": "outgoing"}
    r = requests.post(url, json=payload, headers=headers)
    r.raise_for_status()

def analyze_customer_issue(thread_id, current_message, customer_email=None):
    """AI –∞—à–∏–≥–ª–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±“Ø—Ö —á–∞—Ç —Ç“Ø“Ø—Ö–∏–π–≥ –¥“Ø–≥–Ω—ç–∂, comprehensive –º—ç–¥—ç—ç–ª—ç–ª ”©–≥”©—Ö"""
    try:
        # OpenAI thread-—Å –±“Ø—Ö –º–µ—Å—Å–µ–∂–∏–π–≥ –∞–≤–∞—Ö
        messages = client.beta.threads.messages.list(thread_id=thread_id, limit=50)
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂“Ø“Ø–¥–∏–π–≥ —Ü—É–≥–ª—É—É–ª–∞—Ö
        conversation_history = []
        for msg in reversed(messages.data):  # –≠—Ö–Ω—ç—ç—Å –Ω—å —ç—Ä—ç–º–±—ç–ª—ç—Ö
            if msg.role == "user":
                content = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        content += content_block.text.value
                if content.strip():
                    conversation_history.append(f"–•—ç—Ä—ç–≥–ª—ç–≥—á: {content.strip()}")
            elif msg.role == "assistant":
                content = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        content += content_block.text.value
                if content.strip():
                    conversation_history.append(f"AI: {content.strip()[:200]}...")  # –•—è–∑–≥–∞–∞—Ä–ª–∞—Ö
        
        # –•—ç—Ä—ç–≤ —á–∞—Ç —Ç“Ø“Ø—Ö —Ö–æ–æ—Å–æ–Ω –±–æ–ª –∑”©–≤—Ö”©–Ω –æ–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂—ç—ç—Ä –¥“Ø–≥–Ω—ç—Ö
        if not conversation_history:
            conversation_history = [f"–•—ç—Ä—ç–≥–ª—ç–≥—á: {current_message}"]
        
        # Conversation —Ç“Ø“Ø—Ö–∏–π–≥ string –±–æ–ª–≥–æ—Ö
        chat_history = "\n".join(conversation_history[-10:])  # –°“Ø“Ø–ª–∏–π–Ω 10 –º–µ—Å—Å–µ–∂
        
        # –ò–ª“Ø“Ø —Ç–æ–¥–æ—Ä—Ö–æ–π system prompt
        system_msg = (
            "–¢–∞ –±–æ–ª –¥—ç–º–∂–ª—ç–≥–∏–π–Ω –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω. "
            "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±“Ø—Ö —á–∞—Ç —Ç“Ø“Ø—Ö–∏–π–≥ —Ö–∞—Ä–∂, –∞—Å—É—É–¥–ª—ã–≥ –∏–∂ –±“Ø—Ä—ç–Ω –¥“Ø–≥–Ω—ç–∂ ”©–≥–Ω”© “Ø“Ø. "
            "–•—ç—Ä—ç–≤ –æ–ª–æ–Ω –∞—Å—É—É–¥–∞–ª –±–∞–π–≤–∞–ª –≥–æ–ª –∞—Å—É—É–¥–ª—ã–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–∂ —Ñ–æ–∫—É—Å–ª–∞–Ω–∞ —É—É."
        )

        # Comprehensive user prompt
        user_msg = f'''
–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —á–∞—Ç —Ç“Ø“Ø—Ö:
{chat_history}

–û–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂: "{current_message}"

–î–∞—Ä–∞–∞—Ö —Ñ–æ—Ä–º–∞—Ç–∞–∞—Ä –±“Ø—Ö —á–∞—Ç —Ç“Ø“Ø—Ö—ç–¥ —Ç—É–ª–≥—É—É—Ä–ª–∞–Ω –¥“Ø–≥–Ω—ç–ª—Ç ”©–≥–Ω”© “Ø“Ø:

–ê–°–£–£–î–õ–´–ù –¢”®–†”®–õ: [–¢–µ—Ö–Ω–∏–∫–∏–π–Ω/–•—É–¥–∞–ª–¥–∞–∞–Ω—ã/–ú—ç–¥—ç—ç–ª–ª–∏–π–Ω/–ì–æ–º–¥–æ–ª]
–Ø–ê–†–ê–õ–¢–ê–ô –ë–ê–ô–î–ê–õ: [”®–Ω–¥”©—Ä/–î—É–Ω–¥/–ë–∞–≥–∞] 
–ê–°–£–£–î–õ–´–ù –¢–û–í–ß –¢–ê–ô–õ–ë–ê–†: [–ì–æ–ª –∞—Å—É—É–¥–ª—ã–≥ 1-2 ”©–≥“Ø“Ø–ª–±—ç—Ä—ç—ç—Ä]
–ß–ê–¢–´–ù –•–≠–í –ú–ê–Ø–ì: [–ê–Ω—Ö–Ω—ã –∞—Å—É—É–ª—Ç/–î–∞–≥–∞–ª–¥–∞—Ö –∞—Å—É—É–ª—Ç/–ì–æ–º–¥–æ–ª/–¢–æ–¥—Ä—É—É–ª–≥–∞ —Ö“Ø—Å—ç—Ö]
–®–ê–ê–†–î–õ–ê–ì–ê–¢–ê–ô –ê–†–ì–ê –•–≠–ú–ñ–≠–≠: [–¢–æ–¥–æ—Ä—Ö–æ–π –∞—Ä–≥–∞ —Ö—ç–º–∂—ç—ç]
–•“Æ–õ–≠–≠–ì–î–≠–ñ –ë–£–ô –•–ê–†–ò–£–õ–¢: [–•—ç—Ä—ç–≥–ª—ç–≥—á —è–º–∞—Ä —Ö–∞—Ä–∏—É–ª—Ç —Ö“Ø–ª—ç—ç–∂ –±–∞–π–≥–∞–∞]
–î“Æ–ì–ù–≠–õ–¢: [–ï—Ä”©–Ω—Ö–∏–π “Ø–Ω—ç–ª–≥—ç—ç –±–∞ –∑”©–≤–ª”©–º–∂]
'''

        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
            max_tokens=500,
            temperature=0.2
        )

        return response.choices[0].message.content.strip()

    except Exception as e:
        print(f"‚ùå –ê—Å—É—É–¥–∞–ª –¥“Ø–≥–Ω—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return f"–ê—Å—É—É–¥–∞–ª –¥“Ø–≥–Ω—ç—Ö –±–æ–ª–æ–º–∂–≥“Ø–π. –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –æ–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂: {current_message}"

def send_teams_notification(conv_id, customer_message, customer_email=None, escalation_reason="–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–∞–ª", ai_analysis=None):
    """Microsoft Teams —Ä—É—É —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω —Ç–∞–ª–∞–∞—Ä –∞–∂–∏–ª—Ç–∞–Ω–¥ –º—ç–¥—ç—ç–ª—ç—Ö"""
    if not TEAMS_WEBHOOK_URL:
        print("‚ö†Ô∏è Teams webhook URL —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞")
        return False
    
    try:
        # Chatwoot conversation URL
        conv_url = f"{CHATWOOT_BASE_URL}/app/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
        
        # AI –∞—Å—É—É–¥–ª—ã–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª –±—ç–ª—Ç–≥—ç—Ö
        error_summary = escalation_reason
        if ai_analysis:
            error_summary += f"\n\n–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –∞–Ω–∞–ª–∏–∑: {ai_analysis}"
        
        # Teams message format
        teams_message = {
            "type": "message",
            "attachments": [{
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                    "type": "AdaptiveCard",
                    "version": "1.3",
                    "body": [
                        {
                            "type": "TextBlock",
                            "text": "üìã –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç",
                            "weight": "Bolder",
                            "size": "Medium",
                            "color": "Attention"
                        },
                        {
                            "type": "TextBlock",
                            "text": "AI —Å–∏—Å—Ç–µ–º —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂, –∞–∂–∏–ª—Ç–Ω—ã –∞–Ω—Ö–∞–∞—Ä–∞–ª —Ç–∞—Ç–∞—Ö—É–π—Ü –∞—Å—É—É–¥–∞–ª –≥—ç–∂ “Ø–∑—ç–∂ –±–∞–π–Ω–∞.",
                            "wrap": True,
                            "color": "Default"
                        },
                        {
                            "type": "FactSet",
                            "facts": [
                                {
                                    "title": "–•–∞—Ä–∏–ª—Ü–∞–≥—á:",
                                    "value": customer_email or "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π"
                                },
                                {
                                    "title": "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂:",
                                    "value": customer_message[:300] + ("..." if len(customer_message) > 300 else "")
                                },
                                {
                                    "title": "–•—É–≥–∞—Ü–∞–∞:",
                                    "value": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                                }
                            ]
                        }
                    ]
                }
            }]
        }
        
        # AI –¥“Ø–≥–Ω—ç–ª—Ç –Ω—ç–º—ç—Ö
        if ai_analysis:
            teams_message["attachments"][0]["content"]["body"].append({
                "type": "TextBlock",
                "text": "ü§ñ AI –î“Ø–≥–Ω—ç–ª—Ç:",
                "weight": "Bolder",
                "size": "Medium",
                "spacing": "Large"
            })
            teams_message["attachments"][0]["content"]["body"].append({
                "type": "TextBlock",
                "text": ai_analysis,
                "wrap": True,
                "fontType": "Monospace",
                "color": "Good"
            })
        
        # Actions –Ω—ç–º—ç—Ö
        teams_message["attachments"][0]["content"]["actions"] = [
            {
                "type": "Action.OpenUrl",
                "title": "Chatwoot –¥—ç—ç—Ä —Ö–∞—Ä–∞—Ö",
                "url": conv_url
            }
        ]
        
        response = requests.post(TEAMS_WEBHOOK_URL, json=teams_message)
        response.raise_for_status()
        print(f"‚úÖ Teams —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç–ª—ç—ç: {escalation_reason}")
        return True
        
    except Exception as e:
        print(f"‚ùå Teams –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False

def get_ai_response(thread_id, message_content, conv_id=None, customer_email=None, retry_count=0):
    """OpenAI Assistant-—ç—ç—Å —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö"""
    try:
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂–∏–π–≥ thread —Ä—É—É –Ω—ç–º—ç—Ö
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=message_content
        )

        # Assistant run “Ø“Ø—Å–≥—ç—Ö
        run = client.beta.threads.runs.create(
            thread_id=thread_id, 
            assistant_id=ASSISTANT_ID
        )

        # Run –¥—É—É—Å–∞—Ö—ã–≥ —Ö“Ø–ª—ç—ç—Ö
        max_wait = 30
        wait_count = 0
        while wait_count < max_wait:
            run_status = client.beta.threads.runs.retrieve(
                thread_id=thread_id, 
                run_id=run.id
            )
            
            if run_status.status == "completed":
                break
            elif run_status.status in ["failed", "cancelled", "expired"]:
                error_msg = "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
                
                # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
                if retry_count == 0 and conv_id:
                    send_teams_notification(
                        conv_id, 
                        message_content, 
                        customer_email, 
                        f"AI run —Å—Ç–∞—Ç—É—Å –∞–ª–¥–∞–∞: {run_status.status}",
                        f"OpenAI run ID: {run.id}, Status: {run_status.status}"
                    )
                
                return error_msg
                
            time.sleep(1)
            wait_count += 1

        if wait_count >= max_wait:
            timeout_msg = "–•–∞—Ä–∏—É–ª–∞—Ö–∞–¥ —Ö—ç—Ç —É–¥–∞–∂ –±–∞–π–Ω–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
            
            # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω timeout –±–æ–ª)
            if retry_count == 0 and conv_id:
                send_teams_notification(
                    conv_id, 
                    message_content, 
                    customer_email, 
                    "AI —Ö–∞—Ä–∏—É–ª—Ç timeout (30 —Å–µ–∫—É–Ω–¥)",
                    f"OpenAI run ID: {run.id}, Thread ID: {thread_id}"
                )
            
            return timeout_msg

        # Assistant-–∏–π–Ω —Ö–∞—Ä–∏—É–ª—å—Ç—ã–≥ –∞–≤–∞—Ö
        messages = client.beta.threads.messages.list(thread_id=thread_id)
        
        for msg in messages.data:
            if msg.role == "assistant":
                reply = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        reply += content_block.text.value
                return reply

        # –•–∞—Ä–∏—É–ª—Ç –æ–ª–¥–æ—Ö–≥“Ø–π
        no_response_msg = "–•–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
        
        # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
        if retry_count == 0 and conv_id:
            send_teams_notification(
                conv_id, 
                message_content, 
                customer_email, 
                "AI —Ö–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π",
                f"Thread ID: {thread_id}, Messages —Ö–∞–π–ª—Ç–∞–¥ —Ö–∞—Ä–∏—É–ª—Ç –±–∞–π—Ö–≥“Ø–π"
            )
        
        return no_response_msg
        
    except Exception as e:
        print(f"AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
        error_msg = "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
        
        # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
        if retry_count == 0 and conv_id:
            send_teams_notification(
                conv_id, 
                message_content, 
                customer_email, 
                "AI —Å–∏—Å—Ç–µ–º–∏–π–Ω –∞–ª–¥–∞–∞ (Exception)",
                f"Python exception: {str(e)}, Thread ID: {thread_id}"
            )
        
        return error_msg

@app.route("/verify", methods=["GET"])
def verify_email():
    """–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö endpoint - –∏–ª“Ø“Ø —Å–∞–π–∂—Ä—É—É–ª—Å–∞–Ω"""
    token = request.args.get('token')
    if not token:
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–ê–ª–¥–∞–∞</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background-color: #f5f5f5; }
                .error { color: #d32f2f; font-size: 24px; margin: 20px 0; }
                .info { color: #666; font-size: 16px; }
                .container { max-width: 500px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="error">‚ùå –¢–æ–∫–µ–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π!</div>
                <div class="info">–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –ª–∏–Ω–∫ –±—É—Ä—É—É –±–∞–π–Ω–∞.</div>
            </div>
        </body>
        </html>
        """), 400
    
    payload = verify_token(token)
    if not payload:
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–¢–æ–∫–µ–Ω —Ö“Ø—á–∏–Ω–≥“Ø–π</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background-color: #f5f5f5; }
                .error { color: #d32f2f; font-size: 24px; margin: 20px 0; }
                .info { color: #666; font-size: 16px; }
                .container { max-width: 500px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="error">‚è∞ –¢–æ–∫–µ–Ω —Ö“Ø—á–∏–Ω–≥“Ø–π!</div>
                <div class="info">–¢–æ–∫–µ–Ω–∏–π —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω —ç—Å–≤—ç–ª –±—É—Ä—É—É –±–∞–π–Ω–∞.<br>–®–∏–Ω—ç –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –ª–∏–Ω–∫ —Ö“Ø—Å—ç—ç–¥ –∏–º—ç–π–ª—ç—ç –¥–∞—Ö–∏–Ω –±–∏—á–Ω—ç “Ø“Ø.</div>
            </div>
        </body>
        </html>
        """), 400
    
    try:
        # Contact level –¥—ç—ç—Ä email_verified = true –≥—ç–∂ —Ç—ç–º–¥—ç–≥–ª—ç—Ö
        conv_id = payload['conv_id']
        contact_id = payload['contact_id']
        email = payload['email']
        
        print(f"‚úÖ –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç: {email} (Contact: {contact_id}, Conv: {conv_id})")
        
        # Contact –¥—ç—ç—Ä –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞–¥–≥–∞–ª–∞—Ö
        verification_data = {
            "email_verified": "1",  # Checkbox type-–¥ string "1" –∞—à–∏–≥–ª–∞—Ö
            "verified_email": email,
            "verification_date": datetime.utcnow().isoformat(),
            "verification_method": "email_link"
        }
        
        update_contact(contact_id, verification_data)
        print(f"‚úÖ Contact {contact_id} —à–∏–Ω—ç—á–ª—ç–ª—ç—ç")
        
        # Conversation –¥—ç—ç—Ä thread –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞–¥–≥–∞–ª–∞—Ö (thread –Ω—å conversation specific)
        thread_key = f"openai_thread_{contact_id}"
        update_conversation(conv_id, {
            thread_key: None,  # –®–∏–Ω—ç thread —ç—Ö–ª“Ø“Ø–ª—ç—Ö
            "last_verification": datetime.utcnow().isoformat()
        })
        print(f"‚úÖ Conversation {conv_id} —à–∏–Ω—ç—á–ª—ç–ª—ç—ç")
        
        # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö
        success_message = (
            f"üéâ –ë–∞—è—Ä–ª–∞–ª–∞–∞! –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({email}) –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞!\n\n"
            "‚úÖ –û–¥–æ–æ —Ç–∞ chatbot-—Ç–æ–π –±“Ø—Ä—ç–Ω —Ö–∞—Ä–∏–ª—Ü–∞–∂ –±–æ–ª–Ω–æ.\n"
            "üí¨ –ê—Å—É—É–ª—Ç, —Ö“Ø—Å—ç–ª—Ç—ç—ç –±–∏—á—ç—ç–¥ –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø."
        )
        send_to_chatwoot(conv_id, success_message)
        print(f"‚úÖ Chatwoot-–¥ –∞–º–∂–∏–ª—Ç—ã–Ω –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç–ª—ç—ç")
        
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–ê–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
                body { 
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                    margin: 0; 
                    padding: 0; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                .container { 
                    max-width: 500px; 
                    background: white; 
                    padding: 40px; 
                    border-radius: 15px; 
                    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                    text-align: center;
                }
                .success { 
                    color: #4caf50; 
                    font-size: 28px; 
                    margin: 20px 0; 
                    font-weight: bold;
                }
                .info { 
                    color: #333; 
                    font-size: 16px; 
                    line-height: 1.6;
                    margin: 20px 0;
                }
                .email { 
                    background-color: #e8f5e8; 
                    color: #2e7d32; 
                    padding: 10px; 
                    border-radius: 8px; 
                    font-weight: bold;
                    margin: 15px 0;
                }
                .next-steps {
                    background-color: #f0f7ff;
                    border-left: 4px solid #2196f3;
                    padding: 15px;
                    margin: 20px 0;
                    text-align: left;
                }
                .footer {
                    margin-top: 30px;
                    padding-top: 20px;
                    border-top: 1px solid #eee;
                    color: #666;
                    font-size: 14px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="success">üéâ –ê–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞!</div>
                <div class="info">
                    –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞:
                    <div class="email">{{ email }}</div>
                </div>
                
                <div class="next-steps">
                    <strong>üì± –î–∞—Ä–∞–∞–≥–∏–π–Ω –∞–ª—Ö–∞–º:</strong>
                    <ul>
                        <li>–ß–∞—Ç —Ü–æ–Ω—Ö —Ä—É—É –±—É—Ü–∞–∂ –æ—á–Ω–æ —É—É</li>
                        <li>–ê—Å—É—É–ª—Ç, —Ö“Ø—Å—ç–ª—Ç—ç—ç –±–∏—á—ç—ç–¥ –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø</li>
                        <li>Chatbot —Ç–∞–Ω—ã–≥ —Ç–∞–Ω–∏–Ω –º—ç–¥—ç–∂, —Ç—É—Å–∞–ª–∂ —ç—Ö—ç–ª–Ω—ç</li>
                    </ul>
                </div>
                
                <div class="footer">
                    <p>‚úÖ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç: {{ verification_time }}</p>
                    <p>ü§ñ ChatBot System</p>
                </div>
            </div>
        </body>
        </html>
        """, email=email, verification_time=datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        
    except Exception as e:
        print(f"‚ùå Verification –∞–ª–¥–∞–∞: {e}")
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background-color: #f5f5f5; }
                .error { color: #d32f2f; font-size: 24px; margin: 20px 0; }
                .info { color: #666; font-size: 16px; }
                .container { max-width: 500px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="error">‚ùå –ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞!</div>
                <div class="info">–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö–∞–¥ —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.<br>–î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.</div>
            </div>
        </body>
        </html>
        """), 500

@app.route("/webhook", methods=["POST"])
def webhook():
    """Chatwoot webhook handler - –±“Ø—Ä—ç–Ω —à–∏–Ω—ç –ª–æ–≥–∏–∫"""
    try:
        data = request.json
        print(f"üîÑ Webhook received: {data.get('message_type', 'unknown')}")
        
        # –ó”©–≤—Ö”©–Ω incoming –º–µ—Å—Å–µ–∂ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö
        if data.get("message_type") != "incoming":
            print("‚è≠Ô∏è Skipping: not incoming message")
            return jsonify({"status": "skipped - not incoming"}), 200

        # “Æ–Ω–¥—Å—ç–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
        conv_id = data["conversation"]["id"]
        message_content = data.get("content", "").strip()
        
        print(f"üìù Conv ID: {conv_id}, Message: '{message_content}'")
        
        # Contact ID –æ–ª–æ—Ö
        contact_id = None
        if "sender" in data and data["sender"]:
            contact_id = data["sender"].get("id")
        
        if not contact_id:
            print("‚ùå Contact ID –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            send_to_chatwoot(conv_id, "–ê–ª–¥–∞–∞: –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
            return jsonify({"status": "error - no contact"}), 400

        print(f"üë§ Contact ID: {contact_id}")

        # ========== –ë–ê–¢–ê–õ–ì–ê–ê–ñ–£–£–õ–ê–õ–¢ –®–ê–õ–ì–ê–• ==========
        print("üîç –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
        
        # Contact-–∏–π–Ω custom attributes –∞–≤–∞—Ö (webhook-—ç—ç—Å —à—É—É–¥)
        is_verified = False
        verified_email = ""
        
        # Webhook –¥–æ—Ç–æ—Ä contact –º—ç–¥—ç—ç–ª—ç–ª –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        if "conversation" in data and "meta" in data["conversation"] and "sender" in data["conversation"]["meta"]:
            sender_meta = data["conversation"]["meta"]["sender"]
            if "custom_attributes" in sender_meta:
                contact_attrs = sender_meta["custom_attributes"]
                email_verified_value = contact_attrs.get("email_verified", "")
                verified_email = contact_attrs.get("verified_email", "")
                
                # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç —à–∞–ª–≥–∞—Ö
                is_verified = str(email_verified_value).lower() in ["true", "1", "yes"]
                
                print(f"üìä Webhook-—ç—ç—Å –∞–≤—Å–∞–Ω: email_verified='{email_verified_value}', verified_email='{verified_email}'")
                print(f"‚úÖ Is verified: {is_verified}")
        
        # –•—ç—Ä—ç–≤ webhook –¥—ç—ç—Ä –±–∞–π—Ö–≥“Ø–π –±–æ–ª API-–∞–∞—Ä –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞—Ö
        if not is_verified:
            print("üîç API-–∞–∞—Ä –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
            try:
                contact = get_contact(contact_id)
                contact_attrs = contact.get("custom_attributes", {})
                email_verified_value = contact_attrs.get("email_verified", "")
                verified_email = contact_attrs.get("verified_email", "")
                
                is_verified = str(email_verified_value).lower() in ["true", "1", "yes"]
                print(f"üìä API-–∞–∞—Å –∞–≤—Å–∞–Ω: email_verified='{email_verified_value}', verified_email='{verified_email}'")
                print(f"‚úÖ Is verified: {is_verified}")
            except Exception as e:
                print(f"‚ùå API –∞–ª–¥–∞–∞: {e}")
                is_verified = False

        # ========== –ë–ê–¢–ê–õ–ì–ê–ê–ñ–£–£–õ–ê–õ–¢–´–ù “Æ–ô–õ–î–≠–õ ==========
        if not is_verified:
            print("üö´ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–∞–≥“Ø–π - –∏–º—ç–π–ª —à–∞–∞—Ä–¥–∞–∂ –±–∞–π–Ω–∞")
            
            # –ò–º—ç–π–ª —Ö–∞—è–≥ —à–∞–ª–≥–∞—Ö
            if is_valid_email(message_content):
                print(f"üìß –ó”©–≤ –∏–º—ç–π–ª: {message_content}")
                
                # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö
                token = generate_verification_token(message_content, conv_id, contact_id)
                
                # –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö
                if send_verification_email(message_content, token):
                    send_to_chatwoot(conv_id, 
                        f"üìß –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({message_content}) —Ä“Ø“Ø –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –ª–∏–Ω–∫ –∏–ª–≥—ç—ç–ª—ç—ç.\n\n"
                        "–ò–º—ç–π–ª—ç—ç —à–∞–ª–≥–∞–∞–¥ –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É. –õ–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–Ω–æ.\n\n"
                        "‚ö†Ô∏è Spam —Ñ–æ–ª–¥–µ—Ä—ã–≥ —à–∞–ª–≥–∞—Ö–∞–∞ –º–∞—Ä—Ç—É—É–∑–∞–π!")
                    print("‚úÖ –ò–º—ç–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç")
                else:
                    send_to_chatwoot(conv_id, "‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.")
                    print("‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞")
            else:
                print(f"‚ùå –ë—É—Ä—É—É –∏–º—ç–π–ª —Ñ–æ—Ä–º–∞—Ç: '{message_content}'")
                send_to_chatwoot(conv_id, 
                    "üëã –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! Chatbot –∞—à–∏–≥–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ —ç—Ö–ª—ç—ç–¥ –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É.\n\n"
                    "üìß –ó”©–≤ –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∏—á—ç—ç–¥ –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø.\n"
                    "–ñ–∏—à—ç—ç: example@gmail.com")
            
            return jsonify({"status": "waiting_verification"}), 200

        # ========== AI CHATBOT –ê–ñ–ò–õ–õ–£–£–õ–ê–• ==========
        print(f"ü§ñ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á ({verified_email}) - AI chatbot –∞–∂–∏–ª–ª—É—É–ª–∂ –±–∞–π–Ω–∞")
        
        # Thread –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
        conv = get_conversation(conv_id)
        conv_attrs = conv.get("custom_attributes", {})
        
        thread_key = f"openai_thread_{contact_id}"
        thread_id = conv_attrs.get(thread_key)
        
        # Thread —à–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        if not thread_id:
            print("üßµ –®–∏–Ω—ç thread “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")
            thread = client.beta.threads.create()
            thread_id = thread.id
            update_conversation(conv_id, {thread_key: thread_id})
            print(f"‚úÖ Thread “Ø“Ø—Å–≥—ç–ª—ç—ç: {thread_id}")
        else:
            print(f"‚úÖ –û–¥–æ–æ –±–∞–π–≥–∞–∞ thread –∞—à–∏–≥–ª–∞–∂ –±–∞–π–Ω–∞: {thread_id}")

        # AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö (retry logic-—Ç–æ–π)
        print("ü§ñ AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤—á –±–∞–π–Ω–∞...")
        
        retry_count = 0
        ai_response = None
        
        while retry_count <= MAX_AI_RETRIES:
            ai_response = get_ai_response(thread_id, message_content, conv_id, verified_email, retry_count)
            
            # –•—ç—Ä—ç–≤ –∞–ª–¥–∞–∞—Ç–∞–π —Ö–∞—Ä–∏—É–ª—Ç –±–∏—à –±–æ–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π
            if not any(error_phrase in ai_response for error_phrase in [
                "–∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", "—Ö—ç—Ç —É–¥–∞–∂ –±–∞–π–Ω–∞", "–æ–ª–¥—Å–æ–Ω–≥“Ø–π"
            ]):
                break
                
            retry_count += 1
            if retry_count <= MAX_AI_RETRIES:
                print(f"üîÑ AI –¥–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–∂ –±–∞–π–Ω–∞... ({retry_count}/{MAX_AI_RETRIES})")
                time.sleep(2)  # 2 —Å–µ–∫—É–Ω–¥ —Ö“Ø–ª—ç—ç—Ö
        
        # –•—ç—Ä—ç–≤ –±“Ø—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ –±“Ø—Ç—ç–ª–≥“Ø–π—Ç–≤—ç–ª –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞—Ö
        if retry_count > MAX_AI_RETRIES:
            print("‚ùå AI-–∏–π–Ω –±“Ø—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ –±“Ø—Ç—ç–ª–≥“Ø–π—Ç—ç–≤ - –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∂ –±–∞–π–Ω–∞")
            
            send_teams_notification(
                conv_id, 
                message_content, 
                verified_email, 
                f"AI {MAX_AI_RETRIES + 1} —É–¥–∞–∞ –¥–∞—Ä–∞–∞–ª–∞–Ω –∞–ª–¥–∞–∞ –≥–∞—Ä–≥–∞–ª–∞–∞",
                f"Thread ID: {thread_id}, –ë“Ø—Ö retry –æ—Ä–æ–ª–¥–ª–æ–≥–æ –±“Ø—Ç—ç–ª–≥“Ø–π—Ç—ç–≤"
            )
            
            ai_response = (
                "üö® –£—É—á–ª–∞–∞—Ä–∞–π, —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞—Å—É—É–¥–∞–ª –≥–∞—Ä–ª–∞–∞.\n\n"
                "–ë–∏ —Ç–∞–Ω—ã –∞—Å—É—É–ª—Ç—ã–≥ —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –±–∞–≥—Ç –¥–∞–º–∂—É—É–ª–∞–∞. –£–¥–∞—Ö–≥“Ø–π –∞—Å—É—É–¥–ª—ã–≥ —à–∏–π–¥—ç–∂, —Ç–∞–Ω–¥ —Ö–∞—Ä–∏—É–ª—Ç ”©–≥”©—Ö –±–æ–ª–Ω–æ.\n\n"
                "üïê –¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø..."
            )
        
        # Chatwoot —Ä—É—É –∏–ª–≥—ç—ç—Ö
        send_to_chatwoot(conv_id, ai_response)
        print(f"‚úÖ AI —Ö–∞—Ä–∏—É–ª—Ç –∏–ª–≥—ç—ç–ª—ç—ç: {ai_response[:50]}...")
        
        # AI –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞—Ä–∏—É–ª—Ç ”©–≥—Å–Ω–∏–π –¥–∞—Ä–∞–∞ –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂ Teams-—ç—ç—Ä –º—ç–¥—ç—ç–ª—ç—Ö
        if retry_count <= MAX_AI_RETRIES:  # –ó”©–≤—Ö”©–Ω –∞–º–∂–∏–ª—Ç—Ç–∞–π AI —Ö–∞—Ä–∏—É–ª—Ç “Ø–µ–¥
            print("üîç Teams-–¥ –∏–ª–≥—ç—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
            
            # –®–∏–Ω—ç –∞—Å—É—É–¥–∞–ª –º”©–Ω —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
            should_escalate, reason = should_escalate_to_teams(thread_id, message_content)
            
            if should_escalate:
                print(f"‚úÖ {reason} - Teams-–¥ –∏–ª–≥—ç—ç—Ö")
                try:
                    # AI-—ç—ç—Ä –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç—Ö
                    analysis = analyze_customer_issue(thread_id, message_content, verified_email)
                    print(f"‚úÖ –î“Ø–≥–Ω—ç–ª—Ç –±—ç–ª—ç–Ω: {analysis[:100]}...")
                    
                    # Teams-—ç—ç—Ä –º—ç–¥—ç—ç–ª—ç—Ö
                    send_teams_notification(
                        conv_id,
                        message_content,
                        verified_email,
                        f"–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç - {reason}",
                        analysis
                    )
                    print("‚úÖ –ê—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç –∞–∂–∏–ª—Ç–∞–Ω–¥ –∏–ª–≥—ç—ç–ª—ç—ç")
                    
                except Exception as e:
                    print(f"‚ùå –ê—Å—É—É–¥–∞–ª –¥“Ø–≥–Ω—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
            else:
                print(f"‚è≠Ô∏è {reason} - Teams-–¥ –∏–ª–≥—ç—ç—Ö–≥“Ø–π")
        
        return jsonify({"status": "success"}), 200

    except Exception as e:
        print(f"üí• Webhook –∞–ª–¥–∞–∞: {e}")
        return jsonify({"status": f"error: {str(e)}"}), 500

@app.route("/test-teams", methods=["GET"])
def test_teams():
    """Teams webhook —Ç–µ—Å—Ç —Ö–∏–π—Ö"""
    if not TEAMS_WEBHOOK_URL:
        return jsonify({"error": "TEAMS_WEBHOOK_URL —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞"}), 400
    
    try:
        # –¢–µ—Å—Ç –¥“Ø–≥–Ω—ç–ª—Ç “Ø“Ø—Å–≥—ç—Ö
        test_analysis = """–ê–°–£–£–î–õ–´–ù –¢”®–†”®–õ: Teams –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π–Ω —Ç–µ—Å—Ç
–Ø–ê–†–ê–õ–¢–ê–ô –ë–ê–ô–î–ê–õ: –ë–∞–≥–∞
–ê–°–£–£–î–õ–´–ù –¢–û–í–ß –¢–ê–ô–õ–ë–ê–†: –°–∏—Å—Ç–µ–º –∑”©–≤”©”©—Ä –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö –∑–æ—Ä–∏–ª–≥–æ—Ç–æ–π —Ç–µ—Å—Ç –º—ç–¥—ç—ç–ª—ç–ª.
–®–ê–ê–†–î–õ–ê–ì–ê–¢–ê–ô –ê–†–ì–ê –•–≠–ú–ñ–≠–≠: Teams –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞–∂–∏–ª—Ç–∞–Ω —Ö–∞—Ä–∂, —Å–∏—Å—Ç–µ–º—Ç—ç–π —Ç–∞–Ω–∏–ª—Ü–∞—Ö
–•“Æ–õ–≠–≠–ì–î–≠–ñ –ë–£–ô –•–ê–†–ò–£–õ–¢: "–¢–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π" –≥—ç—Å—ç–Ω –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç"""
        
        # –¢–µ—Å—Ç –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö
        success = send_teams_notification(
            conv_id="test_123",
            customer_message="–≠–Ω—ç —Ç–µ—Å—Ç –º—ç–¥—ç—ç–ª—ç–ª —é–º. Teams —Ö–æ–ª–±–æ–ª—Ç –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞.",
            customer_email="test@example.com",
            escalation_reason="Teams webhook —Ç–µ—Å—Ç",
            ai_analysis=test_analysis
        )
        
        if success:
            return jsonify({"status": "success", "message": "Teams –º—ç–¥—ç—ç–ª—ç–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç!"}), 200
        else:
            return jsonify({"error": "Teams –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞"}), 500
            
    except Exception as e:
        return jsonify({"error": f"–ê–ª–¥–∞–∞: {str(e)}"}), 500

def escalate_to_human(conv_id, customer_message, customer_email=None):
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ AI-—ç—ç—Ä –¥“Ø–≥–Ω—ç–∂ Teams-—ç—ç—Ä –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞—Ö (–∞—à–∏–≥–ª–∞–≥–¥–¥–∞–≥–≥“Ø–π)"""
    try:
        print("üîç –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂ –±–∞–π–Ω–∞...")
        
        # –≠–Ω—ç —Ñ—É–Ω–∫—Ü –∞—à–∏–≥–ª–∞–≥–¥–¥–∞–≥–≥“Ø–π —É—á–∏—Ä –ø—Ä–æ—Å—Ç–æ–π –¥“Ø–≥–Ω—ç–ª—Ç —Ö–∏–π—Ö
        simple_analysis = f"""–ê–°–£–£–î–õ–´–ù –¢”®–†”®–õ: –¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π
–Ø–ê–†–ê–õ–¢–ê–ô –ë–ê–ô–î–ê–õ: –î—É–Ω–¥
–ê–°–£–£–î–õ–´–ù –¢–û–í–ß –¢–ê–ô–õ–ë–ê–†: {customer_message}
–®–ê–ê–†–î–õ–ê–ì–ê–¢–ê–ô –ê–†–ì–ê –•–≠–ú–ñ–≠–≠: –ê–∂–∏–ª—Ç–Ω—ã –∞–Ω—Ö–∞–∞—Ä–∞–ª —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π
–•“Æ–õ–≠–≠–ì–î–≠–ñ –ë–£–ô –•–ê–†–ò–£–õ–¢: –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ —à–∏–π–¥—ç—Ö"""
        
        print(f"‚úÖ –≠–Ω–≥–∏–π–Ω –¥“Ø–≥–Ω—ç–ª—Ç –±—ç–ª—ç–Ω: {simple_analysis[:100]}...")
        
        # Teams-—ç—ç—Ä –º—ç–¥—ç—ç–ª—ç—Ö
        success = send_teams_notification(
            conv_id,
            customer_message,
            customer_email,
            "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç",
            simple_analysis
        )
        
        if success:
            print("‚úÖ –ê—Å—É—É–¥–ª—ã–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞–≤")
            return "üëã –ë–∏ —Ç–∞–Ω—ã –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂, –∞–∂–∏–ª—Ç–∞–Ω–¥ –¥–∞–º–∂—É—É–ª–∞–∞. –£–¥–∞—Ö–≥“Ø–π –∞–∂–∏–ª—Ç–∞–Ω —Ç–∞–Ω—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ–Ω–æ.\n\nüïê –¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø..."
        else:
            print("‚ùå Teams –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞")
            return "–£—É—á–ª–∞–∞—Ä–∞–π, —Ç–∞–Ω—ã –∞—Å—É—É–¥–ª—ã–≥ –∞–∂–∏–ª—Ç–∞–Ω–¥ –¥–∞–º–∂—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
            
    except Exception as e:
        print(f"‚ùå Escalation –∞–ª–¥–∞–∞: {e}")
        return "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."

def should_escalate_to_teams(thread_id, current_message):
    """–¢—É—Ö–∞–π–Ω –∞—Å—É—É–¥–ª—ã–≥ Teams-–¥ –∏–ª–≥—ç—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∏–π–¥—ç—Ö"""
    try:
        # OpenAI thread-—Å —Å“Ø“Ø–ª–∏–π–Ω 20 –º–µ—Å—Å–µ–∂–∏–π–≥ –∞–≤–∞—Ö
        messages = client.beta.threads.messages.list(thread_id=thread_id, limit=20)
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂“Ø“Ø–¥–∏–π–≥ —Ü—É–≥–ª—É—É–ª–∞—Ö
        user_messages = []
        for msg in reversed(messages.data):
            if msg.role == "user":
                content = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        content += content_block.text.value
                if content.strip():
                    user_messages.append(content.strip())
        
        # –•—ç—Ä—ç–≤ –∞–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂ –±–æ–ª Teams-–¥ –∏–ª–≥—ç—ç—Ö
        if len(user_messages) <= 1:
            return True, "–ê–Ω—Ö–Ω—ã –∞—Å—É—É–ª—Ç"
        
        # AI-–∞–∞—Ä —à–∏–Ω—ç –∞—Å—É—É–¥–∞–ª –º”©–Ω —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        system_msg = (
            "–¢–∞ –±–æ–ª —á–∞—Ç –¥“Ø–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç–Ω–∏–π –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω. "
            "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Å“Ø“Ø–ª–∏–π–Ω –º–µ—Å—Å–µ–∂ –Ω—å —à–∏–Ω—ç –∞—Å—É—É–¥–∞–ª –º”©–Ω —ç—Å—ç—Ö–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–Ω–æ —É—É."
        )
        
        user_msg = f'''
–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω ”©–º–Ω”©—Ö –º–µ—Å—Å–µ–∂“Ø“Ø–¥:
{chr(10).join(user_messages[:-1])}

–û–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂: "{current_message}"

–î–∞—Ä–∞–∞—Ö –∞–ª—å –Ω—ç–≥—ç—ç—Ä —Ö–∞—Ä–∏—É–ª–Ω–∞ —É—É:
- "–®–ò–ù_–ê–°–£–£–î–ê–õ" - —Ö—ç—Ä—ç–≤ –æ–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂ —à–∏–Ω—ç —Ç”©—Ä–ª–∏–π–Ω –∞—Å—É—É–¥–∞–ª –±–æ–ª
- "“Æ–†–ì–≠–õ–ñ–õ–≠–õ" - —Ö—ç—Ä—ç–≤ ”©–º–Ω”©—Ö –∞—Å—É—É–¥–ª—ã–Ω “Ø—Ä–≥—ç–ª–∂–ª—ç–ª, —Ç–æ–¥—Ä—É—É–ª–≥–∞ –±–æ–ª
- "–î–ê–•–ò–ù_–ê–°–£–£–õ–¢" - —Ö—ç—Ä—ç–≤ –∏–∂–∏–ª –∞—Å—É—É–¥–ª—ã–≥ –¥–∞—Ö–∏–Ω –∞—Å—É—É–∂ –±–∞–π–≥–∞–∞ –±–æ–ª
'''
        
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
            max_tokens=50,
            temperature=0.1
        )
        
        analysis_result = response.choices[0].message.content.strip()
        
        if "–®–ò–ù_–ê–°–£–£–î–ê–õ" in analysis_result:
            return True, "–®–∏–Ω—ç –∞—Å—É—É–¥–∞–ª –∏–ª—Ä—ç–≤"
        else:
            return False, "”®–º–Ω”©—Ö –∞—Å—É—É–¥–ª—ã–Ω “Ø—Ä–≥—ç–ª–∂–ª—ç–ª"
            
    except Exception as e:
        print(f"‚ùå Escalation —à–∏–π–¥—ç—Ö –∞–ª–¥–∞–∞: {e}")
        # –ê–ª–¥–∞–∞ –≥–∞—Ä–≤–∞–ª –∞–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂ –≥—ç–∂ “Ø–∑—ç—Ö
        return True, "–ê–ª–¥–∞–∞ - –∞–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂ –≥—ç–∂ “Ø–∑—ç–≤"

if __name__ == "__main__":
    app.run(debug=True, port=5000)