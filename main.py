import os
import time
import requests
import re
import jwt
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
from flask import Flask, request, jsonify, render_template_string
from openai import OpenAI

app = Flask(__name__)

# –û—Ä—á–Ω—ã —Ö—É–≤—å—Å–∞–≥—á–∏–¥
OPENAI_API_KEY    = os.environ["OPENAI_API_KEY"]
ASSISTANT_ID      = os.environ["ASSISTANT_ID"]
CHATWOOT_API_KEY  = os.environ["CHATWOOT_API_KEY"]
ACCOUNT_ID        = os.environ["ACCOUNT_ID"]
CHATWOOT_BASE_URL = "https://app.chatwoot.com"

# Email —Ç–æ—Ö–∏—Ä–≥–æ–æ
SMTP_SERVER = os.environ.get("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT = int(os.environ.get("SMTP_PORT", "587"))
SENDER_EMAIL = os.environ["SENDER_EMAIL"]
SENDER_PASSWORD = os.environ["SENDER_PASSWORD"]

# Microsoft Teams —Ç–æ—Ö–∏—Ä–≥–æ–æ
TEAMS_WEBHOOK_URL = os.environ.get("TEAMS_WEBHOOK_URL")
MAX_AI_RETRIES = 2  # AI —Ö—ç–¥—ç–Ω —É–¥–∞–∞ –æ—Ä–æ–ª–¥—Å–æ–Ω—ã –¥–∞—Ä–∞–∞ –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞—Ö

# JWT —Ç–æ—Ö–∏—Ä–≥–æ–æ
JWT_SECRET = os.environ.get("JWT_SECRET", "your-secret-key-here")
VERIFICATION_URL_BASE = os.environ.get("VERIFICATION_URL_BASE", "http://localhost:5000")

# OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=OPENAI_API_KEY)

def is_valid_email(email):
    """–ò–º—ç–π–ª —Ö–∞—è–≥–∏–π–Ω —Ñ–æ—Ä–º–∞—Ç—ã–≥ —à–∞–ª–≥–∞—Ö"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def generate_verification_token(email, conv_id, contact_id):
    """–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö JWT —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö"""
    payload = {
        'email': email,
        'conv_id': conv_id,
        'contact_id': contact_id,
        'exp': datetime.utcnow() + timedelta(hours=24)  # 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ –¥—É—É—Å–Ω–∞
    }
    return jwt.encode(payload, JWT_SECRET, algorithm='HS256')

def verify_token(token):
    """JWT —Ç–æ–∫–µ–Ω—ã–≥ —à–∞–ª–≥–∞—Ö"""
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=['HS256'])
        return payload
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None

def send_verification_email(email, token):
    """–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∏–º—ç–π–ª –∏–ª–≥—ç—ç—Ö"""
    try:
        verification_url = f"{VERIFICATION_URL_BASE}/verify?token={token}"
        
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = email
        msg['Subject'] = "–ò–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É"
        
        body = f"""
        –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!
        
        –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥–∏–π–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –¥–æ–æ—Ä—Ö –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É:
        
        {verification_url}
        
        –≠–Ω—ç –ª–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–Ω–æ.
        
        –•—ç—Ä—ç–≤ —Ç–∞ –±–∏—à –±–æ–ª –±–∏–¥—ç–Ω–¥ –º—ç–¥—ç–≥–¥—ç–Ω—ç “Ø“Ø.
        
        –ë–∞—è—Ä–ª–∞–ª–∞–∞!
        """
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        server.send_message(msg)
        server.quit()
        
        return True
    except Exception as e:
        print(f"–ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False

def get_contact(contact_id):
    """Contact –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
    resp = requests.get(url, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def update_contact(contact_id, attrs):
    """Contact-–∏–π–Ω custom attributes —à–∏–Ω—ç—á–ª—ç—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
    payload = {"custom_attributes": attrs}
    resp = requests.put(url, json=payload, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def get_conversation(conv_id):
    """Conversation –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
    resp = requests.get(url, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def update_conversation(conv_id, attrs):
    """Conversation-–∏–π–Ω custom attributes —à–∏–Ω—ç—á–ª—ç—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/custom_attributes"
    payload = {"custom_attributes": attrs}
    resp = requests.post(url, json=payload, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def send_to_chatwoot(conv_id, text):
    """Chatwoot —Ä—É—É –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/messages"
    headers = {"api_access_token": CHATWOOT_API_KEY}
    payload = {"content": text, "message_type": "outgoing"}
    r = requests.post(url, json=payload, headers=headers)
    r.raise_for_status()

def analyze_customer_issue(message_content, customer_email=None):
    """AI –∞—à–∏–≥–ª–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç—Ö"""
    try:
        # –ê—Å—É—É–¥–∞–ª –¥“Ø–≥–Ω—ç—Ö –∑–æ—Ä–∏—É–ª–∞–ª—Ç—ã–Ω prompt
        analysis_prompt = f"""
        –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –¥–∞—Ä–∞–∞—Ö –º–µ—Å—Å–µ–∂–∏–π–≥ –¥“Ø–≥–Ω—ç–∂, –∞—Å—É—É–¥–ª—ã–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π –±–æ–ª–≥–æ:

        –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂: "{message_content}"

        –î–∞—Ä–∞–∞—Ö —Ñ–æ—Ä–º–∞—Ç–∞–∞—Ä —Ö–∞—Ä–∏—É–ª:
        
        –ê–°–£–£–î–õ–´–ù –¢”®–†”®–õ: [–∞—Å—É—É–¥–ª—ã–Ω –∞–Ω–≥–∏–ª–∞–ª]
        –Ø–ê–†–ê–õ–¢–ê–ô –ë–ê–ô–î–ê–õ: [”®–Ω–¥”©—Ä/–î—É–Ω–¥/–ë–∞–≥–∞]
        –ê–°–£–£–î–õ–´–ù –¢–û–í–ß –¢–ê–ô–õ–ë–ê–†: [1-2 ”©–≥“Ø“Ø–ª–±—ç—Ä—ç—ç—Ä —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ–ª—Ç]
        –®–ê–ê–†–î–õ–ê–ì–ê–¢–ê–ô –ê–†–ì–ê –•–≠–ú–ñ–≠–≠: [—è–º–∞—Ä –∞—Ä–≥–∞ —Ö—ç–º–∂—ç—ç –∞–≤–∞—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π]
        –•“Æ–õ–≠–≠–ì–î–≠–ñ –ë–£–ô –•–ê–†–ò–£–õ–¢: [—Ö—ç—Ä—ç–≥–ª—ç–≥—á —è–º–∞—Ä —Ö–∞—Ä–∏—É–ª—Ç —Ö“Ø–ª—ç—ç–∂ –±–∞–π–≥–∞–∞]
        """

        # OpenAI-–∞–∞—Ä –¥“Ø–≥–Ω—ç–ª—Ç —Ö–∏–π—Ö
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∞ —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –¥“Ø–≥–Ω—ç–∂, –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ç–æ–¥–æ—Ä—Ö–æ–π –º—ç–¥—ç—ç–ª—ç–ª ”©–≥”©—Ö –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω."},
                {"role": "user", "content": analysis_prompt}
            ],
            max_tokens=500,
            temperature=0.3
        )
        
        analysis = response.choices[0].message.content.strip()
        return analysis
        
    except Exception as e:
        print(f"‚ùå –ê—Å—É—É–¥–∞–ª –¥“Ø–≥–Ω—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return f"–ê—Å—É—É–¥–∞–ª –¥“Ø–≥–Ω—ç—Ö –±–æ–ª–æ–º–∂–≥“Ø–π. –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂: {message_content}"

def send_teams_notification(conv_id, customer_message, customer_email=None, escalation_reason="–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–∞–ª", ai_analysis=None):
    """Microsoft Teams —Ä—É—É —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω —Ç–∞–ª–∞–∞—Ä –∞–∂–∏–ª—Ç–∞–Ω–¥ –º—ç–¥—ç—ç–ª—ç—Ö"""
    if not TEAMS_WEBHOOK_URL:
        print("‚ö†Ô∏è Teams webhook URL —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞")
        return False
    
    try:
        # Chatwoot conversation URL
        conv_url = f"{CHATWOOT_BASE_URL}/app/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
        
        # AI –∞—Å—É—É–¥–ª—ã–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª –±—ç–ª—Ç–≥—ç—Ö
        error_summary = escalation_reason
        if ai_analysis:
            error_summary += f"\n\n–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –∞–Ω–∞–ª–∏–∑: {ai_analysis}"
        
        # Teams message format
        teams_message = {
            "type": "message",
            "attachments": [{
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                    "type": "AdaptiveCard",
                    "version": "1.3",
                    "body": [
                        {
                            "type": "TextBlock",
                            "text": "üìã –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç",
                            "weight": "Bolder",
                            "size": "Medium",
                            "color": "Attention"
                        },
                        {
                            "type": "TextBlock",
                            "text": "AI —Å–∏—Å—Ç–µ–º —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂, –∞–∂–∏–ª—Ç–Ω—ã –∞–Ω—Ö–∞–∞—Ä–∞–ª —Ç–∞—Ç–∞—Ö—É–π—Ü –∞—Å—É—É–¥–∞–ª –≥—ç–∂ “Ø–∑—ç–∂ –±–∞–π–Ω–∞.",
                            "wrap": True,
                            "color": "Default"
                        },
                        {
                            "type": "FactSet",
                            "facts": [
                                {
                                    "title": "–•–∞—Ä–∏–ª—Ü–∞–≥—á:",
                                    "value": customer_email or "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π"
                                },
                                {
                                    "title": "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂:",
                                    "value": customer_message[:300] + ("..." if len(customer_message) > 300 else "")
                                },
                                {
                                    "title": "–•—É–≥–∞—Ü–∞–∞:",
                                    "value": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                                }
                            ]
                        }
                    ]
                }
            }]
        }
        
        # AI –¥“Ø–≥–Ω—ç–ª—Ç –Ω—ç–º—ç—Ö
        if ai_analysis:
            teams_message["attachments"][0]["content"]["body"].append({
                "type": "TextBlock",
                "text": "ü§ñ AI –î“Ø–≥–Ω—ç–ª—Ç:",
                "weight": "Bolder",
                "size": "Medium",
                "spacing": "Large"
            })
            teams_message["attachments"][0]["content"]["body"].append({
                "type": "TextBlock",
                "text": ai_analysis,
                "wrap": True,
                "fontType": "Monospace",
                "color": "Good"
            })
        
        # Actions –Ω—ç–º—ç—Ö
        teams_message["attachments"][0]["content"]["actions"] = [
            {
                "type": "Action.OpenUrl",
                "title": "Chatwoot –¥—ç—ç—Ä —Ö–∞—Ä–∞—Ö",
                "url": conv_url
            }
        ]
        
        response = requests.post(TEAMS_WEBHOOK_URL, json=teams_message)
        response.raise_for_status()
        print(f"‚úÖ Teams —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç–ª—ç—ç: {escalation_reason}")
        return True
        
    except Exception as e:
        print(f"‚ùå Teams –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False

def get_ai_response(thread_id, message_content, conv_id=None, customer_email=None, retry_count=0):
    """OpenAI Assistant-—ç—ç—Å —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö"""
    try:
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂–∏–π–≥ thread —Ä—É—É –Ω—ç–º—ç—Ö
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=message_content
        )

        # Assistant run “Ø“Ø—Å–≥—ç—Ö
        run = client.beta.threads.runs.create(
            thread_id=thread_id, 
            assistant_id=ASSISTANT_ID
        )

        # Run –¥—É—É—Å–∞—Ö—ã–≥ —Ö“Ø–ª—ç—ç—Ö
        max_wait = 30
        wait_count = 0
        while wait_count < max_wait:
            run_status = client.beta.threads.runs.retrieve(
                thread_id=thread_id, 
                run_id=run.id
            )
            
            if run_status.status == "completed":
                break
            elif run_status.status in ["failed", "cancelled", "expired"]:
                error_msg = "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
                
                # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
                if retry_count == 0 and conv_id:
                    send_teams_notification(
                        conv_id, 
                        message_content, 
                        customer_email, 
                        f"AI run —Å—Ç–∞—Ç—É—Å –∞–ª–¥–∞–∞: {run_status.status}",
                        f"OpenAI run ID: {run.id}, Status: {run_status.status}"
                    )
                
                return error_msg
                
            time.sleep(1)
            wait_count += 1

        if wait_count >= max_wait:
            timeout_msg = "–•–∞—Ä–∏—É–ª–∞—Ö–∞–¥ —Ö—ç—Ç —É–¥–∞–∂ –±–∞–π–Ω–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
            
            # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω timeout –±–æ–ª)
            if retry_count == 0 and conv_id:
                send_teams_notification(
                    conv_id, 
                    message_content, 
                    customer_email, 
                    "AI —Ö–∞—Ä–∏—É–ª—Ç timeout (30 —Å–µ–∫—É–Ω–¥)",
                    f"OpenAI run ID: {run.id}, Thread ID: {thread_id}"
                )
            
            return timeout_msg

        # Assistant-–∏–π–Ω —Ö–∞—Ä–∏—É–ª—å—Ç—ã–≥ –∞–≤–∞—Ö
        messages = client.beta.threads.messages.list(thread_id=thread_id)
        
        for msg in messages.data:
            if msg.role == "assistant":
                reply = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        reply += content_block.text.value
                return reply

        # –•–∞—Ä–∏—É–ª—Ç –æ–ª–¥–æ—Ö–≥“Ø–π
        no_response_msg = "–•–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
        
        # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
        if retry_count == 0 and conv_id:
            send_teams_notification(
                conv_id, 
                message_content, 
                customer_email, 
                "AI —Ö–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π",
                f"Thread ID: {thread_id}, Messages —Ö–∞–π–ª—Ç–∞–¥ —Ö–∞—Ä–∏—É–ª—Ç –±–∞–π—Ö–≥“Ø–π"
            )
        
        return no_response_msg
        
    except Exception as e:
        print(f"AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
        error_msg = "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
        
        # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
        if retry_count == 0 and conv_id:
            send_teams_notification(
                conv_id, 
                message_content, 
                customer_email, 
                "AI —Å–∏—Å—Ç–µ–º–∏–π–Ω –∞–ª–¥–∞–∞ (Exception)",
                f"Python exception: {str(e)}, Thread ID: {thread_id}"
            )
        
        return error_msg

@app.route("/verify", methods=["GET"])
def verify_email():
    """–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö endpoint"""
    token = request.args.get('token')
    if not token:
        return "–¢–æ–∫–µ–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π!", 400
    
    payload = verify_token(token)
    if not payload:
        return "–¢–æ–∫–µ–Ω —Ö“Ø—á–∏–Ω–≥“Ø–π —ç—Å–≤—ç–ª —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω!", 400
    
    try:
        # Contact level –¥—ç—ç—Ä email_verified = true –≥—ç–∂ —Ç—ç–º–¥—ç–≥–ª—ç—Ö
        conv_id = payload['conv_id']
        contact_id = payload['contact_id']
        email = payload['email']
        
        # Contact –¥—ç—ç—Ä –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞–¥–≥–∞–ª–∞—Ö
        update_contact(contact_id, {
            "email_verified": "1",  # Checkbox type-–¥ string "true" –∞—à–∏–≥–ª–∞—Ö
            "verified_email": email,
            "verification_date": datetime.utcnow().isoformat()
        })
        
        # Conversation –¥—ç—ç—Ä thread –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞–¥–≥–∞–ª–∞—Ö (thread –Ω—å conversation specific)
        thread_key = f"openai_thread_{contact_id}"
        update_conversation(conv_id, {
            thread_key: None  # –®–∏–Ω—ç thread —ç—Ö–ª“Ø“Ø–ª—ç—Ö
        })
        
        # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö
        send_to_chatwoot(conv_id, f"‚úÖ –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({email}) –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞! –û–¥–æ–æ —Ç–∞ chatbot-—Ç–æ–π —Ö–∞—Ä–∏–ª—Ü–∞–∂ –±–æ–ª–Ω–æ.")
        
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                .success { color: green; font-size: 24px; margin: 20px 0; }
                .info { color: #666; font-size: 16px; }
            </style>
        </head>
        <body>
            <div class="success">‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞!</div>
            <div class="info">–¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({{ email }}) –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞.<br>–û–¥–æ–æ —Ç–∞ chatbot-—Ç–æ–π–≥–æ–æ —Ö–∞—Ä–∏–ª—Ü–∞–∂ –±–æ–ª–Ω–æ.</div>
        </body>
        </html>
        """, email=email)
        
    except Exception as e:
        print(f"Verification –∞–ª–¥–∞–∞: {e}")
        return "–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞!", 500

@app.route("/webhook", methods=["POST"])
def webhook():
    """Chatwoot webhook handler - –±“Ø—Ä—ç–Ω —à–∏–Ω—ç –ª–æ–≥–∏–∫"""
    try:
        data = request.json
        print(f"üîÑ Webhook received: {data.get('message_type', 'unknown')}")
        
        # –ó”©–≤—Ö”©–Ω incoming –º–µ—Å—Å–µ–∂ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö
        if data.get("message_type") != "incoming":
            print("‚è≠Ô∏è Skipping: not incoming message")
            return jsonify({"status": "skipped - not incoming"}), 200

        # “Æ–Ω–¥—Å—ç–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
        conv_id = data["conversation"]["id"]
        message_content = data.get("content", "").strip()
        
        print(f"üìù Conv ID: {conv_id}, Message: '{message_content}'")
        
        # Contact ID –æ–ª–æ—Ö
        contact_id = None
        if "sender" in data and data["sender"]:
            contact_id = data["sender"].get("id")
        
        if not contact_id:
            print("‚ùå Contact ID –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            send_to_chatwoot(conv_id, "–ê–ª–¥–∞–∞: –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
            return jsonify({"status": "error - no contact"}), 400

        print(f"üë§ Contact ID: {contact_id}")

        # ========== –ë–ê–¢–ê–õ–ì–ê–ê–ñ–£–£–õ–ê–õ–¢ –®–ê–õ–ì–ê–• ==========
        print("üîç –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
        
        # Contact-–∏–π–Ω custom attributes –∞–≤–∞—Ö (webhook-—ç—ç—Å —à—É—É–¥)
        is_verified = False
        verified_email = ""
        
        # Webhook –¥–æ—Ç–æ—Ä contact –º—ç–¥—ç—ç–ª—ç–ª –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        if "conversation" in data and "meta" in data["conversation"] and "sender" in data["conversation"]["meta"]:
            sender_meta = data["conversation"]["meta"]["sender"]
            if "custom_attributes" in sender_meta:
                contact_attrs = sender_meta["custom_attributes"]
                email_verified_value = contact_attrs.get("email_verified", "")
                verified_email = contact_attrs.get("verified_email", "")
                
                # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç —à–∞–ª–≥–∞—Ö
                is_verified = str(email_verified_value).lower() in ["true", "1", "yes"]
                
                print(f"üìä Webhook-—ç—ç—Å –∞–≤—Å–∞–Ω: email_verified='{email_verified_value}', verified_email='{verified_email}'")
                print(f"‚úÖ Is verified: {is_verified}")
        
        # –•—ç—Ä—ç–≤ webhook –¥—ç—ç—Ä –±–∞–π—Ö–≥“Ø–π –±–æ–ª API-–∞–∞—Ä –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞—Ö
        if not is_verified:
            print("üîç API-–∞–∞—Ä –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
            try:
                contact = get_contact(contact_id)
                contact_attrs = contact.get("custom_attributes", {})
                email_verified_value = contact_attrs.get("email_verified", "")
                verified_email = contact_attrs.get("verified_email", "")
                
                is_verified = str(email_verified_value).lower() in ["true", "1", "yes"]
                print(f"üìä API-–∞–∞—Å –∞–≤—Å–∞–Ω: email_verified='{email_verified_value}', verified_email='{verified_email}'")
                print(f"‚úÖ Is verified: {is_verified}")
            except Exception as e:
                print(f"‚ùå API –∞–ª–¥–∞–∞: {e}")
                is_verified = False

        # ========== –ë–ê–¢–ê–õ–ì–ê–ê–ñ–£–£–õ–ê–õ–¢–´–ù “Æ–ô–õ–î–≠–õ ==========
        if not is_verified:
            print("üö´ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–∞–≥“Ø–π - –∏–º—ç–π–ª —à–∞–∞—Ä–¥–∞–∂ –±–∞–π–Ω–∞")
            
            # –ò–º—ç–π–ª —Ö–∞—è–≥ —à–∞–ª–≥–∞—Ö
            if is_valid_email(message_content):
                print(f"üìß –ó”©–≤ –∏–º—ç–π–ª: {message_content}")
                
                # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö
                token = generate_verification_token(message_content, conv_id, contact_id)
                
                # –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö
                if send_verification_email(message_content, token):
                    send_to_chatwoot(conv_id, 
                        f"üìß –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({message_content}) —Ä“Ø“Ø –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –ª–∏–Ω–∫ –∏–ª–≥—ç—ç–ª—ç—ç.\n\n"
                        "–ò–º—ç–π–ª—ç—ç —à–∞–ª–≥–∞–∞–¥ –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É. –õ–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–Ω–æ.\n\n"
                        "‚ö†Ô∏è Spam —Ñ–æ–ª–¥–µ—Ä—ã–≥ —à–∞–ª–≥–∞—Ö–∞–∞ –º–∞—Ä—Ç—É—É–∑–∞–π!")
                    print("‚úÖ –ò–º—ç–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç")
                else:
                    send_to_chatwoot(conv_id, "‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.")
                    print("‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞")
            else:
                print(f"‚ùå –ë—É—Ä—É—É –∏–º—ç–π–ª —Ñ–æ—Ä–º–∞—Ç: '{message_content}'")
                send_to_chatwoot(conv_id, 
                    "üëã –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! Chatbot –∞—à–∏–≥–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ —ç—Ö–ª—ç—ç–¥ –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É.\n\n"
                    "üìß –ó”©–≤ –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∏—á—ç—ç–¥ –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø.\n"
                    "–ñ–∏—à—ç—ç: example@gmail.com")
            
            return jsonify({"status": "waiting_verification"}), 200

        # ========== AI CHATBOT –ê–ñ–ò–õ–õ–£–£–õ–ê–• ==========
        print(f"ü§ñ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á ({verified_email}) - AI chatbot –∞–∂–∏–ª–ª—É—É–ª–∂ –±–∞–π–Ω–∞")
        
        # Thread –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
        conv = get_conversation(conv_id)
        conv_attrs = conv.get("custom_attributes", {})
        
        thread_key = f"openai_thread_{contact_id}"
        thread_id = conv_attrs.get(thread_key)
        
        # Thread —à–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        if not thread_id:
            print("üßµ –®–∏–Ω—ç thread “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")
            thread = client.beta.threads.create()
            thread_id = thread.id
            update_conversation(conv_id, {thread_key: thread_id})
            print(f"‚úÖ Thread “Ø“Ø—Å–≥—ç–ª—ç—ç: {thread_id}")
        else:
            print(f"‚úÖ –û–¥–æ–æ –±–∞–π–≥–∞–∞ thread –∞—à–∏–≥–ª–∞–∂ –±–∞–π–Ω–∞: {thread_id}")

        # AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö (retry logic-—Ç–æ–π)
        print("ü§ñ AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤—á –±–∞–π–Ω–∞...")
        
        retry_count = 0
        ai_response = None
        
        while retry_count <= MAX_AI_RETRIES:
            ai_response = get_ai_response(thread_id, message_content, conv_id, verified_email, retry_count)
            
            # –•—ç—Ä—ç–≤ –∞–ª–¥–∞–∞—Ç–∞–π —Ö–∞—Ä–∏—É–ª—Ç –±–∏—à –±–æ–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π
            if not any(error_phrase in ai_response for error_phrase in [
                "–∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", "—Ö—ç—Ç —É–¥–∞–∂ –±–∞–π–Ω–∞", "–æ–ª–¥—Å–æ–Ω–≥“Ø–π"
            ]):
                break
                
            retry_count += 1
            if retry_count <= MAX_AI_RETRIES:
                print(f"üîÑ AI –¥–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–∂ –±–∞–π–Ω–∞... ({retry_count}/{MAX_AI_RETRIES})")
                time.sleep(2)  # 2 —Å–µ–∫—É–Ω–¥ —Ö“Ø–ª—ç—ç—Ö
        
        # –•—ç—Ä—ç–≤ –±“Ø—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ –±“Ø—Ç—ç–ª–≥“Ø–π—Ç–≤—ç–ª –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞—Ö
        if retry_count > MAX_AI_RETRIES:
            print("‚ùå AI-–∏–π–Ω –±“Ø—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ –±“Ø—Ç—ç–ª–≥“Ø–π—Ç—ç–≤ - –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∂ –±–∞–π–Ω–∞")
            
            send_teams_notification(
                conv_id, 
                message_content, 
                verified_email, 
                f"AI {MAX_AI_RETRIES + 1} —É–¥–∞–∞ –¥–∞—Ä–∞–∞–ª–∞–Ω –∞–ª–¥–∞–∞ –≥–∞—Ä–≥–∞–ª–∞–∞",
                f"Thread ID: {thread_id}, –ë“Ø—Ö retry –æ—Ä–æ–ª–¥–ª–æ–≥–æ –±“Ø—Ç—ç–ª–≥“Ø–π—Ç—ç–≤"
            )
            
            ai_response = (
                "üö® –£—É—á–ª–∞–∞—Ä–∞–π, —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞—Å—É—É–¥–∞–ª –≥–∞—Ä–ª–∞–∞.\n\n"
                "–ë–∏ —Ç–∞–Ω—ã –∞—Å—É—É–ª—Ç—ã–≥ —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –±–∞–≥—Ç –¥–∞–º–∂—É—É–ª–∞–∞. –£–¥–∞—Ö–≥“Ø–π –∞—Å—É—É–¥–ª—ã–≥ —à–∏–π–¥—ç–∂, —Ç–∞–Ω–¥ —Ö–∞—Ä–∏—É–ª—Ç ”©–≥”©—Ö –±–æ–ª–Ω–æ.\n\n"
                "üïê –¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø..."
            )
        
        # Chatwoot —Ä—É—É –∏–ª–≥—ç—ç—Ö
        send_to_chatwoot(conv_id, ai_response)
        print(f"‚úÖ AI —Ö–∞—Ä–∏—É–ª—Ç –∏–ª–≥—ç—ç–ª—ç—ç: {ai_response[:50]}...")
        
        # AI –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞—Ä–∏—É–ª—Ç ”©–≥—Å–Ω–∏–π –¥–∞—Ä–∞–∞ –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂ Teams-—ç—ç—Ä –º—ç–¥—ç—ç–ª—ç—Ö
        if retry_count <= MAX_AI_RETRIES:  # –ó”©–≤—Ö”©–Ω –∞–º–∂–∏–ª—Ç—Ç–∞–π AI —Ö–∞—Ä–∏—É–ª—Ç “Ø–µ–¥
            print("üîç –ê—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂ –∞–∂–∏–ª—Ç–∞–Ω–¥ –º—ç–¥—ç—ç–ª—ç—Ö...")
            try:
                # AI-—ç—ç—Ä –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç—Ö
                analysis = analyze_customer_issue(message_content, verified_email)
                print(f"‚úÖ –î“Ø–≥–Ω—ç–ª—Ç –±—ç–ª—ç–Ω: {analysis[:100]}...")
                
                # Teams-—ç—ç—Ä –º—ç–¥—ç—ç–ª—ç—Ö
                send_teams_notification(
                    conv_id,
                    message_content,
                    verified_email,
                    "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç",
                    analysis
                )
                print("‚úÖ –ê—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç –∞–∂–∏–ª—Ç–∞–Ω–¥ –∏–ª–≥—ç—ç–ª—ç—ç")
                
            except Exception as e:
                print(f"‚ùå –ê—Å—É—É–¥–∞–ª –¥“Ø–≥–Ω—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        
        return jsonify({"status": "success"}), 200

    except Exception as e:
        print(f"üí• Webhook –∞–ª–¥–∞–∞: {e}")
        return jsonify({"status": f"error: {str(e)}"}), 500

@app.route("/test-teams", methods=["GET"])
def test_teams():
    """Teams webhook —Ç–µ—Å—Ç —Ö–∏–π—Ö"""
    if not TEAMS_WEBHOOK_URL:
        return jsonify({"error": "TEAMS_WEBHOOK_URL —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞"}), 400
    
    try:
        # –¢–µ—Å—Ç –¥“Ø–≥–Ω—ç–ª—Ç “Ø“Ø—Å–≥—ç—Ö
        test_analysis = """–ê–°–£–£–î–õ–´–ù –¢”®–†”®–õ: Teams –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π–Ω —Ç–µ—Å—Ç
–Ø–ê–†–ê–õ–¢–ê–ô –ë–ê–ô–î–ê–õ: –ë–∞–≥–∞
–ê–°–£–£–î–õ–´–ù –¢–û–í–ß –¢–ê–ô–õ–ë–ê–†: –°–∏—Å—Ç–µ–º –∑”©–≤”©”©—Ä –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö –∑–æ—Ä–∏–ª–≥–æ—Ç–æ–π —Ç–µ—Å—Ç –º—ç–¥—ç—ç–ª—ç–ª.
–®–ê–ê–†–î–õ–ê–ì–ê–¢–ê–ô –ê–†–ì–ê –•–≠–ú–ñ–≠–≠: Teams –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞–∂–∏–ª—Ç–∞–Ω —Ö–∞—Ä–∂, —Å–∏—Å—Ç–µ–º—Ç—ç–π —Ç–∞–Ω–∏–ª—Ü–∞—Ö
–•“Æ–õ–≠–≠–ì–î–≠–ñ –ë–£–ô –•–ê–†–ò–£–õ–¢: "–¢–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π" –≥—ç—Å—ç–Ω –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç"""
        
        # –¢–µ—Å—Ç –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö
        success = send_teams_notification(
            conv_id="test_123",
            customer_message="–≠–Ω—ç —Ç–µ—Å—Ç –º—ç–¥—ç—ç–ª—ç–ª —é–º. Teams —Ö–æ–ª–±–æ–ª—Ç –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞.",
            customer_email="test@example.com",
            escalation_reason="Teams webhook —Ç–µ—Å—Ç",
            ai_analysis=test_analysis
        )
        
        if success:
            return jsonify({"status": "success", "message": "Teams –º—ç–¥—ç—ç–ª—ç–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç!"}), 200
        else:
            return jsonify({"error": "Teams –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞"}), 500
            
    except Exception as e:
        return jsonify({"error": f"–ê–ª–¥–∞–∞: {str(e)}"}), 500

def escalate_to_human(conv_id, customer_message, customer_email=None):
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ AI-—ç—ç—Ä –¥“Ø–≥–Ω—ç–∂ Teams-—ç—ç—Ä –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞—Ö"""
    try:
        print("üîç –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂ –±–∞–π–Ω–∞...")
        
        # AI –∞—à–∏–≥–ª–∞–Ω –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç—Ö
        analysis = analyze_customer_issue(customer_message, customer_email)
        print(f"‚úÖ –î“Ø–≥–Ω—ç–ª—Ç –±—ç–ª—ç–Ω: {analysis[:100]}...")
        
        # Teams-—ç—ç—Ä –º—ç–¥—ç—ç–ª—ç—Ö
        success = send_teams_notification(
            conv_id,
            customer_message,
            customer_email,
            "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç",
            analysis
        )
        
        if success:
            print("‚úÖ –ê—Å—É—É–¥–ª—ã–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞–≤")
            return "üëã –ë–∏ —Ç–∞–Ω—ã –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂, –∞–∂–∏–ª—Ç–∞–Ω–¥ –¥–∞–º–∂—É—É–ª–∞–∞. –£–¥–∞—Ö–≥“Ø–π –∞–∂–∏–ª—Ç–∞–Ω —Ç–∞–Ω—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ–Ω–æ.\n\nüïê –¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø..."
        else:
            print("‚ùå Teams –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞")
            return "–£—É—á–ª–∞–∞—Ä–∞–π, —Ç–∞–Ω—ã –∞—Å—É—É–¥–ª—ã–≥ –∞–∂–∏–ª—Ç–∞–Ω–¥ –¥–∞–º–∂—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
            
    except Exception as e:
        print(f"‚ùå Escalation –∞–ª–¥–∞–∞: {e}")
        return "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."

if __name__ == "__main__":
    app.run(debug=True, port=5000)