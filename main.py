import os
import requests
import re
import jwt
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
from flask import Flask, request, jsonify, render_template_string

# ‚îÄ‚îÄ Load .env ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from dotenv import load_dotenv
load_dotenv()

# ‚îÄ‚îÄ Logging ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# ‚îÄ‚îÄ Environment variables ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CHATWOOT_API_KEY      = os.getenv("CHATWOOT_API_KEY", "").strip()
ACCOUNT_ID            = os.getenv("ACCOUNT_ID", "").strip()
# API Channel –∞—à–∏–≥–ª–∞—Ö–≥“Ø–π —Ç—É–ª INBOX_ID-—ã–≥ –∞—à–∏–≥–ª–∞—Ö–≥“Ø–π

SENDER_EMAIL          = os.getenv("SENDER_EMAIL", "").strip()
SENDER_PASSWORD       = os.getenv("SENDER_PASSWORD", "").strip()
SMTP_SERVER           = os.getenv("SMTP_SERVER", "smtp.gmail.com").strip()
SMTP_PORT             = int(os.getenv("SMTP_PORT", "587"))

VERIFICATION_URL_BASE = os.getenv("VERIFICATION_URL_BASE", "http://localhost:5000").strip()
JWT_SECRET            = os.getenv("JWT_SECRET", "your-secret-key-here").strip()

# Microsoft Teams webhook (–∑–∞–∞–≤–∞–ª –±–∏—à)
TEAMS_WEBHOOK_URL     = os.getenv("TEAMS_WEBHOOK_URL", "").strip()


# ‚îÄ‚îÄ –ü–æ–º–æ—â–Ω–∏–∫ —Ñ—É–Ω–∫—Ü–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def is_valid_email(email: str) -> bool:
    """–ò–º—ç–π–ª —Ö–∞—è–≥ –∑”©–≤ —ç—Å—ç—Ö —à–∞–ª–≥–∞—Ö."""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def generate_verification_token(email: str, conv_id: int, contact_id: int) -> str:
    """JWT —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö (24 —Ü–∞–≥–∏–π–Ω —Ö“Ø—á–∏–Ω—Ç—ç–π)."""
    payload = {
        'email': email,
        'conv_id': conv_id,
        'contact_id': contact_id,
        'exp': datetime.utcnow() + timedelta(hours=24)
    }
    return jwt.encode(payload, JWT_SECRET, algorithm='HS256')

def verify_token(token: str):
    """JWT —Ç–æ–∫–µ–Ω —à–∞–ª–≥–∞—Ö."""
    try:
        return jwt.decode(token, JWT_SECRET, algorithms=['HS256'])
    except (jwt.ExpiredSignatureError, jwt.InvalidTokenError):
        return None

def send_verification_email(email: str, token: str) -> bool:
    """
    –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –ª–∏–Ω–∫ —Ä“Ø“Ø –∏–º—ç–π–ª –∏–ª–≥—ç—ç—Ö.
    /verify?token=<JWT> —Ö—ç–ª–±—ç—Ä—Ç—ç–π URL –±–æ–ª–Ω–æ.
    """
    try:
        verification_url = f"{VERIFICATION_URL_BASE}/verify?token={token}"
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = email
        msg['Subject'] = "–ò–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É"

        body = f"""
–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!

–¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥–∏–π–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –¥–æ–æ—Ä—Ö –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É:

{verification_url}

–≠–Ω—ç –ª–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω —Ç”©–≥”©–ª–¥”©—Ä–≥“Ø–π –±–æ–ª–Ω–æ.

–•—ç—Ä–≤—ç—ç —Ç–∞ –±–∏—à –±–æ–ª –±–∏–¥—ç–Ω–¥ –º—ç–¥—ç–≥–¥—ç–Ω—ç “Ø“Ø.

–ë–∞—è—Ä–ª–∞–ª–∞–∞!
"""
        msg.attach(MIMEText(body, 'plain', 'utf-8'))

        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        server.send_message(msg)
        server.quit()
        return True
    except Exception as e:
        logger.error(f"–ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False

def get_contact(contact_id: int) -> dict:
    """Contact –º—ç–¥—ç—ç–ª–ª–∏–π–≥ Chatwoot-–∞–∞—Å –∞–≤–∞—Ö."""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
    headers = {
        "api_access_token": CHATWOOT_API_KEY,
        "Content-Type": "application/json"
    }
    resp = requests.get(url, headers=headers)
    resp.raise_for_status()
    return resp.json()

def update_contact(contact_id: int, attrs: dict) -> dict:
    """Contact-–∏–π–Ω custom_attributes —à–∏–Ω—ç—á–ª—ç—Ö."""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
    headers = {
        "api_access_token": CHATWOOT_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {"custom_attributes": attrs}
    resp = requests.put(url, json=payload, headers=headers)
    resp.raise_for_status()
    return resp.json()

def send_to_chatwoot(conv_id: int, text: str) -> None:
    """Chatwoot —Ä—É—É outgoing (–∞–≥–µ–Ω—Ç) –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö."""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/messages"
    headers = {
        "api_access_token": CHATWOOT_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {
        "content": text,
        "message_type": "outgoing",
        "private": False
    }
    logger.info(f"üì§ Sending to Chatwoot: {url}  payload={payload}")
    resp = requests.post(url, json=payload, headers=headers)
    resp.raise_for_status()
    logger.info(f"üì• Chatwoot response: {resp.status_code}")

def send_teams_notification(conv_id: int, customer_message: str, customer_email: str = None,
                            escalation_reason: str = "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–∞–ª", ai_analysis: str = None) -> bool:
    """Microsoft Teams —Ä“Ø“Ø —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö (–∑–∞–∞–≤–∞–ª –±–∏—à)."""
    if not TEAMS_WEBHOOK_URL:
        return False
    try:
        conv_url = f"{CHATWOOT_BASE_URL}/app/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
        error_summary = escalation_reason
        if ai_analysis:
            error_summary += f"\n\nAI –∞–Ω–∞–ª–∏–∑: {ai_analysis}"
        teams_payload = {
            "type": "message",
            "attachments": [{
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                    "type": "AdaptiveCard",
                    "version": "1.3",
                    "body": [
                        {"type": "TextBlock", "text": "üìã –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –¥“Ø–≥–Ω—ç–ª—Ç", "weight": "Bolder", "size": "Medium", "color": "Attention"},
                        {"type": "TextBlock", "text": "AI –¥“Ø–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç —Ö–∏–π–≥–¥—ç–∂ –±–∞–π–Ω–∞.", "wrap": True},
                        {"type": "FactSet", "facts": [
                            {"title": "–•–∞—Ä–∏–ª—Ü–∞–≥—á:", "value": customer_email or "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π"},
                            {"title": "–ú–µ—Å—Å–µ–∂:", "value": customer_message[:300] + ("..." if len(customer_message) > 300 else "")},
                            {"title": "–¶–∞–≥:", "value": datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
                        ]}
                    ]
                }
            }]
        }
        if ai_analysis:
            teams_payload["attachments"][0]["content"]["body"].append({
                "type": "TextBlock", "text": "ü§ñ AI –¥“Ø–≥–Ω—ç–ª—Ç:", "weight": "Bolder", "size": "Medium", "spacing": "Large"
            })
            teams_payload["attachments"][0]["content"]["body"].append({
                "type": "TextBlock", "text": ai_analysis, "wrap": True, "fontType": "Monospace", "color": "Good"
            })
        teams_payload["attachments"][0]["content"]["actions"] = [
            {"type": "Action.OpenUrl", "title": "Chatwoot –¥—ç—ç—Ä —Ö–∞—Ä–∞—Ö", "url": conv_url}
        ]
        resp = requests.post(TEAMS_WEBHOOK_URL, json=teams_payload)
        resp.raise_for_status()
        return True
    except Exception as e:
        logger.error(f"Teams –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False


# ‚îÄ‚îÄ Flask Routes ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@app.route("/verify", methods=["GET"])
def verify_email():
    """
    /verify?token=<JWT> endpoint:
    - –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –ª–∏–Ω–∫—ç—ç—Ä —Ö–∞–Ω–¥—Å–∞–Ω —Ç–æ—Ö–∏–æ–ª–¥–æ–ª–¥ —Ç–æ–∫–µ–Ω–∏–π —Ö“Ø—á–∏–Ω—Ç—ç–π–≥ —à–∞–ª–≥–∞–∂,
      —Ç—É—Ö–∞–π–Ω –∫–æ–Ω—Ç–∞–∫—Ç –¥—ç—ç—Ä email_verified=true –±–æ–ª–≥–æ–∂ —Ç—ç–º–¥—ç–≥–ª—ç–Ω—ç.
    - –ú”©–Ω Chatwoot —Ä—É—É ‚Äú–∏–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞‚Äù –≥—ç—Å—ç–Ω outgoing –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç–Ω—ç.
    """
    token = request.args.get('token')
    if not token:
        return "–¢–æ–∫–µ–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π!", 400

    payload = verify_token(token)
    if not payload:
        return "–¢–æ–∫–µ–Ω —Ö“Ø—á–∏–Ω —Ç”©–≥”©–ª–¥”©—Ä –±—É—Å —ç—Å–≤—ç–ª —Ö“Ø—á–∏–Ω—Ç—ç–π —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω!", 400

    try:
        conv_id    = payload['conv_id']
        contact_id = payload['contact_id']
        email      = payload['email']

        # Contact –¥—ç—ç—Ä –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω —Ç—ç–º–¥—ç–≥ –Ω—ç–º—ç—Ö
        update_contact(contact_id, {
            "email_verified": "true",
            "verified_email": email,
            "verification_date": datetime.utcnow().isoformat()
        })

        # Chatwoot —Ä—É—É –º—ç–¥—ç–≥–¥—ç—Ö
        send_to_chatwoot(conv_id, f"‚úÖ –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({email}) –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞! –û–¥–æ–æ –±–æ—Ç-—Ç—ç–π —Ö–∞—Ä–∏–ª—Ü–∞–∂ –±–æ–ª–Ω–æ.")

        # –ê–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª—Å–Ω—ã –¥–∞—Ä–∞–∞—Ö HTML —Ö—É—É–¥–∞—Å
        return render_template_string("""
<!DOCTYPE html>
<html>
<head>
    <title>–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        .success { color: #4CAF50; font-size: 28px; margin: 20px 0; font-weight: bold; }
        .info { font-size: 18px; color: #333; }
        .email { font-weight: bold; color: #fff; background: rgba(0,0,0,0.1); padding: 8px; border-radius: 5px; }
    </style>
</head>
<body>
    <div class="success">üéâ –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∞–º–∂–∏–ª—Ç—Ç–∞–π!</div>
    <div class="info">
        –ë–∞—Ç–∞–ª–≥–∞–∞–∂–∏—Ö –∏–º—ç–π–ª —Ö–∞—è–≥:<br>
        <div class="email">{{ email }}</div>
    </div>
    <div class="info">
        ‚úÖ –û–¥–æ–æ —Ç–∞ –±–æ—Ç-—Ç—ç–π —Ö–∞—Ä–∏–ª—Ü–∞–∂ –±–æ–ª–Ω–æ!<br>
        ü§ñ Chatwoot —á–∞—Ç —Ü–æ–Ω—Ö —Ä—É—É –±—É—Ü–∞–∂ –∞—Å—É—É–ª—Ç–∞–∞ –±–∏—á–Ω—ç “Ø“Ø.
    </div>
</body>
</html>
""", email=email)

    except Exception as e:
        logger.error(f"Verification –∞–ª–¥–∞–∞: {e}")
        return "–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞!", 500


@app.route("/webhook", methods=["POST"])
def webhook_handler():
    """
    Chatwoot webhook handler:
    - –ó”©–≤—Ö”©–Ω "incoming" –º–µ—Å—Å–µ–∂—ç–¥ —Ö–∞—Ä–∏—É “Ø–π–ª–¥—ç–ª “Ø–∑“Ø“Ø–ª–Ω—ç.
    - –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–∞–≥“Ø–π –±–æ–ª: "–∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –∏–ª–≥—ç—ç" ‚Üí —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç–Ω –∏–ª–≥—ç—ç—Ö.
    - –ë–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω –±–æ–ª: —ç–Ω–≥–∏–π–Ω echo-–±–æ—Ç –º–∞—è–≥–∞–∞—Ä reply –∏–ª–≥—ç—ç—Ö.
    """
    try:
        data = request.json or {}
        logger.info(f"üîÑ Webhook –∏—Ä–ª—ç—ç: {data.get('message_type', 'unknown')}")

        # –ó”©–≤—Ö”©–Ω ‚Äúincoming‚Äù –º–µ—Å—Å–µ–∂
        if data.get("message_type") != "incoming":
            return jsonify({"status": "skipped - not incoming"}), 200

        # 1) conv_id –±–æ–ª–æ–Ω message_content
        conv_id = data.get("conversation", {}).get("id")
        message_content = (data.get("content") or "").strip()
        logger.info(f"üìù conv_id={conv_id}, content='{message_content}'")

        # 2) contact_id
        contact_id = None
        if data.get("sender") and data["sender"].get("id"):
            contact_id = data["sender"]["id"]

        # –•—ç—Ä–≤—ç—ç contact_id –±–∞–π—Ö–≥“Ø–π –±–æ–ª ‚Üí —ç–Ω–¥ –±–∏–¥ —à–∏–Ω—ç contact “Ø“Ø—Å–≥—ç—Ö–≥“Ø–π,
        # —É—Ç–≥–∞ –Ω—å Chatwoot Inbox –¥—ç—ç—Ä —è–º–∞—Ä –Ω—ç–≥—ç–Ω –∫–æ–Ω—Ç–∞–∫—Ç—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥—Å–æ–Ω –≥—ç–∂ “Ø–∑–Ω—ç.
        if not contact_id:
            # –®–∏–Ω—ç –∫–æ–Ω—Ç–∞–∫—Ç–≥“Ø–π –±–æ–ª —à—É—É–¥ ‚Äú–∏–º—ç–π–ª—ç—ç –±–∏—á‚Äù –≥—ç–∂ —Ö—ç–ª—ç—Ö
            send_to_chatwoot(conv_id,
                "üëã –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! Chatbot –∞—à–∏–≥–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ —ç—Ö–ª—ç—ç–¥ –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É.\n"
                "üìß –ó”©–≤ –∂–∏—à—ç—ç: example@gmail.com")
            return jsonify({"status": "waiting_for_email"}), 200

        # 3) –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω —Å—Ç–∞—Ç—É—Å —à–∞–ª–≥–∞—Ö
        is_verified = False
        verified_email = ""

        # 3.1 Webhook JSON –¥–æ—Ç–æ—Ä contact custom_attributes –¥—É–Ω–¥ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö
        if "conversation" in data and "meta" in data["conversation"] and "sender" in data["conversation"]["meta"]:
            attrs = data["conversation"]["meta"]["sender"].get("custom_attributes", {})
            email_verified_value = attrs.get("email_verified", "")
            verified_email = attrs.get("verified_email", "")
            is_verified = str(email_verified_value).lower() in ["true", "1", "yes"]
            logger.info(f"Webhook-—ç—ç—Å –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª—Å–∞–Ω: {is_verified}, verified_email={verified_email}")

        # 3.2 –•—ç—Ä–≤—ç—ç webhook JSON-–¥ –±–∞–π—Ö–≥“Ø–π –±–æ–ª API-–∞–∞—Ä –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞—Ö
        if not is_verified:
            try:
                contact = get_contact(contact_id)
                attrs = contact.get("custom_attributes", {})
                email_verified_value = attrs.get("email_verified", "")
                verified_email = attrs.get("verified_email", "")
                is_verified = str(email_verified_value).lower() in ["true", "1", "yes"]
                logger.info(f"API-–∞–∞—Å –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª—Å–∞–Ω: {is_verified}, verified_email={verified_email}")
            except Exception as e:
                logger.error(f"‚ùå Contact –∞–≤–∞—Ö –∞–ª–¥–∞–∞: {e}")
                is_verified = False

        # 4) –•—ç—Ä–≤—ç—ç –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–∞–≥“Ø–π –±–æ–ª:
        if not is_verified:
            logger.info("üö´ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç–≥“Ø–π ‚Äì –∏–º—ç–π–ª —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π.")
            # 4.1 –•—ç—Ä–≤—ç—ç –∏—Ä—Å—ç–Ω content –Ω—å email –º–∞—è–≥—Ç–∞–π –±–æ–ª —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç–Ω –∏–º—ç–π–ª —è–≤—É—É–ª–∞—Ö
            if is_valid_email(message_content):
                token = generate_verification_token(message_content, conv_id, contact_id)
                if send_verification_email(message_content, token):
                    send_to_chatwoot(conv_id,
                        f"üìß –¢–∞–Ω—ã –∏–º—ç–π–ª ({message_content}) —Ä“Ø“Ø –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –ª–∏–Ω–∫ –∏–ª–≥—ç—ç–ª—ç—ç.\n"
                        "–ò–º—ç–π–ª—ç—ç —à–∞–ª–≥–∞–∂, –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É. –õ–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω —Ç”©–≥”©–ª–¥”©—Ä–≥“Ø–π –±–æ–ª–Ω–æ.\n"
                        "‚ö†Ô∏è Spam —Ñ–æ–ª–¥–µ—Ä—ã–≥ —à–∞–ª–≥–∞—Ö–∞–∞ –º–∞—Ä—Ç—É—É–∑–∞–π!")
                    logger.info("‚úÖ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∏–º—ç–π–ª –∏–ª–≥—ç—ç–ª—ç—ç.")
                else:
                    send_to_chatwoot(conv_id, "‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.")
                    logger.error("‚ùå –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∏–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞.")
            else:
                # 4.2 –•—ç—Ä–≤—ç—ç email –º–∞—è–≥–≥“Ø–π —Ç–µ–∫—Å—Ç –∏—Ä—Å—ç–Ω –±–æ–ª –∑”©–≤ –∏–º—ç–π–ª —Ö“Ø—Å—ç—Ö
                send_to_chatwoot(conv_id,
                    "üëã –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! Chatbot –∞—à–∏–≥–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ —ç—Ö–ª—ç—ç–¥ –∑”©–≤ –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∏—á—ç—ç–¥ –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø.\n"
                    "üìß –ñ–∏—à—ç—ç: example@gmail.com")
            return jsonify({"status": "waiting_for_verification"}), 200

        # 5) –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª—Å–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç –¥—ç—ç—Ä —ç–Ω–≥–∏–π–Ω ‚Äúecho‚Äù –º–∞—è–≥–∞–∞—Ä —Ö–∞—Ä–∏—É –∏–ª–≥—ç—ç—Ö
        reply_text = f"ü§ñ –ë–æ—Ç —Ö–∞—Ä–∏—É–ª—Ç: \"{message_content}\""
        send_to_chatwoot(conv_id, reply_text)
        logger.info(f"‚úÖ –ë–∞—Ç–∞–ª–≥–∞–∞–∂–∞–≥–¥—Å–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç –¥—ç—ç—Ä —Ö–∞—Ä–∏—É –∏–ª–≥—ç—ç–ª—ç—ç: {reply_text}")

        return jsonify({"status": "success"}), 200

    except Exception as e:
        logger.error(f"üí• Webhook –∞–ª–¥–∞–∞: {e}")
        return jsonify({"status": f"error: {str(e)}"}), 500

if __name__ == "__main__":
    # Debug=True –±–æ–ª –∞–ª–¥–∞–∞ –≥–∞—Ä—Å–∞–Ω “Ø–µ–¥ –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª –≥–∞—Ä–≥–∞–Ω–∞
    app.run(host="0.0.0.0", port=5000, debug=True)
