import os
import time
import requests
import re
import jwt
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
from flask import Flask, request, jsonify, render_template_string
from openai import OpenAI

# RAG —Å–∏—Å—Ç–µ–º–∏–π–Ω –∏–º–ø–æ—Ä—Ç—É—É–¥
import json
import hashlib
from urllib.parse import urljoin, urlparse
from bs4 import BeautifulSoup
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.docstore.document import Document
import pickle

app = Flask(__name__)

# –û—Ä—á–Ω—ã —Ö—É–≤—å—Å–∞–≥—á–∏–¥
OPENAI_API_KEY    = os.environ["OPENAI_API_KEY"]
ASSISTANT_ID      = os.environ["ASSISTANT_ID"]
CHATWOOT_API_KEY  = os.environ["CHATWOOT_API_KEY"]
ACCOUNT_ID        = os.environ["ACCOUNT_ID"]
CHATWOOT_BASE_URL = "https://app.chatwoot.com"

# Email —Ç–æ—Ö–∏—Ä–≥–æ–æ
SMTP_SERVER = os.environ.get("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT = int(os.environ.get("SMTP_PORT", "587"))
SENDER_EMAIL = os.environ["SENDER_EMAIL"]
SENDER_PASSWORD = os.environ["SENDER_PASSWORD"]

# Microsoft Teams —Ç–æ—Ö–∏—Ä–≥–æ–æ
TEAMS_WEBHOOK_URL = os.environ.get("TEAMS_WEBHOOK_URL")
MAX_AI_RETRIES = 2  # AI —Ö—ç–¥—ç–Ω —É–¥–∞–∞ –æ—Ä–æ–ª–¥—Å–æ–Ω—ã –¥–∞—Ä–∞–∞ –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞—Ö

# JWT —Ç–æ—Ö–∏—Ä–≥–æ–æ
JWT_SECRET = os.environ.get("JWT_SECRET", "your-secret-key-here")
VERIFICATION_URL_BASE = os.environ.get("VERIFICATION_URL_BASE", "http://localhost:5000")

# OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=OPENAI_API_KEY)

# RAG —Å–∏—Å—Ç–µ–º —Ç–æ—Ö–∏—Ä–≥–æ–æ
RAG_ENABLED = os.environ.get("RAG_ENABLED", "true").lower() == "true"
VECTOR_STORE_PATH = "cloudmn_vectorstore"
CRAWL_CACHE_FILE = "cloudmn_crawl_cache.json"
CRAWL_MAX_PAGES = int(os.environ.get("CRAWL_MAX_PAGES", "100"))
ESCALATION_THRESHOLD = int(os.environ.get("ESCALATION_THRESHOLD", "3"))  # –•—ç–¥—ç–Ω –∞—Å—É—É–ª—Ç –≥–∞—Ä—Å–Ω—ã –¥–∞—Ä–∞–∞ escalate —Ö–∏–π—Ö

# Global vector store
vector_store = None
embeddings = None

# –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–ª—Ç—ã–Ω —Ç“Ø“Ø—Ö —Ö–∞–¥–≥–∞–ª–∞—Ö (conversation_id -> query_history)
user_query_history = {}
# URL —Ö–∞–¥–≥–∞–ª–∞—Ö —Ö—ç—Å—ç–≥ (conversation_id -> last_urls)
user_last_urls = {}

# RAG —Å–∏—Å—Ç–µ–º–∏–π–≥ —ç—Ö–ª“Ø“Ø–ª—ç—Ö
if RAG_ENABLED:
    try:
        embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)
        if os.path.exists(f"{VECTOR_STORE_PATH}.faiss"):
            vector_store = FAISS.load_local(VECTOR_STORE_PATH, embeddings)
            print("‚úÖ –•–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω vector store-–≥ –∞—á–∞–∞–ª–ª–∞–∞")
        else:
            print("‚ö†Ô∏è Vector store –æ–ª–¥—Å–æ–Ω–≥“Ø–π - —ç—Ö–ª—ç—ç–¥ crawl —Ö–∏–π—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π")
    except Exception as e:
        print(f"‚ùå RAG —Å–∏—Å—Ç–µ–º —ç—Ö–ª“Ø“Ø–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        RAG_ENABLED = False

def is_valid_email(email):
    """–ò–º—ç–π–ª —Ö–∞—è–≥–∏–π–Ω —Ñ–æ—Ä–º–∞—Ç—ã–≥ —à–∞–ª–≥–∞—Ö"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def clean_text(text):
    """–¢–µ–∫—Å—Ç–∏–π–≥ —Ü—ç–≤—ç—Ä–ª—ç—Ö"""
    # –û–ª–æ–Ω –º”©—Ä —à–∏–ª–∂–∏—Ö —Ç—ç–º–¥–≥–∏–π–≥ –Ω—ç–≥ –±–æ–ª–≥–æ—Ö
    text = re.sub(r'\n\s*\n', '\n', text)
    # –û–ª–æ–Ω –∑–∞–π–≥ –Ω—ç–≥ –±–æ–ª–≥–æ—Ö
    text = re.sub(r'\s+', ' ', text)
    return text.strip()

def extract_content_from_url(url, visited_urls=None):
    """–ù—ç–≥ URL-–∞–∞—Å –∫–æ–Ω—Ç–µ–Ω—Ç –∞–≤–∞—Ö"""
    if visited_urls is None:
        visited_urls = set()
    
    if url in visited_urls:
        return None
    
    visited_urls.add(url)
    
    try:
        print(f"üìÑ Crawling: {url}")
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # Title –∞–≤–∞—Ö
        title = soup.find('title')
        title_text = title.get_text().strip() if title else "Untitled"
        
        # Main content –∞–≤–∞—Ö
        content_selectors = [
            'main', 'article', '.content', '#content',
            '.markdown', '.doc-content', '.documentation'
        ]
        
        content = None
        for selector in content_selectors:
            content = soup.select_one(selector)
            if content:
                break
        
        if not content:
            content = soup.find('body')
        
        if not content:
            return None
        
        # Script, style –≥—ç—Ö –º—ç—Ç —ç–ª–µ–º–µ–Ω—Ç“Ø“Ø–¥–∏–π–≥ —É—Å—Ç–≥–∞—Ö
        for element in content(["script", "style", "nav", "header", "footer", "aside"]):
            element.decompose()
        
        # –¢–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∞–≤–∞—Ö
        text_content = content.get_text()
        text_content = clean_text(text_content)
        
        if len(text_content.strip()) < 50:  # –•—ç—Ç –±–æ–≥–∏–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∞–ª–≥–∞—Å–∞—Ö
            return None
        
        return {
            'url': url,
            'title': title_text,
            'content': text_content,
            'length': len(text_content)
        }
        
    except Exception as e:
        print(f"‚ùå Error crawling {url}: {e}")
        return None

def crawl_cloudmn_docs():
    """CloudMN docs —Å–∞–π—Ç—ã–≥ crawl —Ö–∏–π—Ö"""
    base_url = "https://docs.cloud.mn"
    start_urls = [
        "https://docs.cloud.mn/",
    ]
    
    visited_urls = set()
    all_documents = []
    
    # Cache —Ñ–∞–π–ª—ã–≥ —à–∞–ª–≥–∞—Ö
    if os.path.exists(CRAWL_CACHE_FILE):
        try:
            with open(CRAWL_CACHE_FILE, 'r', encoding='utf-8') as f:
                cached_data = json.load(f)
                print(f"‚úÖ Cache-–∞–∞—Å {len(cached_data)} —Ö—É—É–¥–∞—Å –∞—á–∞–∞–ª–ª–∞–∞")
                return cached_data
        except Exception as e:
            print(f"‚ö†Ô∏è Cache —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
    
    print(f"üï∑Ô∏è CloudMN docs crawl —ç—Ö—ç–ª–∂ –±–∞–π–Ω–∞... (Max: {CRAWL_MAX_PAGES} —Ö—É—É–¥–∞—Å)")
    
    urls_to_visit = start_urls.copy()
    page_count = 0
    
    while urls_to_visit and page_count < CRAWL_MAX_PAGES:
        current_url = urls_to_visit.pop(0)
        
        if current_url in visited_urls:
            continue
        
        page_data = extract_content_from_url(current_url, visited_urls)
        if page_data:
            all_documents.append(page_data)
            page_count += 1
            print(f"‚úÖ [{page_count}/{CRAWL_MAX_PAGES}] {page_data['title']}")
            
            # –®–∏–Ω—ç –ª–∏–Ω–∫“Ø“Ø–¥ –æ–ª–æ—Ö
            try:
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
                response = requests.get(current_url, headers=headers, timeout=10)
                soup = BeautifulSoup(response.content, 'html.parser')
                
                for link in soup.find_all('a', href=True):
                    href = link['href']
                    full_url = urljoin(current_url, href)
                    
                    # CloudMN docs –¥–æ—Ç–æ—Ä—Ö –ª–∏–Ω–∫ –º”©–Ω —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
                    if (full_url.startswith(base_url) and 
                        full_url not in visited_urls and 
                        full_url not in urls_to_visit and
                        not full_url.endswith(('.pdf', '.jpg', '.png', '.gif', '.css', '.js'))):
                        urls_to_visit.append(full_url)
                        
            except Exception as e:
                print(f"‚ö†Ô∏è –õ–∏–Ω–∫ –æ–ª–æ—Ö–æ–æ—Ä –∞–ª–¥–∞–∞ {current_url}: {e}")
        
        time.sleep(0.5)  # –°–∞–π—Ç—ã–≥ —Ö—ç—Ç –¥–∞—Ä–∞–º—Ç–ª–∞—Ö–≥“Ø–π–Ω —Ç—É–ª–¥
    
    print(f"‚úÖ Crawl –¥—É—É—Å–ª–∞–∞: {len(all_documents)} —Ö—É—É–¥–∞—Å")
    
    # Cache —Ö–∞–¥–≥–∞–ª–∞—Ö
    try:
        with open(CRAWL_CACHE_FILE, 'w', encoding='utf-8') as f:
            json.dump(all_documents, f, ensure_ascii=False, indent=2)
        print(f"üíæ Cache —Ö–∞–¥–≥–∞–ª–ª–∞–∞: {CRAWL_CACHE_FILE}")
    except Exception as e:
        print(f"‚ö†Ô∏è Cache —Ö–∞–¥–≥–∞–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
    
    return all_documents

def build_vector_store():
    """Vector store “Ø“Ø—Å–≥—ç—Ö"""
    global vector_store, embeddings
    
    if not RAG_ENABLED:
        print("‚ùå RAG –∏–¥—ç–≤—Ö–≥“Ø–π –±–∞–π–Ω–∞")
        return False
    
    try:
        print("üîß Vector store “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")
        
        # –î–æ–∫—É–º–µ–Ω—Ç—É—É–¥ crawl —Ö–∏–π—Ö
        documents_data = crawl_cloudmn_docs()
        
        if not documents_data:
            print("‚ùå Crawl —Ö–∏–π—Ö –¥–æ–∫—É–º–µ–Ω—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            return False
        
        # Text splitter
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200,
            separators=["\n\n", "\n", ". ", "! ", "? ", " "]
        )
        
        # –î–æ–∫—É–º–µ–Ω—Ç—É—É–¥—ã–≥ chunks –±–æ–ª–≥–æ—Ö
        all_chunks = []
        for doc_data in documents_data:
            # –¢–µ–∫—Å—Ç–∏–π–≥ —Ö—ç—Å—ç–≥–ª—ç—Ö
            chunks = text_splitter.split_text(doc_data['content'])
            
            for i, chunk in enumerate(chunks):
                if len(chunk.strip()) > 50:  # –•—ç—Ç –±–æ–≥–∏–Ω–æ chunk –∞–ª–≥–∞—Å–∞—Ö
                    doc = Document(
                        page_content=chunk,
                        metadata={
                            'title': doc_data['title'],
                            'url': doc_data['url'],
                            'chunk_id': i,
                            'total_chunks': len(chunks)
                        }
                    )
                    all_chunks.append(doc)
        
        print(f"üìÑ {len(all_chunks)} —à–∏—Ä—Ö—ç–≥ chunk “Ø“Ø—Å–≥—ç–ª—ç—ç")
        
        if not all_chunks:
            print("‚ùå –ë–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö chunk –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            return False
        
        # Vector store “Ø“Ø—Å–≥—ç—Ö
        if not embeddings:
            embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)
        
        print("üîÆ Embeddings “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")
        vector_store = FAISS.from_documents(all_chunks, embeddings)
        
        # –•–∞–¥–≥–∞–ª–∞—Ö
        vector_store.save_local(VECTOR_STORE_PATH)
        print(f"üíæ Vector store —Ö–∞–¥–≥–∞–ª–ª–∞–∞: {VECTOR_STORE_PATH}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Vector store “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False

def search_cloudmn_docs(query, k=5):
    """CloudMN docs-–∞–∞—Å —Ö–∞–π–ª—Ç —Ö–∏–π—Ö"""
    global vector_store
    
    if not RAG_ENABLED or not vector_store:
        return []
    
    try:
        # Similarity search
        results = vector_store.similarity_search(query, k=k)
        
        search_results = []
        for doc in results:
            search_results.append({
                'content': doc.page_content,
                'title': doc.metadata.get('title', 'Unknown'),
                'url': doc.metadata.get('url', ''),
                'chunk_id': doc.metadata.get('chunk_id', 0)
            })
        
        return search_results
        
    except Exception as e:
        print(f"‚ùå RAG —Ö–∞–π–ª—Ç –∞–ª–¥–∞–∞: {e}")
        return []

def is_similar_query(query1, query2, threshold=0.7):
    """–•–æ—ë—Ä –∞—Å—É—É–ª—Ç—ã–Ω –∏–∂–∏–ª —Ç”©—Ä”©–ª —ç—Å—ç—Ö–∏–π–≥ GPT-—ç—ç—Ä —à–∞–ª–≥–∞—Ö"""
    try:
        system_msg = """–¢–∞ –±–æ–ª –∞—Å—É—É–ª—Ç—ã–Ω –∏–∂–∏–ª —Ç”©—Ä–ª–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω. 
        –•–æ—ë—Ä –∞—Å—É—É–ª—Ç –∏–∂–∏–ª —Ç”©—Ä–ª–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω —Ç–∞–ª–∞–∞—Ä –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–Ω–æ —É—É.
        –ó”©–≤—Ö”©–Ω '–ò–ñ–ò–õ' —ç—Å–≤—ç–ª '”®”®–†–õ”®–ì' –≥—ç–∂ —Ö–∞—Ä–∏—É–ª–Ω–∞ —É—É."""
        
        user_msg = f"""
        –ê—Å—É—É–ª—Ç 1: "{query1}"
        –ê—Å—É—É–ª—Ç 2: "{query2}"
        
        –≠–¥–≥—ç—ç—Ä —Ö–æ—ë—Ä –∞—Å—É—É–ª—Ç –∏–∂–∏–ª —Ç”©—Ä–ª–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω —Ç–∞–ª–∞–∞—Ä –±–∞–π–≥–∞–∞ —é—É?
        - –•—ç—Ä—ç–≤ –∏–∂–∏–ª —Ç”©—Ä–ª–∏–π–Ω —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞—Å—É—É–¥–∞–ª –±–æ–ª: –ò–ñ–ò–õ
        - –•—ç—Ä—ç–≤ ”©”©—Ä —Ç”©—Ä–ª–∏–π–Ω –∞—Å—É—É–¥–∞–ª –±–æ–ª: ”®”®–†–õ”®–ì
        """
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
            max_tokens=10,
            temperature=0.1
        )
        
        result = response.choices[0].message.content.strip()
        return "–ò–ñ–ò–õ" in result
        
    except Exception as e:
        print(f"‚ùå –ê—Å—É—É–ª—Ç —Ö–∞—Ä—å—Ü—É—É–ª–∞—Ö –∞–ª–¥–∞–∞: {e}")
        return False

def should_search_new_content(conv_id, current_query):
    """–®–∏–Ω—ç –∫–æ–Ω—Ç–µ–Ω—Ç —Ö–∞–π—Ö —ç—Å—ç—Ö–∏–π–≥ —à–∏–π–¥—ç—Ö"""
    global user_query_history
    
    # –•—ç—Ä—ç–≤ —ç–Ω—ç conversation-–¥ ”©–º–Ω”© –∞—Å—É—É–ª—Ç –±–∞–π–≥–∞–∞–≥“Ø–π –±–æ–ª —à–∏–Ω—ç —Ö–∞–π–ª—Ç —Ö–∏–π—Ö
    if conv_id not in user_query_history:
        user_query_history[conv_id] = [current_query]
        return True, "–ê–Ω—Ö–Ω—ã –∞—Å—É—É–ª—Ç"
    
    # –°“Ø“Ø–ª–∏–π–Ω –∞—Å—É—É–ª—Ç—Ç–∞–π —Ö–∞—Ä—å—Ü—É—É–ª–∞—Ö
    previous_queries = user_query_history[conv_id]
    last_query = previous_queries[-1] if previous_queries else ""
    
    # –•—ç—Ä—ç–≤ –∏–∂–∏–ª —Ç”©—Ä–ª–∏–π–Ω –∞—Å—É—É–ª—Ç –±–æ–ª —à–∏–Ω—ç —Ö–∞–π–ª—Ç —Ö–∏–π—Ö–≥“Ø–π
    if last_query and is_similar_query(current_query, last_query):
        return False, "–ò–∂–∏–ª —Ç”©—Ä–ª–∏–π–Ω –∞—Å—É—É–ª—Ç"
    
    # –®–∏–Ω—ç —Ç”©—Ä–ª–∏–π–Ω –∞—Å—É—É–ª—Ç –±–æ–ª —Ö–∞–π–ª—Ç —Ö–∏–π—Ö
    user_query_history[conv_id].append(current_query)
    
    # –¢“Ø“Ø—Ö–∏–π–≥ —Ö—è–∑–≥–∞–∞—Ä–ª–∞—Ö (—Å“Ø“Ø–ª–∏–π–Ω 10 –∞—Å—É—É–ª—Ç)
    if len(user_query_history[conv_id]) > 10:
        user_query_history[conv_id] = user_query_history[conv_id][-10:]
    
    return True, "–®–∏–Ω—ç —Ç”©—Ä–ª–∏–π–Ω –∞—Å—É—É–ª—Ç"

def should_escalate_to_support(conv_id, current_message):
    """–î—ç–º–∂–ª—ç–≥–∏–π–Ω –±–∞–≥—Ç –∏–ª–≥—ç—ç—Ö —ç—Å—ç—Ö–∏–π–≥ —à–∏–π–¥—ç—Ö (—Ö—è–∑–≥–∞–∞—Ä–ª–∞–≥–¥—Å–∞–Ω –ª–æ–≥–∏–∫)"""
    global user_query_history
    
    try:
        # –•—ç—Ä—ç–≤ RAG –∏–¥—ç–≤—Ö–≥“Ø–π –±–æ–ª escalate —Ö–∏–π—Ö
        if not RAG_ENABLED:
            return True, "RAG —Å–∏—Å—Ç–µ–º –∏–¥—ç–≤—Ö–≥“Ø–π"
        
        # –ê—Å—É—É–ª—Ç—ã–Ω —Ç–æ–æ–≥ —à–∞–ª–≥–∞—Ö
        query_count = len(user_query_history.get(conv_id, []))
        
        # –•—ç—Ä—ç–≤ —Ç–æ–¥–æ—Ä—Ö–æ–π —Ç–æ–æ–Ω–æ–æ—Å –∏–ª“Ø“Ø –∞—Å—É—É–ª—Ç –≥–∞—Ä—Å–∞–Ω –±–æ–ª escalate —Ö–∏–π—Ö
        if query_count >= ESCALATION_THRESHOLD:
            return True, f"–û–ª–æ–Ω –∞—Å—É—É–ª—Ç –≥–∞—Ä—Å–∞–Ω ({query_count} >= {ESCALATION_THRESHOLD})"
        
        # –¢—É—Å–≥–∞–π —Ç“Ø–ª—Ö“Ø“Ø—Ä “Ø–≥—Å –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        urgent_keywords = [
            "–∞–ª–¥–∞–∞ –≥–∞—Ä—á –±–∞–π–Ω–∞", "–∞–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞", "–±—É—Ä—É—É", "–∞—Å—É—É–¥–∞–ª",
            "—Ç—É—Å–ª–∞–º–∂ —Ö—ç—Ä—ç–≥—Ç—ç–π", "—è–∞—Ä–∞–ª—Ç–∞–π", "—Ö–∞—Ä–∏—É –∏—Ä—ç—Ö–≥“Ø–π", "—Ö–æ–ª–±–æ–≥–¥–æ—Ö–≥“Ø–π"
        ]
        
        message_lower = current_message.lower()
        if any(keyword in message_lower for keyword in urgent_keywords):
            return True, "–Ø–∞—Ä–∞–ª—Ç–∞–π —Ç“Ø–ª—Ö“Ø“Ø—Ä “Ø–≥ –æ–ª–¥—Å–æ–Ω"
        
        # –ë—É—Å–∞–¥ —Ç–æ—Ö–∏–æ–ª–¥–æ–ª–¥ escalate —Ö–∏–π—Ö–≥“Ø–π
        return False, "–•—ç–≤–∏–π–Ω –∞—Å—É—É–ª—Ç"
        
    except Exception as e:
        print(f"‚ùå Escalation —à–∏–π–¥—ç—Ö –∞–ª–¥–∞–∞: {e}")
        return False, "–ê–ª–¥–∞–∞ –≥–∞—Ä—Å–∞–Ω"

def generate_verification_token(email, conv_id, contact_id):
    """–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö JWT —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö"""
    payload = {
        'email': email,
        'conv_id': conv_id,
        'contact_id': contact_id,
        'exp': datetime.utcnow() + timedelta(hours=24)  # 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ –¥—É—É—Å–Ω–∞
    }
    return jwt.encode(payload, JWT_SECRET, algorithm='HS256')

def verify_token(token):
    """JWT —Ç–æ–∫–µ–Ω—ã–≥ —à–∞–ª–≥–∞—Ö"""
    try:
        print(f"üîç verify_token: Starting verification for token: {token[:50]}...")
        print(f"üîë JWT_SECRET: {'SET' if JWT_SECRET and JWT_SECRET != 'your-secret-key-here' else 'DEFAULT/NOT SET'}")
        
        payload = jwt.decode(token, JWT_SECRET, algorithms=['HS256'])
        print(f"‚úÖ JWT decode –∞–º–∂–∏–ª—Ç—Ç–∞–π: {payload}")
        return payload
        
    except jwt.ExpiredSignatureError as e:
        print(f"‚è∞ JWT —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω: {e}")
        return None
    except jwt.InvalidTokenError as e:
        print(f"‚ùå JWT —Ç–æ–∫–µ–Ω –±—É—Ä—É—É: {e}")
        return None
    except Exception as e:
        print(f"üí• verify_token –∞–ª–¥–∞–∞: {e}")
        return None

def send_verification_email(email, token):
    """–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∏–º—ç–π–ª –∏–ª–≥—ç—ç—Ö"""
    try:
        verification_url = f"{VERIFICATION_URL_BASE}/verify?token={token}"
        
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = email
        msg['Subject'] = "–ò–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É"
        
        body = f"""
        –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!
        
        –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥–∏–π–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –¥–æ–æ—Ä—Ö –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É:
        
        {verification_url}
        
        –≠–Ω—ç –ª–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–Ω–æ.
        
        –•—ç—Ä—ç–≤ —Ç–∞ –±–∏—à –±–æ–ª –±–∏–¥—ç–Ω–¥ –º—ç–¥—ç–≥–¥—ç–Ω—ç “Ø“Ø.
        
        –ë–∞—è—Ä–ª–∞–ª–∞–∞!
        """
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        server.send_message(msg)
        server.quit()
        
        return True
    except Exception as e:
        print(f"–ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False

def get_contact(contact_id):
    """Contact –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
    resp = requests.get(url, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def update_contact(contact_id, attrs):
    """Contact-–∏–π–Ω custom attributes —à–∏–Ω—ç—á–ª—ç—Ö"""
    try:
        url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
        payload = {"custom_attributes": attrs}
        headers = {"api_access_token": CHATWOOT_API_KEY}
        
        print(f"üîó Chatwoot API URL: {url}")
        print(f"üîë Using API Key: {CHATWOOT_API_KEY[:10]}..." if CHATWOOT_API_KEY else "‚ùå API Key –±“Ø—Ä –±–∞–π—Ö–≥“Ø–π")
        print(f"üìä Payload: {payload}")
        
        resp = requests.put(url, json=payload, headers=headers)
        
        print(f"üìà Response status: {resp.status_code}")
        print(f"üìÑ Response text: {resp.text[:200]}...")
        
        resp.raise_for_status()
        return resp.json()
        
    except requests.exceptions.HTTPError as e:
        print(f"‚ùå Chatwoot API HTTP –∞–ª–¥–∞–∞: {e}")
        print(f"üìä Response status: {resp.status_code}")
        print(f"üìÑ Response text: {resp.text}")
        raise e
    except Exception as e:
        print(f"üí• Contact update –∞–ª–¥–∞–∞: {e}")
        raise e

def get_conversation(conv_id):
    """Conversation –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
    resp = requests.get(url, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def update_conversation(conv_id, attrs):
    """Conversation-–∏–π–Ω custom attributes —à–∏–Ω—ç—á–ª—ç—Ö"""
    try:
        url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/custom_attributes"
        payload = {"custom_attributes": attrs}
        headers = {"api_access_token": CHATWOOT_API_KEY}
        
        print(f"üîó Conversation API URL: {url}")
        print(f"üìä Payload: {payload}")
        
        resp = requests.post(url, json=payload, headers=headers)
        
        print(f"üìà Response status: {resp.status_code}")
        print(f"üìÑ Response text: {resp.text[:200]}...")
        
        resp.raise_for_status()
        return resp.json()
        
    except requests.exceptions.HTTPError as e:
        print(f"‚ùå Conversation API HTTP –∞–ª–¥–∞–∞: {e}")
        print(f"üìä Response status: {resp.status_code}")
        print(f"üìÑ Response text: {resp.text}")
        raise e
    except Exception as e:
        print(f"üí• Conversation update –∞–ª–¥–∞–∞: {e}")
        raise e

def send_to_chatwoot(conv_id, text):
    """Chatwoot —Ä—É—É –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö"""
    try:
        url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/messages"
        headers = {"api_access_token": CHATWOOT_API_KEY}
        payload = {"content": text, "message_type": "outgoing"}
        
        print(f"üîó Message API URL: {url}")
        print(f"üìä Message payload: {payload}")
        
        r = requests.post(url, json=payload, headers=headers)
        
        print(f"üìà Message response status: {r.status_code}")
        print(f"üìÑ Message response text: {r.text[:200]}...")
        
        r.raise_for_status()
        return r.json()
        
    except requests.exceptions.HTTPError as e:
        print(f"‚ùå Message API HTTP –∞–ª–¥–∞–∞: {e}")
        print(f"üìä Response status: {r.status_code}")
        print(f"üìÑ Response text: {r.text}")
        raise e
    except Exception as e:
        print(f"üí• Message send –∞–ª–¥–∞–∞: {e}")
        raise e

def analyze_customer_issue(thread_id, current_message, customer_email=None):
    """AI –∞—à–∏–≥–ª–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±“Ø—Ö —á–∞—Ç —Ç“Ø“Ø—Ö–∏–π–≥ –¥“Ø–≥–Ω—ç–∂, comprehensive –º—ç–¥—ç—ç–ª—ç–ª ”©–≥”©—Ö"""
    try:
        # OpenAI thread-—Å –±“Ø—Ö –º–µ—Å—Å–µ–∂–∏–π–≥ –∞–≤–∞—Ö
        messages = client.beta.threads.messages.list(thread_id=thread_id, limit=50)
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂“Ø“Ø–¥–∏–π–≥ —Ü—É–≥–ª—É—É–ª–∞—Ö
        conversation_history = []
        for msg in reversed(messages.data):  # –≠—Ö–Ω—ç—ç—Å –Ω—å —ç—Ä—ç–º–±—ç–ª—ç—Ö
            if msg.role == "user":
                content = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        content += content_block.text.value
                if content.strip():
                    conversation_history.append(f"–•—ç—Ä—ç–≥–ª—ç–≥—á: {content.strip()}")
            elif msg.role == "assistant":
                content = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        content += content_block.text.value
                if content.strip():
                    conversation_history.append(f"AI: {content.strip()[:200]}...")  # –•—è–∑–≥–∞–∞—Ä–ª–∞—Ö
        
        # –•—ç—Ä—ç–≤ —á–∞—Ç —Ç“Ø“Ø—Ö —Ö–æ–æ—Å–æ–Ω –±–æ–ª –∑”©–≤—Ö”©–Ω –æ–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂—ç—ç—Ä –¥“Ø–≥–Ω—ç—Ö
        if not conversation_history:
            conversation_history = [f"–•—ç—Ä—ç–≥–ª—ç–≥—á: {current_message}"]
        
        # Conversation —Ç“Ø“Ø—Ö–∏–π–≥ string –±–æ–ª–≥–æ—Ö
        chat_history = "\n".join(conversation_history[-10:])  # –°“Ø“Ø–ª–∏–π–Ω 10 –º–µ—Å—Å–µ–∂
        
        # –ò–ª“Ø“Ø —Ç–æ–¥–æ—Ä—Ö–æ–π system prompt
        system_msg = (
            "–¢–∞ –±–æ–ª –¥—ç–º–∂–ª—ç–≥–∏–π–Ω –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω. "
            "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±“Ø—Ö —á–∞—Ç —Ç“Ø“Ø—Ö–∏–π–≥ —Ö–∞—Ä–∂, –∞—Å—É—É–¥–ª—ã–≥ –∏–∂ –±“Ø—Ä—ç–Ω –¥“Ø–≥–Ω—ç–∂ ”©–≥–Ω”© “Ø“Ø. "
            "–•—ç—Ä—ç–≤ –æ–ª–æ–Ω –∞—Å—É—É–¥–∞–ª –±–∞–π–≤–∞–ª –≥–æ–ª –∞—Å—É—É–¥–ª—ã–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–∂ —Ñ–æ–∫—É—Å–ª–∞–Ω–∞ —É—É."
        )

        # Comprehensive user prompt
        user_msg = f'''
–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —á–∞—Ç —Ç“Ø“Ø—Ö:
{chat_history}

–û–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂: "{current_message}"

–î–∞—Ä–∞–∞—Ö —Ñ–æ—Ä–º–∞—Ç–∞–∞—Ä –±“Ø—Ö —á–∞—Ç —Ç“Ø“Ø—Ö—ç–¥ —Ç—É–ª–≥—É—É—Ä–ª–∞–Ω –¥“Ø–≥–Ω—ç–ª—Ç ”©–≥–Ω”© “Ø“Ø:

–ê–°–£–£–î–õ–´–ù –¢”®–†”®–õ: [–¢–µ—Ö–Ω–∏–∫–∏–π–Ω/–•—É–¥–∞–ª–¥–∞–∞–Ω—ã/–ú—ç–¥—ç—ç–ª–ª–∏–π–Ω/–ì–æ–º–¥–æ–ª]
–Ø–ê–†–ê–õ–¢–ê–ô –ë–ê–ô–î–ê–õ: [”®–Ω–¥”©—Ä/–î—É–Ω–¥/–ë–∞–≥–∞] 
–ê–°–£–£–î–õ–´–ù –¢–û–í–ß –¢–ê–ô–õ–ë–ê–†: [–ì–æ–ª –∞—Å—É—É–¥–ª—ã–≥ 1-2 ”©–≥“Ø“Ø–ª–±—ç—Ä—ç—ç—Ä]
–ß–ê–¢–´–ù –•–≠–í –ú–ê–Ø–ì: [–ê–Ω—Ö–Ω—ã –∞—Å—É—É–ª—Ç/–î–∞–≥–∞–ª–¥–∞—Ö –∞—Å—É—É–ª—Ç/–ì–æ–º–¥–æ–ª/–¢–æ–¥—Ä—É—É–ª–≥–∞ —Ö“Ø—Å—ç—Ö]
–®–ê–ê–†–î–õ–ê–ì–ê–¢–ê–ô –ê–†–ì–ê –•–≠–ú–ñ–≠–≠: [–¢–æ–¥–æ—Ä—Ö–æ–π –∞—Ä–≥–∞ —Ö—ç–º–∂—ç—ç]
–•“Æ–õ–≠–≠–ì–î–≠–ñ –ë–£–ô –•–ê–†–ò–£–õ–¢: [–•—ç—Ä—ç–≥–ª—ç–≥—á —è–º–∞—Ä —Ö–∞—Ä–∏—É–ª—Ç —Ö“Ø–ª—ç—ç–∂ –±–∞–π–≥–∞–∞]
–î“Æ–ì–ù–≠–õ–¢: [–ï—Ä”©–Ω—Ö–∏–π “Ø–Ω—ç–ª–≥—ç—ç –±–∞ –∑”©–≤–ª”©–º–∂]
'''

        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
            max_tokens=500,
            temperature=0.2
        )

        return response.choices[0].message.content.strip()

    except Exception as e:
        print(f"‚ùå –ê—Å—É—É–¥–∞–ª –¥“Ø–≥–Ω—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return f"–ê—Å—É—É–¥–∞–ª –¥“Ø–≥–Ω—ç—Ö –±–æ–ª–æ–º–∂–≥“Ø–π. –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –æ–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂: {current_message}"

def send_teams_notification(conv_id, customer_message, customer_email=None, escalation_reason="–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–∞–ª", ai_analysis=None):
    """Microsoft Teams —Ä—É—É —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω —Ç–∞–ª–∞–∞—Ä –∞–∂–∏–ª—Ç–∞–Ω–¥ –º—ç–¥—ç—ç–ª—ç—Ö"""
    if not TEAMS_WEBHOOK_URL:
        print("‚ö†Ô∏è Teams webhook URL —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞")
        return False
    
    try:
        # Chatwoot conversation URL
        conv_url = f"{CHATWOOT_BASE_URL}/app/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
        
        # AI –∞—Å—É—É–¥–ª—ã–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª –±—ç–ª—Ç–≥—ç—Ö
        error_summary = escalation_reason
        if ai_analysis:
            error_summary += f"\n\n–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –∞–Ω–∞–ª–∏–∑: {ai_analysis}"
        
        # Teams message format
        teams_message = {
            "type": "message",
            "attachments": [{
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                    "type": "AdaptiveCard",
                    "version": "1.3",
                    "body": [
                        {
                            "type": "TextBlock",
                            "text": "üìã –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç",
                            "weight": "Bolder",
                            "size": "Medium",
                            "color": "Attention"
                        },
                        {
                            "type": "TextBlock",
                            "text": "AI —Å–∏—Å—Ç–µ–º —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂, –∞–∂–∏–ª—Ç–Ω—ã –∞–Ω—Ö–∞–∞—Ä–∞–ª —Ç–∞—Ç–∞—Ö—É–π—Ü –∞—Å—É—É–¥–∞–ª –≥—ç–∂ “Ø–∑—ç–∂ –±–∞–π–Ω–∞.",
                            "wrap": True,
                            "color": "Default"
                        },
                        {
                            "type": "FactSet",
                            "facts": [
                                {
                                    "title": "–•–∞—Ä–∏–ª—Ü–∞–≥—á:",
                                    "value": customer_email or "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π"
                                },
                                {
                                    "title": "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂:",
                                    "value": customer_message[:300] + ("..." if len(customer_message) > 300 else "")
                                },
                                {
                                    "title": "–•—É–≥–∞—Ü–∞–∞:",
                                    "value": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                                }
                            ]
                        }
                    ]
                }
            }]
        }
        
        # AI –¥“Ø–≥–Ω—ç–ª—Ç –Ω—ç–º—ç—Ö
        if ai_analysis:
            teams_message["attachments"][0]["content"]["body"].append({
                "type": "TextBlock",
                "text": "ü§ñ AI –î“Ø–≥–Ω—ç–ª—Ç:",
                "weight": "Bolder",
                "size": "Medium",
                "spacing": "Large"
            })
            teams_message["attachments"][0]["content"]["body"].append({
                "type": "TextBlock",
                "text": ai_analysis,
                "wrap": True,
                "fontType": "Monospace",
                "color": "Good"
            })
        
        # Actions –Ω—ç–º—ç—Ö
        teams_message["attachments"][0]["content"]["actions"] = [
            {
                "type": "Action.OpenUrl",
                "title": "Chatwoot –¥—ç—ç—Ä —Ö–∞—Ä–∞—Ö",
                "url": conv_url
            }
        ]
        
        response = requests.post(TEAMS_WEBHOOK_URL, json=teams_message)
        response.raise_for_status()
        print(f"‚úÖ Teams —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç–ª—ç—ç: {escalation_reason}")
        return True
        
    except Exception as e:
        print(f"‚ùå Teams –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False

def get_ai_response(thread_id, message_content, conv_id=None, customer_email=None, retry_count=0):
    """OpenAI Assistant-—ç—ç—Å —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö"""
    try:
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂–∏–π–≥ thread —Ä—É—É –Ω—ç–º—ç—Ö
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=message_content
        )

        # Assistant run “Ø“Ø—Å–≥—ç—Ö
        run = client.beta.threads.runs.create(
            thread_id=thread_id, 
            assistant_id=ASSISTANT_ID
        )

        # Run –¥—É—É—Å–∞—Ö—ã–≥ —Ö“Ø–ª—ç—ç—Ö
        max_wait = 30
        wait_count = 0
        while wait_count < max_wait:
            run_status = client.beta.threads.runs.retrieve(
                thread_id=thread_id, 
                run_id=run.id
            )
            
            if run_status.status == "completed":
                break
            elif run_status.status in ["failed", "cancelled", "expired"]:
                error_msg = "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
                
                # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
                if retry_count == 0 and conv_id:
                    send_teams_notification(
                        conv_id, 
                        message_content, 
                        customer_email, 
                        f"AI run —Å—Ç–∞—Ç—É—Å –∞–ª–¥–∞–∞: {run_status.status}",
                        f"OpenAI run ID: {run.id}, Status: {run_status.status}"
                    )
                
                return error_msg
                
            time.sleep(1)
            wait_count += 1

        if wait_count >= max_wait:
            timeout_msg = "–•–∞—Ä–∏—É–ª–∞—Ö–∞–¥ —Ö—ç—Ç —É–¥–∞–∂ –±–∞–π–Ω–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
            
            # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω timeout –±–æ–ª)
            if retry_count == 0 and conv_id:
                send_teams_notification(
                    conv_id, 
                    message_content, 
                    customer_email, 
                    "AI —Ö–∞—Ä–∏—É–ª—Ç timeout (30 —Å–µ–∫—É–Ω–¥)",
                    f"OpenAI run ID: {run.id}, Thread ID: {thread_id}"
                )
            
            return timeout_msg

        # Assistant-–∏–π–Ω —Ö–∞—Ä–∏—É–ª—å—Ç—ã–≥ –∞–≤–∞—Ö
        messages = client.beta.threads.messages.list(thread_id=thread_id)
        
        for msg in messages.data:
            if msg.role == "assistant":
                reply = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        reply += content_block.text.value
                return reply

        # –•–∞—Ä–∏—É–ª—Ç –æ–ª–¥–æ—Ö–≥“Ø–π
        no_response_msg = "–•–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
        
        # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
        if retry_count == 0 and conv_id:
            send_teams_notification(
                conv_id, 
                message_content, 
                customer_email, 
                "AI —Ö–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π",
                f"Thread ID: {thread_id}, Messages —Ö–∞–π–ª—Ç–∞–¥ —Ö–∞—Ä–∏—É–ª—Ç –±–∞–π—Ö–≥“Ø–π"
            )
        
        return no_response_msg
        
    except Exception as e:
        print(f"AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
        error_msg = "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
        
        # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
        if retry_count == 0 and conv_id:
            send_teams_notification(
                conv_id, 
                message_content, 
                customer_email, 
                "AI —Å–∏—Å—Ç–µ–º–∏–π–Ω –∞–ª–¥–∞–∞ (Exception)",
                f"Python exception: {str(e)}, Thread ID: {thread_id}"
            )
        
        return error_msg

def get_ai_response_with_rag(thread_id, message_content, conv_id=None, customer_email=None, retry_count=0):
    """RAG —Å–∏—Å—Ç–µ–º—Ç—ç–π AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö"""
    global user_last_urls
    
    try:
        # CloudMN docs-–∞–∞—Å —Ö–æ–ª–±–æ–≥–¥–æ—Ö –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞–π—Ö
        rag_context = ""
        used_urls = []
        
        if RAG_ENABLED and vector_store and conv_id:
            # –®–∏–Ω—ç –∫–æ–Ω—Ç–µ–Ω—Ç —Ö–∞–π—Ö —ç—Å—ç—Ö–∏–π–≥ —à–∏–π–¥—ç—Ö
            should_search, search_reason = should_search_new_content(conv_id, message_content)
            print(f"üîç –•–∞–π–ª—Ç —à–∏–π–¥–≤—ç—Ä: {should_search} - {search_reason}")
            
            if should_search:
                # –®–∏–Ω—ç —Ö–∞–π–ª—Ç —Ö–∏–π—Ö
                search_results = search_cloudmn_docs(message_content, k=3)
                if search_results:
                    print(f"üìö {len(search_results)} “Ø—Ä –¥“Ø–Ω –æ–ª–¥–ª–æ–æ")
                    rag_context = "\n\nCloudMN –±–∞—Ä–∏–º—Ç –±–∏—á–≥—ç—ç—Å –æ–ª—Å–æ–Ω —Ö–æ–ª–±–æ–≥–¥–æ—Ö –º—ç–¥—ç—ç–ª—ç–ª:\n"
                    
                    # URL —Ü—É–≥–ª—É—É–ª–∞—Ö
                    new_urls = []
                    for i, result in enumerate(search_results, 1):
                        rag_context += f"\n{i}. {result['title']} - {result['url']}\n{result['content'][:500]}...\n"
                        if result['url'] and result['url'] not in new_urls:
                            new_urls.append(result['url'])
                    
                    # URL —Ö–∞–¥–≥–∞–ª–∞—Ö
                    user_last_urls[conv_id] = new_urls
                    used_urls = new_urls
                    print(f"üîó –®–∏–Ω—ç URL —Ö–∞–¥–≥–∞–ª–ª–∞–∞: {len(new_urls)} —à–∏—Ä—Ö—ç–≥")
                else:
                    print("‚ùå –•–∞–π–ª—Ç—ã–Ω “Ø—Ä –¥“Ø–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            else:
                # ”®–º–Ω”©—Ö URL –∞—à–∏–≥–ª–∞—Ö
                if conv_id in user_last_urls and user_last_urls[conv_id]:
                    used_urls = user_last_urls[conv_id]
                    print(f"üîó ”®–º–Ω”©—Ö URL –∞—à–∏–≥–ª–∞–∂ –±–∞–π–Ω–∞: {len(used_urls)} —à–∏—Ä—Ö—ç–≥")
                    
                    # ”®–º–Ω”©—Ö –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –¥—É—Ä–¥–∞—Ö
                    rag_context = f"\n\n–¢–∞ ”©–º–Ω”© –¥–∞—Ä–∞–∞—Ö CloudMN —Ö—É—É–¥—Å—É—É–¥—ã–≥ “Ø–∑—ç–∂ –±–æ–ª–Ω–æ:\n"
                    for i, url in enumerate(used_urls[:3], 1):
                        rag_context += f"{i}. {url}\n"
                else:
                    print("‚ö†Ô∏è ”®–º–Ω”©—Ö URL –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
        
        # Assistant-–¥ –º—ç–¥—ç—ç–ª—ç–ª –¥–∞–º–∂—É—É–ª–∞—Ö
        enhanced_message = message_content
        if rag_context:
            enhanced_message += rag_context
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂–∏–π–≥ thread —Ä—É—É –Ω—ç–º—ç—Ö
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=enhanced_message
        )

        # Assistant run “Ø“Ø—Å–≥—ç—Ö
        run = client.beta.threads.runs.create(
            thread_id=thread_id, 
            assistant_id=ASSISTANT_ID
        )

        # Run –¥—É—É—Å–∞—Ö—ã–≥ —Ö“Ø–ª—ç—ç—Ö
        max_wait = 30
        wait_count = 0
        while wait_count < max_wait:
            run_status = client.beta.threads.runs.retrieve(
                thread_id=thread_id, 
                run_id=run.id
            )
            
            if run_status.status == "completed":
                break
            elif run_status.status in ["failed", "cancelled", "expired"]:
                error_msg = "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
                
                # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
                if retry_count == 0 and conv_id:
                    send_teams_notification(
                        conv_id, 
                        message_content, 
                        customer_email, 
                        f"AI run —Å—Ç–∞—Ç—É—Å –∞–ª–¥–∞–∞: {run_status.status}",
                        f"OpenAI run ID: {run.id}, Status: {run_status.status}"
                    )
                
                return error_msg
                
            time.sleep(1)
            wait_count += 1

        if wait_count >= max_wait:
            timeout_msg = "–•–∞—Ä–∏—É–ª–∞—Ö–∞–¥ —Ö—ç—Ç —É–¥–∞–∂ –±–∞–π–Ω–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
            
            # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω timeout –±–æ–ª)
            if retry_count == 0 and conv_id:
                send_teams_notification(
                    conv_id, 
                    message_content, 
                    customer_email, 
                    "AI —Ö–∞—Ä–∏—É–ª—Ç timeout (30 —Å–µ–∫—É–Ω–¥)",
                    f"OpenAI run ID: {run.id}, Thread ID: {thread_id}"
                )
            
            return timeout_msg

        # Assistant-–∏–π–Ω —Ö–∞—Ä–∏—É–ª—å—Ç—ã–≥ –∞–≤–∞—Ö
        messages = client.beta.threads.messages.list(thread_id=thread_id)
        
        for msg in messages.data:
            if msg.role == "assistant":
                reply = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        reply += content_block.text.value
                        
                # URL-—ã–≥ —Ö–∞—Ä–∏—É–ª—Ç—ã–Ω —Ç”©–≥—Å–≥”©–ª–¥ –Ω—ç–º—ç—Ö
                if used_urls and conv_id:
                    reply += f"\n\nüìã –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö –±–æ–ª –¥–∞—Ä–∞–∞—Ö —Ö—É—É–¥—Å—É—É–¥—ã–≥ “Ø–∑—ç–∂ –±–æ–ª–Ω–æ:\n"
                    for url in used_urls[:3]:  # –≠—Ö–Ω–∏–π 3-—ã–≥ —Ö–∞—Ä—É—É–ª–∞—Ö
                        reply += f"‚Ä¢ {url}\n"
                        
                return reply

        # –•–∞—Ä–∏—É–ª—Ç –æ–ª–¥–æ—Ö–≥“Ø–π
        no_response_msg = "–•–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
        
        # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
        if retry_count == 0 and conv_id:
            send_teams_notification(
                conv_id, 
                message_content, 
                customer_email, 
                "AI —Ö–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π",
                f"Thread ID: {thread_id}, Messages —Ö–∞–π–ª—Ç–∞–¥ —Ö–∞—Ä–∏—É–ª—Ç –±–∞–π—Ö–≥“Ø–π"
            )
        
        return no_response_msg
        
    except Exception as e:
        print(f"AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
        error_msg = "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
        
        # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
        if retry_count == 0 and conv_id:
            send_teams_notification(
                conv_id, 
                message_content, 
                customer_email, 
                "AI —Å–∏—Å—Ç–µ–º–∏–π–Ω –∞–ª–¥–∞–∞ (Exception)",
                f"Python exception: {str(e)}, Thread ID: {thread_id}"
            )
        
        return error_msg

@app.route("/verify", methods=["GET"])
def verify_email():
    print("üì© /verify –¥—É—É–¥–ª–∞–∞")

    token = request.args.get('token')
    if not token:
        return "‚ùå –¢–æ–∫–µ–Ω –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞!", 400

    payload = verify_token(token)
    if not payload:
        return "‚ùå –¢–æ–∫–µ–Ω —Ö“Ø—á–∏–Ω–≥“Ø–π —ç—Å–≤—ç–ª —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω –±–∞–π–Ω–∞!", 400

    try:
        contact_id = payload['contact_id']
        email = payload['email']
        conv_id = payload.get('conv_id', None)

        # ‚úÖ –ó”©–≤—Ö”©–Ω Contact-–≥ verified —Ç—ç–º–¥—ç–≥–ª—ç—Ö
        update_result = update_contact(contact_id, {
            "email_verified": "1",
            "verified_email": email,
            "verification_date": datetime.utcnow().isoformat()
        })
        print(f"‚úÖ Contact update: {update_result}")

        # ‚úÖ –•—ç—Ä—ç–≤ conv_id –±–∞–π–≥–∞–∞ –±–æ–ª —Ç—ç—Ä conversation –¥—ç—ç—Ä –∞–º–∂–∏–ª—Ç—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö
        if conv_id:
            send_to_chatwoot(conv_id, f"‚úÖ –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({email}) –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞! –û–¥–æ–æ chatbot-—Ç–æ–π —Ö–∞—Ä–∏–ª—Ü–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π –±–æ–ª–ª–æ–æ.")

        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                .success { color: green; font-size: 24px; margin: 20px 0; }
                .info { color: #666; font-size: 16px; }
            </style>
        </head>
        <body>
            <div class="success">‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞!</div>
            <div class="info">–¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({{ email }}) –±–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω –±–∞–π–Ω–∞.<br>–û–¥–æ–æ —Ç–∞ chatbot-—Ç–æ–π —Ö–∞—Ä–∏–ª—Ü–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π –±–æ–ª–ª–æ–æ.</div>
        </body>
        </html>
        """, email=email)

    except Exception as e:
        import traceback
        traceback.print_exc()
        return f"‚ùå –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}", 500

@app.route("/webhook", methods=["POST"])
def webhook():
    """Chatwoot webhook handler - –±“Ø—Ä—ç–Ω —à–∏–Ω—ç –ª–æ–≥–∏–∫"""
    try:
        data = request.json
        print(f"üîÑ Webhook received: {data.get('message_type', 'unknown')}")
        
        # –ó”©–≤—Ö”©–Ω incoming –º–µ—Å—Å–µ–∂ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö
        if data.get("message_type") != "incoming":
            print("‚è≠Ô∏è Skipping: not incoming message")
            return jsonify({"status": "skipped - not incoming"}), 200

        # “Æ–Ω–¥—Å—ç–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
        conv_id = data["conversation"]["id"]
        message_content = data.get("content", "").strip()
        
        print(f"üìù Conv ID: {conv_id}, Message: '{message_content}'")
        
        # Contact ID –æ–ª–æ—Ö
        contact_id = None
        if "sender" in data and data["sender"]:
            contact_id = data["sender"].get("id")
        
        if not contact_id:
            print("‚ùå Contact ID –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            send_to_chatwoot(conv_id, "–ê–ª–¥–∞–∞: –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
            return jsonify({"status": "error - no contact"}), 400

        print(f"üë§ Contact ID: {contact_id}")

        # ========== –ë–ê–¢–ê–õ–ì–ê–ê–ñ–£–£–õ–ê–õ–¢ –®–ê–õ–ì–ê–• ==========
        print("üîç –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
        
        # Contact-–∏–π–Ω custom attributes –∞–≤–∞—Ö (webhook-—ç—ç—Å —à—É—É–¥)
        is_verified = False
        verified_email = ""
        
        # Webhook –¥–æ—Ç–æ—Ä contact –º—ç–¥—ç—ç–ª—ç–ª –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        if "conversation" in data and "meta" in data["conversation"] and "sender" in data["conversation"]["meta"]:
            sender_meta = data["conversation"]["meta"]["sender"]
            if "custom_attributes" in sender_meta:
                contact_attrs = sender_meta["custom_attributes"]
                email_verified_value = contact_attrs.get("email_verified", "")
                verified_email = contact_attrs.get("verified_email", "")
                
                # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç —à–∞–ª–≥–∞—Ö
                is_verified = str(email_verified_value).lower() in ["true", "1", "yes"]
                
                print(f"üìä Webhook-—ç—ç—Å –∞–≤—Å–∞–Ω: email_verified='{email_verified_value}', verified_email='{verified_email}'")
                print(f"‚úÖ Is verified: {is_verified}")
        
        # –•—ç—Ä—ç–≤ webhook –¥—ç—ç—Ä –±–∞–π—Ö–≥“Ø–π –±–æ–ª API-–∞–∞—Ä –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞—Ö
        if not is_verified:
            print("üîç API-–∞–∞—Ä –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
            try:
                contact = get_contact(contact_id)
                contact_attrs = contact.get("custom_attributes", {})
                email_verified_value = contact_attrs.get("email_verified", "")
                verified_email = contact_attrs.get("verified_email", "")
                
                is_verified = str(email_verified_value).lower() in ["true", "1", "yes"]
                print(f"üìä API-–∞–∞—Å –∞–≤—Å–∞–Ω: email_verified='{email_verified_value}', verified_email='{verified_email}'")
                print(f"‚úÖ Is verified: {is_verified}")
            except Exception as e:
                print(f"‚ùå API –∞–ª–¥–∞–∞: {e}")
                is_verified = False

        # ========== –ë–ê–¢–ê–õ–ì–ê–ê–ñ–£–£–õ–ê–õ–¢–´–ù “Æ–ô–õ–î–≠–õ ==========
        if not is_verified:
            print("üö´ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–∞–≥“Ø–π - –∏–º—ç–π–ª —à–∞–∞—Ä–¥–∞–∂ –±–∞–π–Ω–∞")
            
            # –ò–º—ç–π–ª —Ö–∞—è–≥ —à–∞–ª–≥–∞—Ö
            if is_valid_email(message_content):
                print(f"üìß –ó”©–≤ –∏–º—ç–π–ª: {message_content}")
                
                # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö
                token = generate_verification_token(message_content, conv_id, contact_id)
                
                # –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö
                if send_verification_email(message_content, token):
                    send_to_chatwoot(conv_id, 
                        f"üìß –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({message_content}) —Ä“Ø“Ø –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –ª–∏–Ω–∫ –∏–ª–≥—ç—ç–ª—ç—ç.\n\n"
                        "–ò–º—ç–π–ª—ç—ç —à–∞–ª–≥–∞–∞–¥ –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É. –õ–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–Ω–æ.\n\n"
                        "‚ö†Ô∏è Spam —Ñ–æ–ª–¥–µ—Ä—ã–≥ —à–∞–ª–≥–∞—Ö–∞–∞ –º–∞—Ä—Ç—É—É–∑–∞–π!")
                    print("‚úÖ –ò–º—ç–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç")
                else:
                    send_to_chatwoot(conv_id, "‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.")
                    print("‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞")
            else:
                print(f"‚ùå –ë—É—Ä—É—É –∏–º—ç–π–ª —Ñ–æ—Ä–º–∞—Ç: '{message_content}'")
                send_to_chatwoot(conv_id, 
                    "üëã –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! Chatbot –∞—à–∏–≥–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ —ç—Ö–ª—ç—ç–¥ –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É.\n\n"
                    "üìß –ó”©–≤ –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∏—á—ç—ç–¥ –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø.\n"
                    "–ñ–∏—à—ç—ç: example@gmail.com")
            
            return jsonify({"status": "waiting_verification"}), 200

        # ========== AI CHATBOT –ê–ñ–ò–õ–õ–£–£–õ–ê–• ==========
        print(f"ü§ñ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á ({verified_email}) - AI chatbot –∞–∂–∏–ª–ª—É—É–ª–∂ –±–∞–π–Ω–∞")
        
        # Thread –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
        conv = get_conversation(conv_id)
        conv_attrs = conv.get("custom_attributes", {})
        
        thread_key = f"openai_thread_{contact_id}"
        thread_id = conv_attrs.get(thread_key)
        
        # Thread —à–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        if not thread_id:
            print("üßµ –®–∏–Ω—ç thread “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")
            thread = client.beta.threads.create()
            thread_id = thread.id
            update_conversation(conv_id, {thread_key: thread_id})
            print(f"‚úÖ Thread “Ø“Ø—Å–≥—ç–ª—ç—ç: {thread_id}")
        else:
            print(f"‚úÖ –û–¥–æ–æ –±–∞–π–≥–∞–∞ thread –∞—à–∏–≥–ª–∞–∂ –±–∞–π–Ω–∞: {thread_id}")

        # AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö (retry logic-—Ç–æ–π)
        print("ü§ñ AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤—á –±–∞–π–Ω–∞...")
        
        retry_count = 0
        ai_response = None
        
        while retry_count <= MAX_AI_RETRIES:
            ai_response = get_ai_response_with_rag(thread_id, message_content, conv_id, verified_email, retry_count)
            
            # –•—ç—Ä—ç–≤ –∞–ª–¥–∞–∞—Ç–∞–π —Ö–∞—Ä–∏—É–ª—Ç –±–∏—à –±–æ–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π
            if not any(error_phrase in ai_response for error_phrase in [
                "–∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", "—Ö—ç—Ç —É–¥–∞–∂ –±–∞–π–Ω–∞", "–æ–ª–¥—Å–æ–Ω–≥“Ø–π"
            ]):
                break
                
            retry_count += 1
            if retry_count <= MAX_AI_RETRIES:
                print(f"üîÑ AI –¥–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–∂ –±–∞–π–Ω–∞... ({retry_count}/{MAX_AI_RETRIES})")
                time.sleep(2)  # 2 —Å–µ–∫—É–Ω–¥ —Ö“Ø–ª—ç—ç—Ö
        
        # –•—ç—Ä—ç–≤ –±“Ø—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ –±“Ø—Ç—ç–ª–≥“Ø–π—Ç–≤—ç–ª –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞—Ö
        if retry_count > MAX_AI_RETRIES:
            print("‚ùå AI-–∏–π–Ω –±“Ø—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ –±“Ø—Ç—ç–ª–≥“Ø–π—Ç—ç–≤ - –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∂ –±–∞–π–Ω–∞")
            
            send_teams_notification(
                conv_id, 
                message_content, 
                verified_email, 
                f"AI {MAX_AI_RETRIES + 1} —É–¥–∞–∞ –¥–∞—Ä–∞–∞–ª–∞–Ω –∞–ª–¥–∞–∞ –≥–∞—Ä–≥–∞–ª–∞–∞",
                f"Thread ID: {thread_id}, –ë“Ø—Ö retry –æ—Ä–æ–ª–¥–ª–æ–≥–æ –±“Ø—Ç—ç–ª–≥“Ø–π—Ç—ç–≤"
            )
            
            ai_response = (
                "üö® –£—É—á–ª–∞–∞—Ä–∞–π, —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞—Å—É—É–¥–∞–ª –≥–∞—Ä–ª–∞–∞.\n\n"
                "–ë–∏ —Ç–∞–Ω—ã –∞—Å—É—É–ª—Ç—ã–≥ —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –±–∞–≥—Ç –¥–∞–º–∂—É—É–ª–∞–∞. –£–¥–∞—Ö–≥“Ø–π –∞—Å—É—É–¥–ª—ã–≥ —à–∏–π–¥—ç–∂, —Ç–∞–Ω–¥ —Ö–∞—Ä–∏—É–ª—Ç ”©–≥”©—Ö –±–æ–ª–Ω–æ.\n\n"
                "üïê –¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø..."
            )
        
        # Chatwoot —Ä—É—É –∏–ª–≥—ç—ç—Ö
        send_to_chatwoot(conv_id, ai_response)
        print(f"‚úÖ AI —Ö–∞—Ä–∏—É–ª—Ç –∏–ª–≥—ç—ç–ª—ç—ç: {ai_response[:50]}...")
        
        # AI –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞—Ä–∏—É–ª—Ç ”©–≥—Å–Ω–∏–π –¥–∞—Ä–∞–∞ –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂ Teams-—ç—ç—Ä –º—ç–¥—ç—ç–ª—ç—Ö
        if retry_count <= MAX_AI_RETRIES:  # –ó”©–≤—Ö”©–Ω –∞–º–∂–∏–ª—Ç—Ç–∞–π AI —Ö–∞—Ä–∏—É–ª—Ç “Ø–µ–¥
            print("üîç Teams-–¥ –∏–ª–≥—ç—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
            
            # –®–∏–Ω—ç –∞—Å—É—É–¥–∞–ª –º”©–Ω —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
            should_escalate, reason = should_escalate_to_support(conv_id, message_content)
            
            if should_escalate:
                print(f"‚úÖ {reason} - Teams-–¥ –∏–ª–≥—ç—ç—Ö")
                try:
                    # AI-—ç—ç—Ä –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç—Ö
                    analysis = analyze_customer_issue(thread_id, message_content, verified_email)
                    print(f"‚úÖ –î“Ø–≥–Ω—ç–ª—Ç –±—ç–ª—ç–Ω: {analysis[:100]}...")
                    
                    # Teams-—ç—ç—Ä –º—ç–¥—ç—ç–ª—ç—Ö
                    send_teams_notification(
                        conv_id,
                        message_content,
                        verified_email,
                        f"–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç - {reason}",
                        analysis
                    )
                    print("‚úÖ –ê—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç –∞–∂–∏–ª—Ç–∞–Ω–¥ –∏–ª–≥—ç—ç–ª—ç—ç")
                    
                except Exception as e:
                    print(f"‚ùå –ê—Å—É—É–¥–∞–ª –¥“Ø–≥–Ω—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
            else:
                print(f"‚è≠Ô∏è {reason} - Teams-–¥ –∏–ª–≥—ç—ç—Ö–≥“Ø–π")
        
        return jsonify({"status": "success"}), 200

    except Exception as e:
        print(f"üí• Webhook –∞–ª–¥–∞–∞: {e}")
        return jsonify({"status": f"error: {str(e)}"}), 500

@app.route("/test-teams", methods=["GET"])
def test_teams():
    """Teams webhook —Ç–µ—Å—Ç —Ö–∏–π—Ö"""
    if not TEAMS_WEBHOOK_URL:
        return jsonify({"error": "TEAMS_WEBHOOK_URL —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞"}), 400
    
    try:
        # –¢–µ—Å—Ç –¥“Ø–≥–Ω—ç–ª—Ç “Ø“Ø—Å–≥—ç—Ö
        test_analysis = """–ê–°–£–£–î–õ–´–ù –¢”®–†”®–õ : Teams –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π–Ω —Ç–µ—Å—Ç
–Ø–ê–†–ê–õ–¢–ê–ô –ë–ê–ô–î–ê–õ: –ë–∞–≥–∞
–ê–°–£–£–î–õ–´–ù –¢–û–í–ß –¢–ê–ô–õ–ë–ê–†: –°–∏—Å—Ç–µ–º –∑”©–≤”©”©—Ä –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö –∑–æ—Ä–∏–ª–≥–æ—Ç–æ–π —Ç–µ—Å—Ç –º—ç–¥—ç—ç–ª—ç–ª.
–®–ê–ê–†–î–õ–ê–ì–ê–¢–ê–ô –ê–†–ì–ê –•–≠–ú–ñ–≠–≠: Teams –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞–∂–∏–ª—Ç–∞–Ω —Ö–∞—Ä–∂, —Å–∏—Å—Ç–µ–º—Ç—ç–π —Ç–∞–Ω–∏–ª—Ü–∞—Ö
–•“Æ–õ–≠–≠–ì–î–≠–ñ –ë–£–ô –•–ê–†–ò–£–õ–¢: "–¢–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π" –≥—ç—Å—ç–Ω –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç"""
        
        # –¢–µ—Å—Ç –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö
        success = send_teams_notification(
            conv_id="test_123",
            customer_message="–≠–Ω—ç —Ç–µ—Å—Ç –º—ç–¥—ç—ç–ª—ç–ª —é–º. Teams —Ö–æ–ª–±–æ–ª—Ç –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞.",
            customer_email="test@example.com",
            escalation_reason="Teams webhook —Ç–µ—Å—Ç",
            ai_analysis=test_analysis
        )
        
        if success:
            return jsonify({"status": "success", "message": "Teams –º—ç–¥—ç—ç–ª—ç–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç!"}), 200
        else:
            return jsonify({"error": "Teams –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞"}), 500
            
    except Exception as e:
        return jsonify({"error": f"–ê–ª–¥–∞–∞: {str(e)}"}), 500

def escalate_to_human(conv_id, customer_message, customer_email=None):
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ AI-—ç—ç—Ä –¥“Ø–≥–Ω—ç–∂ Teams-—ç—ç—Ä –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞—Ö (–∞—à–∏–≥–ª–∞–≥–¥–¥–∞–≥–≥“Ø–π)"""
    try:
        print("üîç –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂ –±–∞–π–Ω–∞...")
        
        # –≠–Ω—ç —Ñ—É–Ω–∫—Ü –∞—à–∏–≥–ª–∞–≥–¥–¥–∞–≥–≥“Ø–π —É—á–∏—Ä –ø—Ä–æ—Å—Ç–æ–π –¥“Ø–≥–Ω—ç–ª—Ç —Ö–∏–π—Ö
        simple_analysis = f"""–ê–°–£–£–î–õ–´–ù –¢”®–†”®–õ: –¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π
–Ø–ê–†–ê–õ–¢–ê–ô –ë–ê–ô–î–ê–õ: –î—É–Ω–¥
–ê–°–£–£–î–õ–´–ù –¢–û–í–ß –¢–ê–ô–õ–ë–ê–†: {customer_message}
–®–ê–ê–†–î–õ–ê–ì–ê–¢–ê–ô –ê–†–ì–ê –•–≠–ú–ñ–≠–≠: –ê–∂–∏–ª—Ç–Ω—ã –∞–Ω—Ö–∞–∞—Ä–∞–ª —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π
–•“Æ–õ–≠–≠–ì–î–≠–ñ –ë–£–ô –•–ê–†–ò–£–õ–¢: –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ —à–∏–π–¥—ç—Ö"""
        
        print(f"‚úÖ –≠–Ω–≥–∏–π–Ω –¥“Ø–≥–Ω—ç–ª—Ç –±—ç–ª—ç–Ω: {simple_analysis[:100]}...")
        
        # Teams-—ç—ç—Ä –º—ç–¥—ç—ç–ª—ç—Ö
        success = send_teams_notification(
            conv_id,
            customer_message,
            customer_email,
            "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç:",
            simple_analysis
        )
        
        if success:
            print("‚úÖ –ê—Å—É—É–¥–ª—ã–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞–≤")
            return "üëã –ë–∏ —Ç–∞–Ω—ã –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂, –∞–∂–∏–ª—Ç–∞–Ω–¥ –¥–∞–º–∂—É—É–ª–∞–∞. –£–¥–∞—Ö–≥“Ø–π –∞–∂–∏–ª—Ç–∞–Ω —Ç–∞–Ω—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ–Ω–æ.\n\nüïê –¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø..."
        else:
            print("‚ùå Teams –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞")
            return "–£—É—á–ª–∞–∞—Ä–∞–π, —Ç–∞–Ω—ã –∞—Å—É—É–¥–ª—ã–≥ –∞–∂–∏–ª—Ç–∞–Ω–¥ –¥–∞–º–∂—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
            
    except Exception as e:
        print(f"‚ùå Escalation –∞–ª–¥–∞–∞: {e}")
        return "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."

# def should_escalate_to_teams(thread_id, current_message):
#     """–¢—É—Ö–∞–π–Ω –∞—Å—É—É–¥–ª—ã–≥ Teams-–¥ –∏–ª–≥—ç—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∏–π–¥—ç—Ö (—Ö—É—É—á–∏–Ω —Ñ—É–Ω–∫—Ü - –∞—à–∏–≥–ª–∞–≥–¥–¥–∞–≥–≥“Ø–π)"""
#     # –≠–Ω—ç —Ñ—É–Ω–∫—Ü –∞—à–∏–≥–ª–∞–≥–¥–¥–∞–≥–≥“Ø–π - should_escalate_to_support –∞—à–∏–≥–ª–∞—Ö
#     return False, "–•—É—É—á–∏–Ω —Ñ—É–Ω–∫—Ü - –∞—à–∏–≥–ª–∞–≥–¥–¥–∞–≥–≥“Ø–π"

@app.route("/debug-env", methods=["GET"])
def debug_env():
    """–û—Ä—á–Ω—ã —Ö—É–≤—å—Å–∞–≥—á–¥—ã–≥ —à–∞–ª–≥–∞—Ö debug endpoint"""
    global user_query_history, user_last_urls
    
    return {
        "JWT_SECRET": "SET" if JWT_SECRET else "NOT SET",
        "OPENAI_API_KEY": "SET" if OPENAI_API_KEY else "NOT SET", 
        "ASSISTANT_ID": "SET" if ASSISTANT_ID else "NOT SET",
        "CHATWOOT_API_KEY": "SET" if CHATWOOT_API_KEY else "NOT SET",
        "ACCOUNT_ID": "SET" if ACCOUNT_ID else "NOT SET",
        "SMTP_SERVER": SMTP_SERVER,
        "SMTP_PORT": SMTP_PORT,
        "SENDER_EMAIL": "SET" if SENDER_EMAIL else "NOT SET",
        "SENDER_PASSWORD": "SET" if SENDER_PASSWORD else "NOT SET",
        "TEAMS_WEBHOOK_URL": "SET" if TEAMS_WEBHOOK_URL else "NOT SET",
        "VERIFICATION_URL_BASE": VERIFICATION_URL_BASE,
        "RAG_ENABLED": RAG_ENABLED,
        "ESCALATION_THRESHOLD": ESCALATION_THRESHOLD,
        "active_conversations": len(user_query_history),
        "conversations_with_urls": len(user_last_urls)
    }

@app.route("/rag/build", methods=["POST"])
def build_rag():
    """RAG vector store “Ø“Ø—Å–≥—ç—Ö/—à–∏–Ω—ç—á–ª—ç—Ö"""
    if not RAG_ENABLED:
        return jsonify({"error": "RAG —Å–∏—Å—Ç–µ–º –∏–¥—ç–≤—Ö–≥“Ø–π –±–∞–π–Ω–∞"}), 400
    
    try:
        print("üöÄ RAG —Å–∏—Å—Ç–µ–º “Ø“Ø—Å–≥—ç—Ö —Ö“Ø—Å—ç–ª—Ç –∏—Ä–ª—ç—ç")
        success = build_vector_store()
        
        if success:
            return jsonify({
                "status": "success", 
                "message": "Vector store –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–≥—ç–ª—ç—ç!",
                "vector_store_path": VECTOR_STORE_PATH
            }), 200
        else:
            return jsonify({"error": "Vector store “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞"}), 500
            
    except Exception as e:
        return jsonify({"error": f"–ê–ª–¥–∞–∞: {str(e)}"}), 500

@app.route("/rag/search", methods=["POST"])
def search_rag():
    """RAG —Å–∏—Å—Ç–µ–º—ç—ç—Ä —Ö–∞–π–ª—Ç —Ö–∏–π—Ö (—Ç–µ—Å—Ç –∑–æ—Ä–∏–ª–≥–æ–æ—Ä)"""
    if not RAG_ENABLED:
        return jsonify({"error": "RAG —Å–∏—Å—Ç–µ–º –∏–¥—ç–≤—Ö–≥“Ø–π –±–∞–π–Ω–∞"}), 400
    
    if not vector_store:
        return jsonify({"error": "Vector store “Ø“Ø—Å–≥—ç–≥–¥—ç—ç–≥“Ø–π –±–∞–π–Ω–∞. /rag/build –¥—É—É–¥–Ω–∞ —É—É."}), 400
    
    try:
        data = request.json
        query = data.get("query", "").strip()
        k = data.get("k", 5)
        
        if not query:
            return jsonify({"error": "Query –∑–∞–∞–≤–∞–ª –±–∞–π—Ö —ë—Å—Ç–æ–π"}), 400
        
        results = search_cloudmn_docs(query, k=k)
        
        return jsonify({
            "status": "success",
            "query": query,
            "results_count": len(results),
            "results": results
        }), 200
        
    except Exception as e:
        return jsonify({"error": f"–•–∞–π–ª—Ç –∞–ª–¥–∞–∞: {str(e)}"}), 500

@app.route("/rag/status", methods=["GET"])
def rag_status():
    """RAG —Å–∏—Å—Ç–µ–º–∏–π–Ω —Å—Ç–∞—Ç—É—Å —à–∞–ª–≥–∞—Ö"""
    global vector_store
    
    status = {
        "rag_enabled": RAG_ENABLED,
        "vector_store_exists": vector_store is not None,
        "vector_store_path": VECTOR_STORE_PATH,
        "cache_file": CRAWL_CACHE_FILE,
        "cache_exists": os.path.exists(CRAWL_CACHE_FILE),
        "max_crawl_pages": CRAWL_MAX_PAGES
    }
    
    # Cache file –º—ç–¥—ç—ç–ª—ç–ª
    if status["cache_exists"]:
        try:
            with open(CRAWL_CACHE_FILE, 'r', encoding='utf-8') as f:
                cached_data = json.load(f)
                status["cached_pages"] = len(cached_data)
        except:
            status["cached_pages"] = "Unknown"
    
    # Vector store —Ñ–∞–π–ª—É—É–¥ —à–∞–ª–≥–∞—Ö
    faiss_file = f"{VECTOR_STORE_PATH}.faiss"
    pkl_file = f"{VECTOR_STORE_PATH}.pkl"
    status["vector_files"] = {
        "faiss_exists": os.path.exists(faiss_file),
        "pkl_exists": os.path.exists(pkl_file)
    }
    
    return jsonify(status), 200

@app.route("/rag/refresh", methods=["POST"])
def refresh_rag():
    """Cache —Ü—ç–≤—ç—Ä–ª—ç–∂, —à–∏–Ω—ç—ç—Ä crawl —Ö–∏–π–∂ vector store “Ø“Ø—Å–≥—ç—Ö"""
    if not RAG_ENABLED:
        return jsonify({"error": "RAG —Å–∏—Å—Ç–µ–º –∏–¥—ç–≤—Ö–≥“Ø–π –±–∞–π–Ω–∞"}), 400
    
    try:
        # Cache —Ñ–∞–π–ª —É—Å—Ç–≥–∞—Ö
        if os.path.exists(CRAWL_CACHE_FILE):
            os.remove(CRAWL_CACHE_FILE)
            print(f"üóëÔ∏è Cache —Ñ–∞–π–ª —É—Å—Ç–≥–∞–ª–∞–∞: {CRAWL_CACHE_FILE}")
        
        # Vector store —Ñ–∞–π–ª—É—É–¥ —É—Å—Ç–≥–∞—Ö
        for ext in ['.faiss', '.pkl']:
            file_path = f"{VECTOR_STORE_PATH}{ext}"
            if os.path.exists(file_path):
                os.remove(file_path)
                print(f"üóëÔ∏è Vector store —Ñ–∞–π–ª —É—Å—Ç–≥–∞–ª–∞–∞: {file_path}")
        
        # –î–∞—Ö–∏–Ω “Ø“Ø—Å–≥—ç—Ö
        success = build_vector_store()
        
        if success:
            return jsonify({
                "status": "success", 
                "message": "RAG —Å–∏—Å—Ç–µ–º —à–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç–ª—ç—ç (Cache —Ü—ç–≤—ç—Ä–ª—ç—Å—ç–Ω)",
                "vector_store_path": VECTOR_STORE_PATH
            }), 200
        else:
            return jsonify({"error": "–®–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞"}), 500
            
    except Exception as e:
        return jsonify({"error": f"Refresh –∞–ª–¥–∞–∞: {str(e)}"}), 500

@app.route("/rag/test-query", methods=["POST"])
def test_query_logic():
    """RAG —Å–∏—Å—Ç–µ–º–∏–π–Ω –∞—Å—É—É–ª—Ç—ã–Ω –ª–æ–≥–∏–∫–∏–π–≥ —Ç–µ—Å—Ç —Ö–∏–π—Ö"""
    global user_query_history, user_last_urls
    
    if not RAG_ENABLED:
        return jsonify({"error": "RAG —Å–∏—Å—Ç–µ–º –∏–¥—ç–≤—Ö–≥“Ø–π –±–∞–π–Ω–∞"}), 400
    
    try:
        data = request.json
        conv_id = data.get("conv_id", "test_conversation")
        query = data.get("query", "").strip()
        
        if not query:
            return jsonify({"error": "Query –∑–∞–∞–≤–∞–ª –±–∞–π—Ö —ë—Å—Ç–æ–π"}), 400
        
        # –ê—Å—É—É–ª—Ç—ã–Ω —Ç“Ø“Ø—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        should_search, reason = should_search_new_content(conv_id, query)
        
        # Escalation —à–∞–ª–≥–∞—Ö
        should_escalate, escalate_reason = should_escalate_to_support(conv_id, query)
        
        # –û–¥–æ–æ–≥–∏–π–Ω —Å—Ç–∞—Ç—É—Å
        current_queries = user_query_history.get(conv_id, [])
        current_urls = user_last_urls.get(conv_id, [])
        
        response = {
            "status": "success",
            "conv_id": conv_id,
            "query": query,
            "should_search_new": should_search,
            "search_reason": reason,
            "should_escalate": should_escalate,
            "escalate_reason": escalate_reason,
            "query_history": current_queries,
            "saved_urls": current_urls,
            "total_queries": len(current_queries)
        }
        
        # –•—ç—Ä—ç–≤ —à–∏–Ω—ç —Ö–∞–π–ª—Ç —Ö–∏–π—Ö –±–æ–ª —Ç–µ—Å—Ç —Ö–∞–π–ª—Ç —Ö–∏–π—Ö
        if should_search and vector_store:
            search_results = search_cloudmn_docs(query, k=2)
            response["test_search_results"] = len(search_results)
            response["test_urls"] = [r['url'] for r in search_results if r['url']]
        
        return jsonify(response), 200
        
    except Exception as e:
        return jsonify({"error": f"–¢–µ—Å—Ç –∞–ª–¥–∞–∞: {str(e)}"}), 500

@app.route("/rag/clear-history", methods=["POST"])
def clear_history():
    """–ê—Å—É—É–ª—Ç—ã–Ω —Ç“Ø“Ø—Ö –±–æ–ª–æ–Ω URL-—ã–≥ —Ü—ç–≤—ç—Ä–ª—ç—Ö"""
    global user_query_history, user_last_urls
    
    try:
        data = request.json
        conv_id = data.get("conv_id", "all")
        
        if conv_id == "all":
            # –ë“Ø–≥–¥–∏–π–≥ —Ü—ç–≤—ç—Ä–ª—ç—Ö
            cleared_conversations = len(user_query_history)
            cleared_urls = len(user_last_urls)
            user_query_history.clear()
            user_last_urls.clear()
            
            return jsonify({
                "status": "success",
                "message": "–ë“Ø—Ö conversation —Ç“Ø“Ø—Ö —Ü—ç–≤—ç—Ä–ª—ç–≥–¥–ª—ç—ç",
                "cleared_conversations": cleared_conversations,
                "cleared_url_maps": cleared_urls
            }), 200
        else:
            # –¢–æ–¥–æ—Ä—Ö–æ–π conversation —Ü—ç–≤—ç—Ä–ª—ç—Ö
            queries_removed = len(user_query_history.get(conv_id, []))
            urls_removed = len(user_last_urls.get(conv_id, []))
            
            if conv_id in user_query_history:
                del user_query_history[conv_id]
            if conv_id in user_last_urls:
                del user_last_urls[conv_id]
            
            return jsonify({
                "status": "success",
                "message": f"Conversation {conv_id} —Ç“Ø“Ø—Ö —Ü—ç–≤—ç—Ä–ª—ç–≥–¥–ª—ç—ç",
                "queries_removed": queries_removed,
                "urls_removed": urls_removed
            }), 200
            
    except Exception as e:
        return jsonify({"error": f"–¶—ç–≤—ç—Ä–ª—ç—Ö –∞–ª–¥–∞–∞: {str(e)}"}), 500

if __name__ == "__main__":
    app.run(debug=True, port=5000)