import os
import time
import requests
import re
import jwt
import smtplib
import json
import hashlib
import pickle

from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
from urllib.parse import urljoin, urlparse

from flask import Flask, request, jsonify, render_template_string
from bs4 import BeautifulSoup
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import FAISS
from langchain.schema import Document
from openai import OpenAI

app = Flask(__name__)

# ===== –û—Ä—á–Ω—ã —Ö—É–≤—å—Å–∞–≥—á–∏–¥ =====
OPENAI_API_KEY     = os.environ["OPENAI_API_KEY"]
ASSISTANT_ID       = os.environ["ASSISTANT_ID"]
CHATWOOT_API_KEY   = os.environ["CHATWOOT_API_KEY"]
ACCOUNT_ID         = os.environ["ACCOUNT_ID"]
CHATWOOT_BASE_URL  = "https://app.chatwoot.com"

SMTP_SERVER        = os.environ.get("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT          = int(os.environ.get("SMTP_PORT", "587"))
SENDER_EMAIL       = os.environ["SENDER_EMAIL"]
SENDER_PASSWORD    = os.environ["SENDER_PASSWORD"]

TEAMS_WEBHOOK_URL  = os.environ.get("TEAMS_WEBHOOK_URL")
MAX_AI_RETRIES     = 2  # AI —Ö—ç–¥—ç–Ω —É–¥–∞–∞ retry —Ö–∏–π—Ö

JWT_SECRET         = os.environ.get("JWT_SECRET", "your-secret-key-here")
VERIFICATION_URL_BASE = os.environ.get("VERIFICATION_URL_BASE", "http://localhost:5000")

# RAG —Ç–æ—Ö–∏—Ä–≥–æ–æ
RAG_ENABLED        = os.environ.get("RAG_ENABLED", "true").lower() == "true"
VECTOR_STORE_PATH  = "cloudmn_vectorstore"
CRAWL_CACHE_FILE   = "cloudmn_crawl_cache.json"
CRAWL_MAX_PAGES    = int(os.environ.get("CRAWL_MAX_PAGES", "100"))
ESCALATION_THRESHOLD = int(os.environ.get("ESCALATION_THRESHOLD", "3"))

# –ì–ª–æ–±–∞–ª—å –æ–±—å–µ–∫—Ç
vector_store = None
embeddings   = None

# –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–ª—Ç—ã–Ω —Ç“Ø“Ø—Ö —Ö–∞–¥–≥–∞–ª–∞—Ö
user_query_history = {}   # conv_id -> [–æ–ª–æ–Ω –∞—Å—É—É–ª—Ç]
user_last_urls     = {}   # conv_id -> [URL –∂–∞–≥—Å–∞–∞–ª—Ç]

# OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=OPENAI_API_KEY)

# ===== RAG —Å–∏—Å—Ç–µ–º–∏–π–≥ —ç—Ö–ª“Ø“Ø–ª—ç—Ö =====
if RAG_ENABLED:
    try:
        embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)
        # FAISS –ª–æ–∫–∞–ª —Ñ–∞–π–ª—É—É–¥: VECTOR_STORE_PATH —Ö–∞–≤—Ç—Å–∞–Ω –¥–∞—Ö—å index —Ñ–∞–π–ª—É—É–¥
        faiss_index_path = os.path.join(VECTOR_STORE_PATH, "index.faiss")
        if os.path.exists(faiss_index_path):
            vector_store = FAISS.load_local(VECTOR_STORE_PATH, embeddings)
            print("‚úÖ –•–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω vector store-–≥ –∞—á–∞–∞–ª–ª–∞–∞")
        else:
            print("‚ö†Ô∏è Vector store –æ–ª–¥—Å–æ–Ω–≥“Ø–π - —ç—Ö–ª—ç—ç–¥ /rag/build –¥—É—É–¥–Ω–∞ —É—É")
    except Exception as e:
        print(f"‚ùå RAG —Å–∏—Å—Ç–µ–º —ç—Ö–ª“Ø“Ø–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        RAG_ENABLED = False


# ----- –¢—É—Å–ª–∞—Ö —Ñ—É–Ω–∫—Ü—É—É–¥ -----

def is_valid_email(email: str) -> bool:
    """–ò–º—ç–π–ª —Ö–∞—è–≥–∏–π–Ω —Ñ–æ—Ä–º–∞—Ç—ã–≥ —à–∞–ª–≥–∞—Ö"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None


def clean_text(text: str) -> str:
    """–¢–µ–∫—Å—Ç–∏–π–≥ —Ü—ç–≤—ç—Ä–ª—ç—Ö: –æ–ª–æ–Ω —Ö–æ–æ—Å–æ–Ω –º”©—Ä –±–æ–ª–æ–Ω –∑–∞–π–≥ –±–∞–≥–∞—Å–≥–∞–Ω–∞"""
    text = re.sub(r'\n\s*\n', '\n', text)
    text = re.sub(r'\s+', ' ', text)
    return text.strip()


def extract_content_from_url(url: str, visited_urls=None):
    """–ù—ç–≥ URL-–∞–∞—Å title, —Ü—ç–≤—ç—Ä—Ö—ç–Ω —Ç–µ–∫—Å—Ç –∏–ª—Ä“Ø“Ø–ª—ç—Ö"""
    if visited_urls is None:
        visited_urls = set()

    if url in visited_urls:
        return None
    visited_urls.add(url)

    try:
        print(f"üìÑ Crawling: {url}")
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()

        soup = BeautifulSoup(response.content, 'html.parser')

        title_tag = soup.find('title')
        title_text = title_tag.get_text().strip() if title_tag else "Untitled"

        content_selectors = ['main', 'article', '.content', '#content', '.markdown', '.doc-content', '.documentation']
        content_elem = None
        for selector in content_selectors:
            elem = soup.select_one(selector)
            if elem:
                content_elem = elem
                break

        if not content_elem:
            content_elem = soup.find('body')
        if not content_elem:
            return None

        # script, style, nav, header, footer, aside —É—Å—Ç–≥–∞—Ö
        for tag in content_elem(["script", "style", "nav", "header", "footer", "aside"]):
            tag.decompose()

        text_content = content_elem.get_text()
        text_content = clean_text(text_content)

        if len(text_content) < 50:  # —Ö—ç—Ç –±–æ–≥–∏–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∞–ª–≥–∞—Å–∞—Ö
            return None

        return {
            'url': url,
            'title': title_text,
            'content': text_content,
            'length': len(text_content)
        }

    except Exception as e:
        print(f"‚ùå Error crawling {url}: {e}")
        return None


def crawl_cloudmn_docs():
    """https://docs.cloud.mn —Å–∞–π—Ç—ã–≥ crawl —Ö–∏–π–∂ cache –±–æ–ª–≥–æ—Ö"""
    base_url    = "https://docs.cloud.mn"
    start_urls  = ["https://docs.cloud.mn/"]
    visited     = set()
    all_docs    = []

    # –•—ç—Ä—ç–≤ cache —Ñ–∞–π–ª –±–∞–π–≥–∞–∞ –±–æ–ª —Ç“Ø“Ø–Ω—ç—ç—Å –∞—á–∞–∞–ª–Ω–∞
    if os.path.exists(CRAWL_CACHE_FILE):
        try:
            with open(CRAWL_CACHE_FILE, 'r', encoding='utf-8') as f:
                cached = json.load(f)
                print(f"‚úÖ Cache-–∞–∞—Å {len(cached)} —Ö—É—É–¥–∞—Å –∞—á–∞–∞–ª–ª–∞–∞")
                return cached
        except Exception as e:
            print(f"‚ö†Ô∏è Cache —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")

    print(f"üï∑Ô∏è CloudMN docs crawl —ç—Ö—ç–ª–∂ –±–∞–π–Ω–∞... (Max {CRAWL_MAX_PAGES} —Ö—É—É–¥–∞—Å)")

    queue = start_urls.copy()
    page_count = 0

    while queue and page_count < CRAWL_MAX_PAGES:
        cur = queue.pop(0)
        if cur in visited:
            continue

        data = extract_content_from_url(cur, visited)
        if data:
            all_docs.append(data)
            page_count += 1
            print(f"‚úÖ [{page_count}/{CRAWL_MAX_PAGES}] {data['title']}")

            # –î–æ—Ç–æ—Ä—Ç –ª–∏–Ω–∫ –Ω—ç–º—ç—Ö
            try:
                headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'}
                resp = requests.get(cur, headers=headers, timeout=10)
                soup = BeautifulSoup(resp.content, 'html.parser')
                for link in soup.find_all('a', href=True):
                    href = link['href']
                    full = urljoin(cur, href)
                    if (full.startswith(base_url)
                        and full not in visited
                        and full not in queue
                        and not full.endswith(('.pdf', '.jpg', '.png', '.gif', '.css', '.js'))):
                        queue.append(full)
            except Exception as e:
                print(f"‚ö†Ô∏è –õ–∏–Ω–∫ –æ–ª–æ—Ö–æ–¥ –∞–ª–¥–∞–∞ {cur}: {e}")

        time.sleep(0.5)

    print(f"‚úÖ Crawl –¥—É—É—Å–ª–∞–∞: {len(all_docs)} —Ö—É—É–¥–∞—Å")

    try:
        with open(CRAWL_CACHE_FILE, 'w', encoding='utf-8') as f:
            json.dump(all_docs, f, ensure_ascii=False, indent=2)
        print(f"üíæ Cache —Ö–∞–¥–≥–∞–ª–ª–∞–∞: {CRAWL_CACHE_FILE}")
    except Exception as e:
        print(f"‚ö†Ô∏è Cache —Ö–∞–¥–≥–∞–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")

    return all_docs


def build_vector_store():
    """Vector store “Ø“Ø—Å–≥—ç–∂, FAISS-—ç—ç—Ä —Ö–∞–¥–≥–∞–ª–∞—Ö"""
    global vector_store, embeddings

    if not RAG_ENABLED:
        print("‚ùå RAG –∏–¥—ç–≤—Ö–≥“Ø–π –±–∞–π–Ω–∞")
        return False

    try:
        print("üîß Vector store “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")
        docs_data = crawl_cloudmn_docs()
        if not docs_data:
            print("‚ùå Crawl —Ö–∏–π—Ö –¥–æ–∫—É–º–µ–Ω—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            return False

        splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200,
            separators=["\n\n", "\n", ". ", "! ", "? ", " "]
        )

        all_chunks = []
        for d in docs_data:
            chunks = splitter.split_text(d['content'])
            for idx, txt in enumerate(chunks):
                if len(txt.strip()) > 50:
                    doc = Document(
                        page_content=txt,
                        metadata={
                            'title': d['title'],
                            'url': d['url'],
                            'chunk_id': idx,
                            'total_chunks': len(chunks)
                        }
                    )
                    all_chunks.append(doc)

        print(f"üìÑ {len(all_chunks)} —à–∏—Ä—Ö—ç–≥ chunk “Ø“Ø—Å–≥—ç–ª—ç—ç")
        if not all_chunks:
            print("‚ùå –ê–ª–¥–∞—Ä—Ç–∞–π chunk –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            return False

        if not embeddings:
            embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)

        print("üîÆ Embeddings “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")
        vector_store = FAISS.from_documents(all_chunks, embeddings)

        # LOCAL SAVE: VECTOR_STORE_PATH —Ö–∞–≤—Ç–∞—Å “Ø“Ø—Å–≥—ç–Ω—ç
        if not os.path.exists(VECTOR_STORE_PATH):
            os.makedirs(VECTOR_STORE_PATH)
        vector_store.save_local(VECTOR_STORE_PATH)
        print(f"üíæ Vector store —Ö–∞–¥–≥–∞–ª–ª–∞–∞: {VECTOR_STORE_PATH}")

        return True

    except Exception as e:
        print(f"‚ùå Vector store “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False


def search_cloudmn_docs(query: str, k: int = 5):
    """Vector store-–∞–∞—Å similarity search —Ö–∏–π—Ö"""
    global vector_store

    if not RAG_ENABLED or not vector_store:
        return []

    try:
        results = vector_store.similarity_search(query, k=k)
        out = []
        for doc in results:
            out.append({
                'content': doc.page_content,
                'title': doc.metadata.get('title', 'Unknown'),
                'url': doc.metadata.get('url', ''),
                'chunk_id': doc.metadata.get('chunk_id', 0)
            })
        return out

    except Exception as e:
        print(f"‚ùå RAG —Ö–∞–π–ª—Ç –∞–ª–¥–∞–∞: {e}")
        return []


def is_similar_query(query1: str, query2: str) -> bool:
    """GPT-—ç—ç—Ä —Ö–æ—ë—Ä –∞—Å—É—É–ª—Ç –∏–∂–∏–ª —Ç”©—Ä”©–ª —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö"""
    try:
        system_msg = (
            "–¢–∞ –±–æ–ª –∞—Å—É—É–ª—Ç—ã–Ω –∏–∂–∏–ª —Ç”©—Ä”©–ª —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω.\n"
            "–•–æ—ë—Ä –∞—Å—É—É–ª—Ç –∏–∂–∏–ª —Ç”©—Ä–ª–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω —Ç–∞–ª–∞–∞—Ä —ç—Å—ç—Ö–∏–π–≥ —Ö—ç–ª–Ω—ç “Ø“Ø.\n"
            "–ó”©–≤—Ö”©–Ω '–ò–ñ–ò–õ' —ç—Å–≤—ç–ª '”®”®–†' –≥—ç–∂ —Ö–∞—Ä–∏—É–ª–Ω–∞ —É—É."
        )
        user_msg = f"""
        –ê—Å—É—É–ª—Ç 1: "{query1}"
        –ê—Å—É—É–ª—Ç 2: "{query2}"
        """

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
            max_tokens=10,
            temperature=0.1
        )
        res_text = response.choices[0].message.content.strip()
        return "–ò–ñ–ò–õ" in res_text

    except Exception as e:
        print(f"‚ùå –ê—Å—É—É–ª—Ç —Ö–∞—Ä—å—Ü—É—É–ª–∞—Ö –∞–ª–¥–∞–∞: {e}")
        return False


def should_search_new_content(conv_id: str, current_query: str):
    """–®–∏–Ω—ç —Ö–∞–π–ª—Ç —Ö–∏–π—Ö —ç—Å—ç—Ö–∏–π–≥ —à–∏–π–¥—ç—Ö (conversation-–¥ “Ø–∑—ç—Ö–≥“Ø–π –±–∞–π–≤–∞–ª True)"""
    if conv_id not in user_query_history:
        user_query_history[conv_id] = [current_query]
        return True, "–ê–Ω—Ö–Ω—ã –∞—Å—É—É–ª—Ç"

    previous = user_query_history[conv_id][-1]
    if previous and is_similar_query(current_query, previous):
        return False, "–ò–∂–∏–ª —Ç”©—Ä–ª–∏–π–Ω –∞—Å—É—É–ª—Ç"

    user_query_history[conv_id].append(current_query)
    if len(user_query_history[conv_id]) > 10:
        user_query_history[conv_id] = user_query_history[conv_id][-10:]
    return True, "–®–∏–Ω—ç —Ç”©—Ä–ª–∏–π–Ω –∞—Å—É—É–ª—Ç"


def should_escalate_to_support(conv_id: str, current_msg: str):
    """–î—ç–º–∂–ª—ç–≥–∏–π–Ω –±–∞–≥—Ç —è–≤—É—É–ª–∞—Ö —ç—Å—ç—Ö–∏–π–≥ —à–∏–π–¥—ç—Ö (ESCALATION –ª–æ–≥–∏–∫)"""
    if not RAG_ENABLED:
        return True, "RAG –∏–¥—ç–≤—Ö–≥“Ø–π"

    count = len(user_query_history.get(conv_id, []))
    if count >= ESCALATION_THRESHOLD:
        return True, f"–û–ª–æ–Ω –∞—Å—É—É–ª—Ç –≥–∞—Ä—Å–∞–Ω ({count})"

    urgent_kw = ["–∞–ª–¥–∞–∞ –≥–∞—Ä—á", "–∞–∂–∏–ª–ª–∞—Ö–≥“Ø–π", "–±—É—Ä—É—É", "–∞—Å—É—É–¥–∞–ª", "—è–∞—Ä–∞–ª—Ç–∞–π"]
    txt = current_msg.lower()
    if any(kw in txt for kw in urgent_kw):
        return True, "–Ø–∞—Ä–∞–ª—Ç–∞–π —Ç“Ø–ª—Ö“Ø“Ø—Ä “Ø–≥ –æ–ª–¥—Å–æ–Ω"

    return False, "–•—ç–≤–∏–π–Ω –∞—Å—É—É–ª—Ç"


def generate_verification_token(email: str, conv_id: str, contact_id: str) -> str:
    """JWT —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö (24 —Ü–∞–≥–∏–π–Ω —Ö“Ø—á–∏–Ω—Ç—ç–π)"""
    payload = {
        'email': email,
        'conv_id': conv_id,
        'contact_id': contact_id,
        'exp': datetime.utcnow() + timedelta(hours=24)
    }
    return jwt.encode(payload, JWT_SECRET, algorithm='HS256')


def verify_token(token: str):
    """JWT —Ç–æ–∫–µ–Ω—ã–≥ —à–∞–ª–≥–∞—Ö"""
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=['HS256'])
        return payload
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None
    except Exception:
        return None


def send_verification_email(email: str, token: str) -> bool:
    """–ò–º—ç–π–ª —Ö–∞—è–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö —Ö–æ–ª–±–æ–æ—Å –∏–ª–≥—ç—ç—Ö"""
    try:
        verification_url = f"{VERIFICATION_URL_BASE}/verify?token={token}"
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = email
        msg['Subject'] = "–ò–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É"

        body = f"""
        –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!
        
        –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥–∏–π–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –¥–∞—Ä–∞–∞—Ö –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É:
        {verification_url}
        
        –≠–Ω—ç –ª–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–Ω–æ.
        """
        msg.attach(MIMEText(body, 'plain', 'utf-8'))

        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        server.send_message(msg)
        server.quit()
        return True
    except Exception as e:
        print(f"–ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False


def get_contact(contact_id: str):
    """Chatwoot-—Å contact –∞–≤–∞—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
    resp = requests.get(url, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()


def update_contact(contact_id: str, attrs: dict):
    """Contact-–∏–π–Ω custom_attributes —à–∏–Ω—ç—á–ª—ç—Ö"""
    try:
        url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
        payload = {"custom_attributes": attrs}
        headers = {"api_access_token": CHATWOOT_API_KEY}
        resp = requests.put(url, json=payload, headers=headers)
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        print(f"‚ùå Contact update –∞–ª–¥–∞–∞: {e}")
        raise


def get_conversation(conv_id: str):
    """Chatwoot-—Å conversation –∞–≤–∞—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
    resp = requests.get(url, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()


def update_conversation(conv_id: str, attrs: dict):
    """Conversation-–∏–π–Ω custom_attributes —à–∏–Ω—ç—á–ª—ç—Ö"""
    try:
        url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/custom_attributes"
        payload = {"custom_attributes": attrs}
        headers = {"api_access_token": CHATWOOT_API_KEY}
        resp = requests.post(url, json=payload, headers=headers)
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        print(f"‚ùå Conversation update –∞–ª–¥–∞–∞: {e}")
        raise


def send_to_chatwoot(conv_id: str, text: str):
    """Chatwoot —Ä—É—É –º–µ—Å—Å–µ–∂ –±–∏—á–∏—Ö"""
    try:
        url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/messages"
        payload = {"content": text, "message_type": "outgoing"}
        headers = {"api_access_token": CHATWOOT_API_KEY}
        r = requests.post(url, json=payload, headers=headers)
        r.raise_for_status()
        return r.json()
    except Exception as e:
        print(f"‚ùå Message send –∞–ª–¥–∞–∞: {e}")
        raise


def analyze_customer_issue(thread_id: str, current_message: str, customer_email=None) -> str:
    """AI-—ç—ç—Ä —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —á–∞—Ç—ã–Ω —Ç“Ø“Ø—Ö–∏–π–≥ –¥“Ø–≥–Ω—ç—Ö"""
    try:
        messages = client.beta.threads.messages.list(thread_id=thread_id, limit=50)
        conversation_history = []
        for msg in reversed(messages.data):
            if msg.role == "user":
                txt = "".join(
                    block.text.value for block in msg.content if hasattr(block, 'text')
                )
                if txt.strip():
                    conversation_history.append(f"–•—ç—Ä—ç–≥–ª—ç–≥—á: {txt.strip()}")
            elif msg.role == "assistant":
                txt = "".join(
                    block.text.value for block in msg.content if hasattr(block, 'text')
                )
                if txt.strip():
                    conversation_history.append(f"AI: {txt.strip()[:200]}...")

        if not conversation_history:
            conversation_history = [f"–•—ç—Ä—ç–≥–ª—ç–≥—á: {current_message}"]

        chat_history = "\n".join(conversation_history[-10:])

        system_msg = (
            "–¢–∞ –±–æ–ª –¥—ç–º–∂–ª—ç–≥–∏–π–Ω –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω. "
            "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±“Ø—Ö —á–∞—Ç —Ç“Ø“Ø—Ö–∏–π–≥ —Ö–∞—Ä–∂, –∞—Å—É—É–¥–ª—ã–≥ –∏–∂ –±“Ø—Ä—ç–Ω –¥“Ø–≥–Ω—ç–Ω—ç “Ø“Ø."
        )
        user_msg = f"""
        –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —á–∞—Ç —Ç“Ø“Ø—Ö:
        {chat_history}

        –û–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂: "{current_message}"

        –î–∞—Ä–∞–∞—Ö —Ñ–æ—Ä–º–∞—Ç–∞–∞—Ä –¥“Ø–≥–Ω—ç–ª—Ç –±–∏—á–Ω—ç “Ø“Ø:
        –ê–°–£–£–î–õ–´–ù –¢”®–†”®–õ:
        –Ø–ê–†–ê–õ–¢–ê–ô –ë–ê–ô–î–ê–õ:
        –ê–°–£–£–î–õ–´–ù –¢–û–í–ß –¢–ê–ô–õ–ë–ê–†:
        –ß–ê–¢–´–ù –•–≠–í –ú–ê–Ø–ì:
        –®–ê–ê–†–î–õ–ê–ì–ê–¢–ê–ô –ê–†–ì–ê –•–≠–ú–ñ–≠–≠:
        –•“Æ–õ–≠–≠–ì–î–≠–ñ –ë–£–ô –•–ê–†–ò–£–õ–¢:
        –î“Æ–ì–ù–≠–õ–¢:
        """
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
            max_tokens=500,
            temperature=0.2
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        print(f"‚ùå –ê—Å—É—É–¥–∞–ª –¥“Ø–≥–Ω—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return f"–ê—Å—É—É–¥–∞–ª –¥“Ø–≥–Ω—ç—Ö –±–æ–ª–æ–º–∂–≥“Ø–π: {current_message}"


def send_teams_notification(
    conv_id: str,
    customer_message: str,
    customer_email=None,
    escalation_reason="–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–∞–ª",
    ai_analysis=None
) -> bool:
    """Microsoft Teams —Ä—É—É –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö (Adaptive Card-–≥ —Ö–∞–¥–≥–∞–ª—Å–∞–Ω)"""
    if not TEAMS_WEBHOOK_URL:
        print("‚ö†Ô∏è Teams webhook URL —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π")
        return False

    try:
        conv_url = f"{CHATWOOT_BASE_URL}/app/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
        error_summary = escalation_reason
        if ai_analysis:
            error_summary += f"\n\n–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –∞–Ω–∞–ª–∏–∑:\n{ai_analysis}"

        # ### Adaptive Card Format ###
        teams_message = {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "summary": "AI –¥“Ø–≥–Ω—ç–ª—Ç –∏—Ä–ª—ç—ç",
            "themeColor": "EA4300",
            "title": "üìã –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç",
            "text": (
                f"üë§ **–•–∞—Ä–∏–ª—Ü–∞–≥—á:** {customer_email or '–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π'}\n"
                f"‚è± **–•—É–≥–∞—Ü–∞–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"üí¨ **–ú–µ—Å—Å–µ–∂:** {customer_message[:200]}"
                + ("..." if len(customer_message) > 200 else "")
            ),
            "sections": [
                {
                    "activityTitle": "üîç **AI –î“Ø–≥–Ω—ç–ª—Ç**",
                    "text": ai_analysis or "_AI –∞–Ω–∞–ª–∏–∑ –±–∞–π—Ö–≥“Ø–π_"
                }
            ],
            "potentialAction": [
                {
                    "@type": "OpenUri",
                    "name": "Chatwoot –¥—ç—ç—Ä “Ø–∑—ç—Ö",
                    "targets": [
                        {"os": "default", "uri": conv_url}
                    ]
                }
            ]
        }

        r = requests.post(TEAMS_WEBHOOK_URL, json=teams_message)
        r.raise_for_status()
        print(f"‚úÖ Teams-–¥ –∏–ª–≥—ç—ç–ª—ç—ç: {escalation_reason}")
        return True

    except Exception as e:
        print(f"‚ùå Teams –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False


def get_ai_response_with_rag(
    thread_id: str,
    message_content: str,
    conv_id=None,
    customer_email=None,
    retry_count=0
) -> str:
    """RAG context-—Ç–∞–π AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö"""
    global user_last_urls

    try:
        rag_context = ""
        used_urls = []

        if RAG_ENABLED and vector_store and conv_id:
            should_search, reason = should_search_new_content(conv_id, message_content)
            print(f"üîç –•–∞–π–ª—Ç—ã–Ω —à–∏–π–¥–≤—ç—Ä: {should_search} - {reason}")

            if should_search:
                results = search_cloudmn_docs(message_content, k=3)
                if results:
                    rag_context = "\n\n**CloudMN docs-–∞–∞—Å –æ–ª–¥—Å–æ–Ω –º—ç–¥—ç—ç–ª—ç–ª:**\n"
                    new_urls = []
                    for i, res in enumerate(results, start=1):
                        rag_context += (
                            f"{i}. [{res['title']}]({res['url']})\n"
                            f"{res['content'][:200]}...\n\n"
                        )
                        if res['url'] not in new_urls:
                            new_urls.append(res['url'])
                    user_last_urls[conv_id] = new_urls
                    used_urls = new_urls
                    print(f"üîó –®–∏–Ω—ç URL —Ö–∞–¥–≥–∞–ª—Å–∞–Ω: {len(new_urls)}")
                else:
                    print("‚ùå –•–∞–π–ª—Ç—ã–Ω “Ø—Ä –¥“Ø–Ω –∞–ª–≥–∞")
            else:
                prev_urls = user_last_urls.get(conv_id, [])
                if prev_urls:
                    rag_context = "\n\n**”®–º–Ω”© –∞—à–∏–≥–ª–∞—Å–∞–Ω CloudMN —Ö—É—É–¥–∞—Å:**\n"
                    for idx, u in enumerate(prev_urls[:3], start=1):
                        rag_context += f"{idx}. {u}\n"
                    used_urls = prev_urls[:3]
                else:
                    print("‚ö†Ô∏è ”®–º–Ω”©—Ö URL –∞–ª–≥–∞")

        # AI-–¥ –¥–∞–º–∂—É—É–ª–∞—Ö —Ç–µ–∫—Å—Ç—ç–Ω–¥ rag_context –Ω—ç–º—ç—Ö
        final_input = message_content + rag_context

        # Chatwoot thread-–¥ —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂ –Ω—ç–º—ç—Ö
        client.beta.threads.messages.create(thread_id=thread_id, role="user", content=final_input)

        run = client.beta.threads.runs.create(thread_id=thread_id, assistant_id=ASSISTANT_ID)
        max_wait = 30
        wait = 0
        while wait < max_wait:
            status = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
            if status.status == "completed":
                break
            elif status.status in ["failed", "cancelled", "expired"]:
                err_msg = "–£—É—á–ª–∞–∞—Ä–∞–π, AI –∞–∂–∏–ª–ª–∞—Å–∞–Ω–≥“Ø–π. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
                if retry_count == 0 and conv_id:
                    send_teams_notification(
                        conv_id, message_content, customer_email,
                        f"AI run –∞–ª–¥–∞–∞: {status.status}",
                        f"Run ID: {run.id}, Status: {status.status}"
                    )
                return err_msg
            time.sleep(1)
            wait += 1

        if wait >= max_wait:
            timeout_msg = "AI —Ö–∞—Ä–∏—É–ª—Ç —Ö—ç—Ç—ç—Ä—Ö–∏–π —É–¥–∞–∞—à–∏—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
            if retry_count == 0 and conv_id:
                send_teams_notification(
                    conv_id, message_content, customer_email,
                    "AI timeout (30 —Å–µ–∫)", f"Run ID: {run.id}"
                )
            return timeout_msg

        msgs = client.beta.threads.messages.list(thread_id=thread_id)
        for msg in msgs.data:
            if msg.role == "assistant":
                text = "".join(
                    block.text.value for block in msg.content if hasattr(block, 'text')
                )
                # –•—ç—Ä—ç–≤ URL –∞—à–∏–≥–ª–∞—Å–∞–Ω –±–æ–ª —Ç”©–≥—Å–≥”©–ª–¥ –Ω—å –Ω—ç–º—ç—Ö
                if used_urls:
                    text += "\n\n**CloudMN —Ö—É—É–¥–∞—Å —Ö–∞—Ä–∞—Ö:**\n"
                    for u in used_urls:
                        text += f"- {u}\n"
                return text

        return "AI —Ö–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."

    except Exception as e:
        print(f"‚ùå AI —Ö–∞—Ä–∏—É–ª—Ç –∞–ª–¥–∞–∞: {e}")
        err_msg = "AI-—Ç—ç–π —Ö–æ–ª–±–æ–≥–¥–æ—Ö –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
        if retry_count == 0 and conv_id:
            send_teams_notification(
                conv_id, message_content, customer_email,
                "AI —Å–∏—Å—Ç–µ–º–∏–π–Ω Exception", str(e)
            )
        return err_msg


@app.route("/verify", methods=["GET"])
def verify_email():
    """Email Verify endpoint"""
    token = request.args.get('token')
    if not token:
        return "‚ùå –¢–æ–∫–µ–Ω –±–∞–π—Ö–≥“Ø–π!", 400

    payload = verify_token(token)
    if not payload:
        return "‚ùå –¢–æ–∫–µ–Ω —Ö“Ø—á–∏–Ω—Ç—ç–π –±–∏—à —ç—Å–≤—ç–ª –¥—É—É—Å—Å–∞–Ω!", 400

    try:
        contact_id = payload['contact_id']
        email      = payload['email']
        conv_id    = payload.get('conv_id')

        update_contact(contact_id, {
            "email_verified": "1",
            "verified_email": email,
            "verification_date": datetime.utcnow().isoformat()
        })

        if conv_id:
            send_to_chatwoot(conv_id, f"‚úÖ –¢–∞–Ω—ã –∏–º—ç–π–ª ({email}) –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞!")

        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head><meta charset="utf-8"><title>–ò–º—ç–π–ª –±–∞—Ç–∞–ª–ª–∞–∞</title></head>
        <body style="font-family:Arial,sans-serif;text-align:center;padding:50px;">
            <h2 style="color:green;">‚úÖ –ë–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞!</h2>
            <p>–¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({{ email }}) –±–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω.</p>
        </body>
        </html>
        """, email=email)

    except Exception as e:
        print(f"‚ùå –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
        return f"‚ùå –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}", 500


@app.route("/webhook", methods=["POST"])
def webhook():
    """Chatwoot webhook handler"""
    try:
        data = request.json
        if data.get("message_type") != "incoming":
            return jsonify({"status": "skipped - not incoming"}), 200

        conv_id         = data["conversation"]["id"]
        message_content = data.get("content", "").strip()

        contact_id = data.get("sender", {}).get("id")
        if not contact_id:
            send_to_chatwoot(conv_id, "‚ùå Contact ID –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            return jsonify({"status": "error - no contact"}), 400

        # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç —à–∞–ª–≥–∞—Ö
        is_verified   = False
        verified_email = ""
        meta_sender = data.get("conversation", {}).get("meta", {}).get("sender", {})
        if "custom_attributes" in meta_sender:
            attrs = meta_sender["custom_attributes"]
            if str(attrs.get("email_verified", "")).lower() in ["true", "1", "yes"]:
                is_verified = True
                verified_email = attrs.get("verified_email", "")

        if not is_verified:
            # API-–∞–∞—Ä –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞—Ö
            try:
                contact = get_contact(contact_id)
                attrs = contact.get("custom_attributes", {})
                if str(attrs.get("email_verified", "")).lower() in ["true", "1", "yes"]:
                    is_verified = True
                    verified_email = attrs.get("verified_email", "")
            except Exception:
                is_verified = False

        if not is_verified:
            # –•—ç—Ä—ç–≤ –º–µ—Å—Å–µ–∂ –Ω—å –∏–º—ç–π–ª –º–∞—è–≥—Ç–∞–π –±–æ–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω –ª–∏–Ω–∫ –∏–ª–≥—ç—ç—Ö
            if is_valid_email(message_content):
                token = generate_verification_token(message_content, conv_id, contact_id)
                if send_verification_email(message_content, token):
                    send_to_chatwoot(conv_id,
                        f"üìß –¢–∞–Ω—ã –∏–º—ç–π–ª ({message_content}) —Ä“Ø“Ø –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω –ª–∏–Ω–∫ –∏–ª–≥—ç—ç–ª—ç—ç.\n"
                        f"–õ–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–Ω–æ.")
                else:
                    send_to_chatwoot(conv_id, "‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.")
            else:
                send_to_chatwoot(conv_id,
                    "üëã Chatbot –∞—à–∏–≥–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ —ç—Ö–ª—ç—ç–¥ –∏–º—ç–π–ª—ç—ç –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É.\n"
                    "üìß –ò–º—ç–π–ª—ç—ç –±–∏—á–Ω—ç “Ø“Ø (–ñ–∏—à—ç—ç: example@gmail.com)")
            return jsonify({"status": "waiting_verification"}), 200

        # ===== –ë–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á =====
        conv = get_conversation(conv_id)
        attrs = conv.get("custom_attributes", {})
        thread_key = f"openai_thread_{contact_id}"
        thread_id  = attrs.get(thread_key)

        if not thread_id:
            thread = client.beta.threads.create()
            thread_id = thread.id
            update_conversation(conv_id, {thread_key: thread_id})

        # AI —Ö–∞—Ä–∏—É–ª—Ç –æ–ª–∂ –∞–≤–∞—Ö
        retry_count = 0
        ai_response = None
        while retry_count <= MAX_AI_RETRIES:
            ai_response = get_ai_response_with_rag(thread_id, message_content, conv_id, verified_email, retry_count)
            if not any(err in ai_response for err in ["–∞–ª–¥–∞–∞", "—Ö—ç—Ç —É–¥–∞–∞", "–æ–ª–¥—Å–æ–Ω–≥“Ø–π"]):
                break
            retry_count += 1
            if retry_count <= MAX_AI_RETRIES:
                time.sleep(2)

        if retry_count > MAX_AI_RETRIES:
            # AI –∞–ª–¥–∞–∞ –±–æ–ª –∞–∂–∏–ª—Ç–∞–Ω–¥ redirect
            send_teams_notification(
                conv_id,
                message_content,
                verified_email,
                f"AI {MAX_AI_RETRIES+1} retry –∞–ª–¥–∞–∞",
                f"Thread ID: {thread_id}"
            )
            ai_response = (
                "üö® –£—É—á–ª–∞–∞—Ä–∞–π, —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.\n"
                "–¢–∞–Ω—ã –∞—Å—É—É–ª—Ç—ã–≥ –∞–∂–∏–ª—Ç–∞–Ω–¥ –¥–∞–º–∂—É—É–ª–∞–∞.\n"
                "üïê –¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø..."
            )

        send_to_chatwoot(conv_id, ai_response)

        # AI –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–æ–ª escalate —à–∞–ª–≥–∞—Ö
        if retry_count <= MAX_AI_RETRIES:
            should_esc, reason = should_escalate_to_support(conv_id, message_content)
            if should_esc:
                analysis = analyze_customer_issue(thread_id, message_content, verified_email)
                send_teams_notification(conv_id, message_content, verified_email, f"–ê—Å—É—É–¥–∞–ª: {reason}", analysis)

        return jsonify({"status": "success"}), 200

    except Exception as e:
        print(f"üí• Webhook –∞–ª–¥–∞–∞: {e}")
        return jsonify({"status": f"error: {e}"}), 500


@app.route("/test-teams", methods=["GET"])
def test_teams():
    """Teams Webhook —Ç–µ—Å—Ç —Ö–∏–π—Ö"""
    if not TEAMS_WEBHOOK_URL:
        return jsonify({"error": "TEAMS_WEBHOOK_URL —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π"}), 400
    try:
        test_analysis = "–ê–°–£–£–î–õ–´–ù –¢”®–†”®–õ: –¢–µ—Å—Ç\n–Ø–ê–†–ê–õ–¢–ê–ô: –ë–∞–≥–∞\n–¢–∞–π–ª–±–∞—Ä: –°–∏—Å—Ç–µ–º –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞"
        success = send_teams_notification(
            conv_id="test_123",
            customer_message="–≠–Ω—ç —Ç–µ—Å—Ç –º—ç–¥—ç—ç–ª—ç–ª.",
            customer_email="test@example.com",
            escalation_reason="Teams —Ç–µ—Å—Ç",
            ai_analysis=test_analysis
        )
        if success:
            return jsonify({"status": "success", "message": "Teams-–¥ –∏–ª–≥—ç—ç–ª—ç—ç"}), 200
        else:
            return jsonify({"error": "Teams –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞"}), 500
    except Exception as e:
        return jsonify({"error": f"{e}"}), 500


@app.route("/debug-env", methods=["GET"])
def debug_env():
    """–û—Ä—á–Ω—ã —Ö—É–≤—å—Å–∞–≥—á —à–∞–ª–≥–∞—Ö"""
    return {
        "JWT_SECRET": "SET" if JWT_SECRET else "NOT SET",
        "OPENAI_API_KEY": "SET" if OPENAI_API_KEY else "NOT SET",
        "ASSISTANT_ID": "SET" if ASSISTANT_ID else "NOT SET",
        "CHATWOOT_API_KEY": "SET" if CHATWOOT_API_KEY else "NOT SET",
        "ACCOUNT_ID": "SET" if ACCOUNT_ID else "NOT SET",
        "SMTP_SERVER": SMTP_SERVER,
        "SMTP_PORT": SMTP_PORT,
        "SENDER_EMAIL": "SET" if SENDER_EMAIL else "NOT SET",
        "SENDER_PASSWORD": "SET" if SENDER_PASSWORD else "NOT SET",
        "TEAMS_WEBHOOK_URL": "SET" if TEAMS_WEBHOOK_URL else "NOT SET",
        "VERIFICATION_URL_BASE": VERIFICATION_URL_BASE,
        "RAG_ENABLED": RAG_ENABLED,
        "ESCALATION_THRESHOLD": ESCALATION_THRESHOLD,
        "cached_pages": len(json.load(open(CRAWL_CACHE_FILE))) if os.path.exists(CRAWL_CACHE_FILE) else 0,
        "vector_store_exists": vector_store is not None
    }


@app.route("/rag/build", methods=["POST"])
def build_rag():
    """RAG vector store “Ø“Ø—Å–≥—ç—Ö –±—É—Ü–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π endpoint"""
    if not RAG_ENABLED:
        return jsonify({"error": "RAG –∏–¥—ç–≤—Ö–≥“Ø–π"}), 400
    success = build_vector_store()
    if success:
        return jsonify({
            "status": "success",
            "message": "Vector store –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–≥—ç–ª—ç—ç",
            "vector_store_path": VECTOR_STORE_PATH
        }), 200
    return jsonify({"error": "Vector store “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞"}), 500


@app.route("/rag/search", methods=["POST"])
def search_rag():
    """RAG —Ö–∞–π–ª—Ç —Ö–∏–π—Ö (—Ç–µ—Å—Ç)"""
    if not RAG_ENABLED:
        return jsonify({"error": "RAG –∏–¥—ç–≤—Ö–≥“Ø–π"}), 400
    if not vector_store:
        return jsonify({"error": "Vector store “Ø“Ø—Å—ç—ç–≥“Ø–π. /rag/build –∞—à–∏–≥–ª–∞"}), 400

    data = request.json or {}
    query = data.get("query", "").strip()
    k     = data.get("k", 5)
    if not query:
        return jsonify({"error": "Query –∑–∞–∞–≤–∞–ª –∑–∞–∞–≤–∞–ª"}), 400

    results = search_cloudmn_docs(query, k=k)
    return jsonify({
        "status": "success",
        "query": query,
        "results_count": len(results),
        "results": results
    }), 200


@app.route("/rag/status", methods=["GET"])
def rag_status():
    """RAG —Å—Ç–∞—Ç—É—Å—ã–≥ —à–∞–ª–≥–∞—Ö"""
    status = {
        "rag_enabled": RAG_ENABLED,
        "vector_store_exists": vector_store is not None,
        "vector_store_path": VECTOR_STORE_PATH,
        "cache_exists": os.path.exists(CRAWL_CACHE_FILE),
        "max_crawl_pages": CRAWL_MAX_PAGES
    }
    if status["cache_exists"]:
        try:
            cached = json.load(open(CRAWL_CACHE_FILE, encoding='utf-8'))
            status["cached_pages"] = len(cached)
        except:
            status["cached_pages"] = "Unknown"
    faiss_file = os.path.join(VECTOR_STORE_PATH, "index.faiss")
    status["vector_files"] = {
        "faiss_exists": os.path.exists(faiss_file)
    }
    return jsonify(status), 200


@app.route("/rag/refresh", methods=["POST"])
def refresh_rag():
    """Cache —É—Å—Ç–≥–∞–∂, vector store —à–∏–Ω—ç—á–ª—ç—Ö"""
    if not RAG_ENABLED:
        return jsonify({"error": "RAG –∏–¥—ç–≤—Ö–≥“Ø–π"}), 400

    # Cache —Ñ–∞–π–ª —É—Å—Ç–≥–∞—Ö
    if os.path.exists(CRAWL_CACHE_FILE):
        os.remove(CRAWL_CACHE_FILE)
        print(f"üóëÔ∏è Cache —É—Å—Ç–≥–∞–ª–∞–∞: {CRAWL_CACHE_FILE}")
    # Vector store —Ñ–∞–π–ª—É—É–¥ —É—Å—Ç–≥–∞—Ö
    for ext in ["index.faiss", "docstore.pkl"]:
        fpath = os.path.join(VECTOR_STORE_PATH, ext)
        if os.path.exists(fpath):
            os.remove(fpath)
            print(f"üóëÔ∏è Vector —Ñ–∞–π–ª—ã–≥ —É—Å—Ç–≥–∞–ª–∞–∞: {fpath}")

    success = build_vector_store()
    if success:
        return jsonify({
            "status": "success",
            "message": "RAG —Å–∏—Å—Ç–µ–º —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç"
        }), 200
    return jsonify({"error": "–®–∏–Ω—ç—á–∏–ª–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π"}), 500


@app.route("/rag/test-query", methods=["POST"])
def test_query_logic():
    """RAG –ª–æ–≥–∏–∫—ã–Ω —Ç–µ—Å—Ç —Ö–∏–π—Ö (conversation history-—Ç—ç–π)"""
    if not RAG_ENABLED:
        return jsonify({"error": "RAG –∏–¥—ç–≤—Ö–≥“Ø–π"}), 400
    data = request.json or {}
    conv_id = data.get("conv_id", "test_conv")
    query   = data.get("query", "").strip()
    if not query:
        return jsonify({"error": "Query –∑–∞–∞–≤–∞–ª"}), 400

    should_search, reason        = should_search_new_content(conv_id, query)
    should_escalate, esc_reason  = should_escalate_to_support(conv_id, query)
    history_list = user_query_history.get(conv_id, [])
    urls_list    = user_last_urls.get(conv_id, [])

    resp = {
        "status": "success",
        "conv_id": conv_id,
        "query": query,
        "should_search": should_search,
        "search_reason": reason,
        "should_escalate": should_escalate,
        "escalate_reason": esc_reason,
        "query_history": history_list,
        "saved_urls": urls_list,
        "total_queries": len(history_list)
    }

    if should_search and vector_store:
        sr = search_cloudmn_docs(query, k=2)
        resp["search_results_count"] = len(sr)
        resp["search_urls"] = [r['url'] for r in sr]

    return jsonify(resp), 200


@app.route("/rag/clear-history", methods=["POST"])
def clear_history():
    """–ê—Å—É—É–ª—Ç—ã–Ω —Ç“Ø“Ø—Ö, URL-—ã–≥ —É—Å—Ç–≥–∞—Ö"""
    data   = request.json or {}
    conv_id = data.get("conv_id", "all")
    if conv_id == "all":
        qc = len(user_query_history)
        uc = len(user_last_urls)
        user_query_history.clear()
        user_last_urls.clear()
        return jsonify({
            "status": "success",
            "message": "–ë“Ø—Ö —Ç“Ø“Ø—Ö —É—Å—Ç–ª–∞–∞",
            "conversations_cleared": qc,
            "urls_cleared": uc
        }), 200
    qc = len(user_query_history.get(conv_id, []))
    uc = len(user_last_urls.get(conv_id, []))
    user_query_history.pop(conv_id, None)
    user_last_urls.pop(conv_id, None)
    return jsonify({
        "status": "success",
        "message": f"Conversation {conv_id} —Ç“Ø“Ø—Ö —É—Å—Ç–ª–∞–∞",
        "queries_removed": qc,
        "urls_removed": uc
    }), 200


if __name__ == "__main__":
    app.run(debug=True, port=5000)
