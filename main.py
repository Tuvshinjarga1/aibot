import os
import time
import requests
import re
import jwt
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
from flask import Flask, request, jsonify, render_template_string
from openai import OpenAI

app = Flask(__name__)

# –û—Ä—á–Ω—ã —Ö—É–≤—å—Å–∞–≥—á–∏–¥
OPENAI_API_KEY    = os.environ["OPENAI_API_KEY"]
ASSISTANT_ID      = os.environ["ASSISTANT_ID"]
CHATWOOT_API_KEY  = os.environ["CHATWOOT_API_KEY"]
ACCOUNT_ID        = os.environ["ACCOUNT_ID"]
CHATWOOT_BASE_URL = "https://app.chatwoot.com"

# Email —Ç–æ—Ö–∏—Ä–≥–æ–æ
SMTP_SERVER = os.environ.get("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT = int(os.environ.get("SMTP_PORT", "587"))
SENDER_EMAIL = os.environ["SENDER_EMAIL"]
SENDER_PASSWORD = os.environ["SENDER_PASSWORD"]

# JWT —Ç–æ—Ö–∏—Ä–≥–æ–æ
JWT_SECRET = os.environ.get("JWT_SECRET", "your-secret-key-here")
VERIFICATION_URL_BASE = os.environ.get("VERIFICATION_URL_BASE", "http://localhost:5000")

# OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=OPENAI_API_KEY)

def is_valid_email(email):
    """–ò–º—ç–π–ª —Ö–∞—è–≥–∏–π–Ω —Ñ–æ—Ä–º–∞—Ç—ã–≥ —à–∞–ª–≥–∞—Ö"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def generate_verification_token(email, conv_id, contact_id):
    """–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö JWT —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö"""
    payload = {
        'email': email,
        'conv_id': conv_id,
        'contact_id': contact_id,
        'exp': datetime.utcnow() + timedelta(hours=24)  # 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ –¥—É—É—Å–Ω–∞
    }
    return jwt.encode(payload, JWT_SECRET, algorithm='HS256')

def verify_token(token):
    """JWT —Ç–æ–∫–µ–Ω—ã–≥ —à–∞–ª–≥–∞—Ö"""
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=['HS256'])
        return payload
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None

def send_verification_email(email, token):
    """–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∏–º—ç–π–ª –∏–ª–≥—ç—ç—Ö"""
    try:
        verification_url = f"{VERIFICATION_URL_BASE}/verify?token={token}"
        
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = email
        msg['Subject'] = "–ò–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É"
        
        body = f"""
        –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!
        
        –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥–∏–π–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –¥–æ–æ—Ä—Ö –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É:
        
        {verification_url}
        
        –≠–Ω—ç –ª–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–Ω–æ.
        
        –•—ç—Ä—ç–≤ —Ç–∞ –±–∏—à –±–æ–ª –±–∏–¥—ç–Ω–¥ –º—ç–¥—ç–≥–¥—ç–Ω—ç “Ø“Ø.
        
        –ë–∞—è—Ä–ª–∞–ª–∞–∞!
        """
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        server.send_message(msg)
        server.quit()
        
        return True
    except Exception as e:
        print(f"–ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False

def get_contact(contact_id):
    """Contact –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
    resp = requests.get(url, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def update_contact(contact_id, attrs):
    """Contact-–∏–π–Ω custom attributes —à–∏–Ω—ç—á–ª—ç—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
    payload = {"custom_attributes": attrs}
    resp = requests.put(url, json=payload, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def get_conversation(conv_id):
    """Conversation –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
    resp = requests.get(url, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def update_conversation(conv_id, attrs):
    """Conversation-–∏–π–Ω custom attributes —à–∏–Ω—ç—á–ª—ç—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/custom_attributes"
    payload = {"custom_attributes": attrs}
    resp = requests.post(url, json=payload, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def send_to_chatwoot(conv_id, text):
    """Chatwoot —Ä—É—É –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/messages"
    headers = {"api_access_token": CHATWOOT_API_KEY}
    payload = {"content": text, "message_type": "outgoing"}
    r = requests.post(url, json=payload, headers=headers)
    r.raise_for_status()

def get_ai_response(thread_id, message_content):
    """OpenAI Assistant-—ç—ç—Å —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö"""
    try:
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂–∏–π–≥ thread —Ä—É—É –Ω—ç–º—ç—Ö
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=message_content
        )

        # Assistant run “Ø“Ø—Å–≥—ç—Ö
        run = client.beta.threads.runs.create(
            thread_id=thread_id, 
            assistant_id=ASSISTANT_ID
        )

        # Run –¥—É—É—Å–∞—Ö—ã–≥ —Ö“Ø–ª—ç—ç—Ö
        max_wait = 30
        wait_count = 0
        while wait_count < max_wait:
            run_status = client.beta.threads.runs.retrieve(
                thread_id=thread_id, 
                run_id=run.id
            )
            
            if run_status.status == "completed":
                break
            elif run_status.status in ["failed", "cancelled", "expired"]:
                return "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
                
            time.sleep(1)
            wait_count += 1

        if wait_count >= max_wait:
            return "–•–∞—Ä–∏—É–ª–∞—Ö–∞–¥ —Ö—ç—Ç —É–¥–∞–∂ –±–∞–π–Ω–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."

        # Assistant-–∏–π–Ω —Ö–∞—Ä–∏—É–ª—å—Ç—ã–≥ –∞–≤–∞—Ö
        messages = client.beta.threads.messages.list(thread_id=thread_id)
        
        for msg in messages.data:
            if msg.role == "assistant":
                reply = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        reply += content_block.text.value
                return reply

        return "–•–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
        
    except Exception as e:
        print(f"AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
        return "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."

@app.route("/verify", methods=["GET"])
def verify_email():
    """–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö endpoint"""
    token = request.args.get('token')
    if not token:
        return "–¢–æ–∫–µ–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π!", 400
    
    payload = verify_token(token)
    if not payload:
        return "–¢–æ–∫–µ–Ω —Ö“Ø—á–∏–Ω–≥“Ø–π —ç—Å–≤—ç–ª —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω!", 400
    
    try:
        # Contact level –¥—ç—ç—Ä email_verified = true –≥—ç–∂ —Ç—ç–º–¥—ç–≥–ª—ç—Ö
        conv_id = payload['conv_id']
        contact_id = payload['contact_id']
        email = payload['email']
        
        # Contact –¥—ç—ç—Ä –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞–¥–≥–∞–ª–∞—Ö
        update_contact(contact_id, {
            "email_verified": "1",  # Checkbox type-–¥ string "true" –∞—à–∏–≥–ª–∞—Ö
            "verified_email": email,
            "verification_date": datetime.utcnow().isoformat()
        })
        
        # Conversation –¥—ç—ç—Ä thread –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞–¥–≥–∞–ª–∞—Ö (thread –Ω—å conversation specific)
        thread_key = f"openai_thread_{contact_id}"
        update_conversation(conv_id, {
            thread_key: None  # –®–∏–Ω—ç thread —ç—Ö–ª“Ø“Ø–ª—ç—Ö
        })
        
        # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö
        send_to_chatwoot(conv_id, f"‚úÖ –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({email}) –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞! –û–¥–æ–æ —Ç–∞ chatbot-—Ç–æ–π —Ö–∞—Ä–∏–ª—Ü–∞–∂ –±–æ–ª–Ω–æ.")
        
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                .success { color: green; font-size: 24px; margin: 20px 0; }
                .info { color: #666; font-size: 16px; }
            </style>
        </head>
        <body>
            <div class="success">‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞!</div>
            <div class="info">–¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({{ email }}) –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞.<br>–û–¥–æ–æ —Ç–∞ chatbot-—Ç–æ–π–≥–æ–æ —Ö–∞—Ä–∏–ª—Ü–∞–∂ –±–æ–ª–Ω–æ.</div>
        </body>
        </html>
        """, email=email)
        
    except Exception as e:
        print(f"Verification –∞–ª–¥–∞–∞: {e}")
        return "–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞!", 500

@app.route("/webhook", methods=["POST"])
def webhook():
    """Chatwoot webhook handler - –±“Ø—Ä—ç–Ω —à–∏–Ω—ç –ª–æ–≥–∏–∫"""
    try:
        data = request.json
        print(f"üîÑ Webhook received: {data.get('message_type', 'unknown')}")
        
        # –ó”©–≤—Ö”©–Ω incoming –º–µ—Å—Å–µ–∂ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö
        if data.get("message_type") != "incoming":
            print("‚è≠Ô∏è Skipping: not incoming message")
            return jsonify({"status": "skipped - not incoming"}), 200

        # “Æ–Ω–¥—Å—ç–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
        conv_id = data["conversation"]["id"]
        message_content = data.get("content", "").strip()
        
        print(f"üìù Conv ID: {conv_id}, Message: '{message_content}'")
        
        # Contact ID –æ–ª–æ—Ö
        contact_id = None
        if "sender" in data and data["sender"]:
            contact_id = data["sender"].get("id")
        
        if not contact_id:
            print("‚ùå Contact ID –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            send_to_chatwoot(conv_id, "–ê–ª–¥–∞–∞: –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
            return jsonify({"status": "error - no contact"}), 400

        print(f"üë§ Contact ID: {contact_id}")

        # ========== –ë–ê–¢–ê–õ–ì–ê–ê–ñ–£–£–õ–ê–õ–¢ –®–ê–õ–ì–ê–• ==========
        print("üîç –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
        
        # Contact-–∏–π–Ω custom attributes –∞–≤–∞—Ö (webhook-—ç—ç—Å —à—É—É–¥)
        is_verified = False
        verified_email = ""
        
        # Webhook –¥–æ—Ç–æ—Ä contact –º—ç–¥—ç—ç–ª—ç–ª –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        if "conversation" in data and "meta" in data["conversation"] and "sender" in data["conversation"]["meta"]:
            sender_meta = data["conversation"]["meta"]["sender"]
            if "custom_attributes" in sender_meta:
                contact_attrs = sender_meta["custom_attributes"]
                email_verified_value = contact_attrs.get("email_verified", "")
                verified_email = contact_attrs.get("verified_email", "")
                
                # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç —à–∞–ª–≥–∞—Ö
                is_verified = str(email_verified_value).lower() in ["true", "1", "yes"]
                
                print(f"üìä Webhook-—ç—ç—Å –∞–≤—Å–∞–Ω: email_verified='{email_verified_value}', verified_email='{verified_email}'")
                print(f"‚úÖ Is verified: {is_verified}")
        
        # –•—ç—Ä—ç–≤ webhook –¥—ç—ç—Ä –±–∞–π—Ö–≥“Ø–π –±–æ–ª API-–∞–∞—Ä –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞—Ö
        if not is_verified:
            print("üîç API-–∞–∞—Ä –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
            try:
                contact = get_contact(contact_id)
                contact_attrs = contact.get("custom_attributes", {})
                email_verified_value = contact_attrs.get("email_verified", "")
                verified_email = contact_attrs.get("verified_email", "")
                
                is_verified = str(email_verified_value).lower() in ["true", "1", "yes"]
                print(f"üìä API-–∞–∞—Å –∞–≤—Å–∞–Ω: email_verified='{email_verified_value}', verified_email='{verified_email}'")
                print(f"‚úÖ Is verified: {is_verified}")
            except Exception as e:
                print(f"‚ùå API –∞–ª–¥–∞–∞: {e}")
                is_verified = False

        # ========== –ë–ê–¢–ê–õ–ì–ê–ê–ñ–£–£–õ–ê–õ–¢–´–ù “Æ–ô–õ–î–≠–õ ==========
        if not is_verified:
            print("üö´ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–∞–≥“Ø–π - –∏–º—ç–π–ª —à–∞–∞—Ä–¥–∞–∂ –±–∞–π–Ω–∞")
            
            # –ò–º—ç–π–ª —Ö–∞—è–≥ —à–∞–ª–≥–∞—Ö
            if is_valid_email(message_content):
                print(f"üìß –ó”©–≤ –∏–º—ç–π–ª: {message_content}")
                
                # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö
                token = generate_verification_token(message_content, conv_id, contact_id)
                
                # –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö
                if send_verification_email(message_content, token):
                    send_to_chatwoot(conv_id, 
                        f"üìß –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({message_content}) —Ä“Ø“Ø –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –ª–∏–Ω–∫ –∏–ª–≥—ç—ç–ª—ç—ç.\n\n"
                        "–ò–º—ç–π–ª—ç—ç —à–∞–ª–≥–∞–∞–¥ –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É. –õ–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–Ω–æ.\n\n"
                        "‚ö†Ô∏è Spam —Ñ–æ–ª–¥–µ—Ä—ã–≥ —à–∞–ª–≥–∞—Ö–∞–∞ –º–∞—Ä—Ç—É—É–∑–∞–π!")
                    print("‚úÖ –ò–º—ç–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç")
                else:
                    send_to_chatwoot(conv_id, "‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.")
                    print("‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞")
            else:
                print(f"‚ùå –ë—É—Ä—É—É –∏–º—ç–π–ª —Ñ–æ—Ä–º–∞—Ç: '{message_content}'")
                send_to_chatwoot(conv_id, 
                    "üëã –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! Chatbot –∞—à–∏–≥–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ —ç—Ö–ª—ç—ç–¥ –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É.\n\n"
                    "üìß –ó”©–≤ –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∏—á—ç—ç–¥ –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø.\n"
                    "–ñ–∏—à—ç—ç: example@gmail.com")
            
            return jsonify({"status": "waiting_verification"}), 200

        # ========== AI CHATBOT –ê–ñ–ò–õ–õ–£–£–õ–ê–• ==========
        print(f"ü§ñ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á ({verified_email}) - AI chatbot –∞–∂–∏–ª–ª—É—É–ª–∂ –±–∞–π–Ω–∞")
        
        # Thread –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
        conv = get_conversation(conv_id)
        conv_attrs = conv.get("custom_attributes", {})
        
        thread_key = f"openai_thread_{contact_id}"
        thread_id = conv_attrs.get(thread_key)
        
        # Thread —à–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        if not thread_id:
            print("üßµ –®–∏–Ω—ç thread “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")
            thread = client.beta.threads.create()
            thread_id = thread.id
            update_conversation(conv_id, {thread_key: thread_id})
            print(f"‚úÖ Thread “Ø“Ø—Å–≥—ç–ª—ç—ç: {thread_id}")
        else:
            print(f"üßµ –û–¥–æ–æ –±–∞–π–≥–∞–∞ thread –∞—à–∏–≥–ª–∞–∂ –±–∞–π–Ω–∞: {thread_id}")

        # AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö
        print("ü§ñ AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤—á –±–∞–π–Ω–∞...")
        ai_response = get_ai_response(thread_id, message_content)
        
        # Chatwoot —Ä—É—É –∏–ª–≥—ç—ç—Ö
        send_to_chatwoot(conv_id, ai_response)
        print(f"‚úÖ AI —Ö–∞—Ä–∏—É–ª—Ç –∏–ª–≥—ç—ç–ª—ç—ç: {ai_response[:50]}...")
        
        return jsonify({"status": "success"}), 200

    except Exception as e:
        print(f"üí• Webhook –∞–ª–¥–∞–∞: {e}")
        return jsonify({"status": f"error: {str(e)}"}), 500

@app.route("/bot/teams", methods=["POST"])
def teams_bot_handler():
    data = request.json
    print(f"üì© Teams message received: {data}")

    # Teams-—Å –∏—Ä—Å—ç–Ω –º–µ—Å—Å–µ–∂—ç—ç—Å —Ç–µ–∫—Å—Ç –∞–≤–∞—Ö
    user_text = data.get("text", "").strip()
    if not user_text:
        return jsonify({"type": "message", "text": "‚ö†Ô∏è –ú–µ—Å—Å–µ–∂ —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞."}), 200

    # ‚ö†Ô∏è –¢–∞ —ç–Ω–¥ conv_id-–≥ ”©”©—Ä–∏–π–Ω —Å–∏—Å—Ç–µ–º—Ç—ç–π —É—è—Ö –ª–æ–≥–∏–∫ –æ—Ä—É—É–ª–∂ –±–æ–ª–Ω–æ
    conv_id = os.environ.get("DEFAULT_CONV_ID")  # —ç—Å–≤—ç–ª API-—Ä —Ö–∞—Ä–≥–∞–ª–∑–∞—Ö conv_id –æ–ª–∂ –±–æ–ª–Ω–æ

    if not conv_id:
        return jsonify({"type": "message", "text": "‚ùå Conv ID —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞."}), 200

    # Chatwoot —Ä—É—É agent —Ö–∞—Ä–∏—É –∏–ª–≥—ç—ç—Ö
    try:
        send_to_chatwoot(conv_id, f"üí¨ Teams Agent: {user_text}")
        return jsonify({"type": "message", "text": "‚úÖ Chatwoot —Ä—É—É –∏–ª–≥—ç—ç–ª—ç—ç!"}), 200
    except Exception as e:
        print(f"‚ùå Chatwoot-–¥ –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return jsonify({"type": "message", "text": "‚ùå Chatwoot —Ä—É—É –∏–ª–≥—ç—ç–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π."}), 200


if __name__ == "__main__":
    app.run(debug=True, port=5000)