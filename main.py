import os
import time
import requests
import threading
from datetime import datetime
from flask import Flask, request, jsonify

# ‚îÄ‚îÄ Load .env ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from dotenv import load_dotenv
load_dotenv()

# ‚îÄ‚îÄ Logging ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# ‚îÄ‚îÄ Environment variables ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
OPENAI_API_KEY    = os.getenv("OPENAI_API_KEY", "").strip()
ASSISTANT_ID      = os.getenv("ASSISTANT_ID", "").strip()

CHATWOOT_API_KEY  = os.getenv("CHATWOOT_API_KEY", "").strip()
ACCOUNT_ID        = os.getenv("ACCOUNT_ID", "").strip()
CHATWOOT_BASE_URL = os.getenv("CHATWOOT_BASE_URL", "https://app.chatwoot.com").rstrip("/")

TEAMS_WEBHOOK_URL = os.getenv("TEAMS_WEBHOOK_URL", "").strip()
MAX_AI_RETRIES    = 2

# ‚îÄ‚îÄ OpenAI client ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from openai import OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# ‚îÄ‚îÄ Chatwoot helper functions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def send_to_chatwoot(conv_id: int, text: str) -> None:
    """
    Chatwoot —Ä—É—É outgoing (–∞–≥–µ–Ω—Ç—ã–Ω) –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö
    """
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/messages"
    headers = {
        "api_access_token": CHATWOOT_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {
        "content": text,
        "message_type": "outgoing",
        "private": False
    }
    logger.info(f"üì§ Sending to Chatwoot: {url}  payload={payload}")
    resp = requests.post(url, json=payload, headers=headers)
    resp.raise_for_status()
    logger.info(f"üì• Chatwoot response: {resp.status_code}")

def get_conversation(conv_id: int) -> dict:
    """
    Conversation –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
    """
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
    headers = {"api_access_token": CHATWOOT_API_KEY}
    resp = requests.get(url, headers=headers)
    resp.raise_for_status()
    return resp.json()

def update_conversation(conv_id: int, attrs: dict) -> None:
    """
    Conversation-–∏–π–Ω custom_attributes —à–∏–Ω—ç—á–ª—ç—Ö
    """
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/custom_attributes"
    headers = {"api_access_token": CHATWOOT_API_KEY, "Content-Type": "application/json"}
    payload = {"custom_attributes": attrs}
    resp = requests.post(url, json=payload, headers=headers)
    resp.raise_for_status()

def get_contact(contact_id: int) -> dict:
    """
    Contact –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
    """
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
    headers = {"api_access_token": CHATWOOT_API_KEY}
    resp = requests.get(url, headers=headers)
    resp.raise_for_status()
    return resp.json()

def update_contact(contact_id: int, attrs: dict) -> None:
    """
    Contact-–∏–π–Ω custom_attributes —à–∏–Ω—ç—á–ª—ç—Ö
    """
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
    headers = {"api_access_token": CHATWOOT_API_KEY, "Content-Type": "application/json"}
    payload = {"custom_attributes": attrs}
    resp = requests.put(url, json=payload, headers=headers)
    resp.raise_for_status()

# ‚îÄ‚îÄ AI Assistant helper functions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def clean_ai_response(response: str) -> str:
    """
    AI Assistant-–∞–∞—Å –∏—Ä—Å—ç–Ω raw —Ç–µ–∫—Å—Ç–∏–π–≥ —à–∞–∞—Ä–¥–ª–∞–≥–∞–≥“Ø–π JSON “Ø–ª–¥—ç–≥–¥—ç–ª–≥“Ø–π –±–æ–ª–≥–æ—Ö.
    –≠–Ω–≥–∏–π–Ω —Ö—ç–ª–±—ç—Ä—Ç –æ—Ä—É—É–ª–Ω–∞.
    """
    # –Ø–º–∞—Ä —á JSON —Ñ–æ—Ä–º–∞—Ç, –∏–ª“Ø“Ø–¥—ç–ª –º”©—Ä –≥–∞—Ä—Å–∞–Ω –±–∞–π–≤–∞–ª –∞—Ä–∏–ª–≥–∞–Ω–∞
    import re, json

    # –•—ç—Ä–≤—ç—ç —Ç”©—Ä”©–ª JSON –±–æ–ª —Ç–µ–∫—Å—Ç –±–æ–ª–≥–æ–Ω –±—É—Ü–∞–∞—Ö
    try:
        if response.strip().startswith("{") and response.strip().endswith("}"):
            data = json.loads(response)
            # –¢—É—Ö–∞–π–Ω —Ç–∞–Ω–∏–ª—Ü—É—É–ª–∞–ª—Ç –±–∞–π—Å–∞–Ω –±–æ–ª —ç–Ω–≥–∏–π–Ω –º–µ—Å—Å–µ–∂ –±–æ–ª–≥–æ–∂ –±—É—Ü–∞–∞–Ω–∞
            return "–¢–∞–Ω—ã —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞. –£–¥–∞—Ö–≥“Ø–π —Ö–∞—Ä–∏—É–ª—Ç ”©–≥”©—Ö –±–æ–ª–Ω–æ."
    except json.JSONDecodeError:
        pass

    # JSON “Ø–ª–¥—ç–≥–¥—ç–ª pattern —É—Å—Ç–≥–∞—Ö
    response = re.sub(r'\{[^}]*\}', '', response)
    # –ò–ª“Ø“Ø–¥—ç–ª —Ö–æ–æ—Å–æ–Ω –º”©—Ä, –∑–∞–π–≥ —Ü—ç–≤—ç—Ä–ª—ç—Ö
    response = re.sub(r'\n\s*\n', '\n', response).strip()

    # –•—ç—Ä–≤—ç—ç –±–∏—á–∏–≥–¥—ç–ª –º–∞—à –±–æ–≥–∏–Ω–æ –±–∞–π–≤–∞–ª default —Ö–∞—Ä–∏—É –≥–∞—Ä–≥–∞–Ω–∞
    if len(response) < 20:
        return "–¢–∞–Ω—ã —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞. –£–¥–∞—Ö–≥“Ø–π —Ö–∞—Ä–∏—É–ª—Ç ”©–≥”©—Ö –±–æ–ª–Ω–æ."

    return response

def get_ai_response(thread_id: str, message_content: str, conv_id: int = None,
                    customer_email: str = None, retry_count: int = 0) -> str:
    """
    OpenAI Assistant-—ç—ç—Å —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö:
    - Thread-–¥ user –º–µ—Å—Å–µ–∂ –Ω—ç–º—ç—Ö
    - run “Ø“Ø—Å–≥—ç–Ω —Ö–∞—Ä–∏—É–ª—Ç —Ö“Ø–ª—ç—ç—Ö
    - assistant-–≥–∏–π–Ω reply-–≥ —Ü—ç–≤—ç—Ä–ª—ç–∂ –±—É—Ü–∞–∞—Ö
    """
    try:
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂–∏–π–≥ thread-–¥ –Ω—ç–º—ç—Ö
        client.beta.threads.messages.create(thread_id=thread_id, role="user", content=message_content)

        # Assistant run “Ø“Ø—Å–≥—ç—Ö
        run = client.beta.threads.runs.create(thread_id=thread_id, assistant_id=ASSISTANT_ID)

        # Run –±“Ø—Ä—ç–Ω –±–æ–ª–æ—Ö —Ö“Ø—Ä—Ç—ç–ª —Ö“Ø–ª—ç—ç—Ö (max 30 —Å–µ–∫—É–Ω–¥)
        max_wait = 30
        wait_count = 0
        while wait_count < max_wait:
            run_status = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
            if run_status.status == "completed":
                break
            elif run_status.status in ["failed", "cancelled", "expired"]:
                # –•—ç—Ä–≤—ç—ç —ç—Ö–Ω–∏–π —É–¥–∞–∞ –±–æ–ª Teams-–¥ –∞–ª–¥–∞–∞ —è–≤—É—É–ª–Ω–∞
                if retry_count == 0 and conv_id:
                    send_teams_notification(conv_id, message_content, customer_email,
                                            f"AI run —Å—Ç–∞—Ç—É—Å –∞–ª–¥–∞–∞: {run_status.status}", f"Run ID: {run.id}")
                return "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
            time.sleep(1)
            wait_count += 1

        if wait_count >= max_wait:
            # Timeout —Ç–æ—Ö–∏–æ–ª–¥–æ–ª–¥ Teams-–¥ –º—ç–¥—ç–≥–¥—ç–∂ –±–æ–ª–Ω–æ
            if retry_count == 0 and conv_id:
                send_teams_notification(conv_id, message_content, customer_email,
                                        "AI —Ö–∞—Ä–∏—É–ª—Ç timeout (30 —Å–µ–∫—É–Ω–¥)", f"Run ID: {run.id}")
            return "–•–∞—Ä–∏—É–ª–∞—Ö–∞–¥ —Ö—ç—Ç —É–¥–∞–∂ –±–∞–π–Ω–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."

        # assistant-–≥–∏–π–Ω reply-–≥ –∞–≤–∞—Ö
        messages = client.beta.threads.messages.list(thread_id=thread_id)
        for msg in messages.data:
            if msg.role == "assistant":
                reply = "".join([b.text.value for b in msg.content if hasattr(b, "text")])
                return clean_ai_response(reply)

        # –•–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π –±–æ–ª
        if retry_count == 0 and conv_id:
            send_teams_notification(conv_id, message_content, customer_email,
                                    "AI —Ö–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π", f"Thread ID: {thread_id}")
        return "–•–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."

    except Exception as e:
        logger.error(f"AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
        if retry_count == 0 and conv_id:
            send_teams_notification(conv_id, message_content, customer_email,
                                    "AI —Å–∏—Å—Ç–µ–º–∏–π–Ω –∞–ª–¥–∞–∞ (Exception)", f"Exception: {e}")
        return "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."

def send_teams_notification(conv_id: int, customer_message: str, customer_email: str = None,
                            escalation_reason: str = "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–∞–ª", ai_analysis: str = None) -> bool:
    """
    Microsoft Teams webhook-–¥ —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö (–∑–∞–∞–≤–∞–ª –±–∏—à)
    """
    if not TEAMS_WEBHOOK_URL:
        return False
    try:
        conv_url = f"{CHATWOOT_BASE_URL}/app/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
        error_summary = escalation_reason
        if ai_analysis:
            error_summary += f"\n\nAI –∞–Ω–∞–ª–∏–∑: {ai_analysis}"
        teams_payload = {
            "type": "message",
            "attachments": [{
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                    "type": "AdaptiveCard",
                    "version": "1.3",
                    "body": [
                        {"type": "TextBlock", "text": "üìã –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –¥“Ø–≥–Ω—ç–ª—Ç", "weight": "Bolder", "size": "Medium", "color": "Attention"},
                        {"type": "TextBlock", "text": "AI —Å–∏—Å—Ç–µ–º—Ç—ç–π –¥“Ø–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç —Ö–∏–π–≥–¥—ç–∂ –±–∞–π–Ω–∞.", "wrap": True},
                        {"type": "FactSet", "facts": [
                            {"title": "–•–∞—Ä–∏–ª—Ü–∞–≥—á:", "value": customer_email or "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π"},
                            {"title": "–ú–µ—Å—Å–µ–∂:", "value": customer_message[:300] + ("..." if len(customer_message) > 300 else "")},
                            {"title": "–¶–∞–≥:", "value": datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
                        ]}
                    ]
                }
            }]
        }
        if ai_analysis:
            teams_payload["attachments"][0]["content"]["body"].append({
                "type": "TextBlock", "text": "ü§ñ AI –¥“Ø–≥–Ω—ç–ª—Ç:", "weight": "Bolder", "size": "Medium", "spacing": "Large"
            })
            teams_payload["attachments"][0]["content"]["body"].append({
                "type": "TextBlock", "text": ai_analysis, "wrap": True, "fontType": "Monospace", "color": "Good"
            })
        teams_payload["attachments"][0]["content"]["actions"] = [
            {"type": "Action.OpenUrl", "title": "Chatwoot –¥—ç—ç—Ä —Ö–∞—Ä–∞—Ö", "url": conv_url}
        ]
        resp = requests.post(TEAMS_WEBHOOK_URL, json=teams_payload)
        resp.raise_for_status()
        return True
    except Exception as e:
        logger.error(f"Teams –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False


# ‚îÄ‚îÄ Flask Routes ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@app.route("/webhook", methods=["POST"])
def webhook_handler():
    """
    Chatwoot webhook handler:
    - –ó”©–≤—Ö”©–Ω ‚Äúincoming‚Äù –º–µ—Å—Å–µ–∂—ç–¥ —Ö–∞—Ä–∏—É ”©–≥–Ω”©.
    - –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç, RAG —Å–∏—Å—Ç–µ–º–≥“Ø–π, —ç–Ω–≥–∏–π–Ω AI Assistant-—Ç–∞–π —Ö–∞—Ä–∏–ª—Ü–∞–Ω–∞.
    """
    try:
        data = request.json or {}
        logger.info(f"üîÑ Webhook –∏—Ä–ª—ç—ç: {data.get('message_type', 'unknown')}")

        # –ó”©–≤—Ö”©–Ω ‚Äúincoming‚Äù –º–µ—Å—Å–µ–∂ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–Ω–∞
        if data.get("message_type") != "incoming":
            return jsonify({"status": "skipped - not incoming"}), 200

        # 1) conv_id –±–æ–ª–æ–Ω –º–µ—Å—Å–µ–∂–∏–π–Ω content
        conv_id = data.get("conversation", {}).get("id")
        message_content = (data.get("content") or "").strip()
        logger.info(f"üìù conv_id={conv_id}, content='{message_content}'")

        # 2) contact_id
        contact_id = None
        if data.get("sender") and data["sender"].get("id"):
            contact_id = data["sender"]["id"]

        if not conv_id or not contact_id:
            # Conversation —ç—Å–≤—ç–ª contact “Ø“Ø—Å—ç—ç–≥“Ø–π –±–æ–ª –∞–ª–¥–∞–∞
            logger.warning("‚ùå Conversation —ç—Å–≤—ç–ª Contact ID –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            return jsonify({"status": "error - missing conv_id or contact_id"}), 400

        # 3) Conversation custom_attributes-–∞–∞—Å thread_id –∞–≤–∞—Ö —ç—Å—ç—Ö
        conv = get_conversation(conv_id)
        conv_attrs = conv.get("custom_attributes", {})
        thread_key = f"openai_thread_{contact_id}"
        thread_id = conv_attrs.get(thread_key)

        # 4) –•—ç—Ä–≤—ç—ç thread_id –±–∞–π—Ö–≥“Ø–π –±–æ–ª —à–∏–Ω—ç thread “Ø“Ø—Å–≥—ç–∂, conversation-–¥ —Ö–∞–¥–≥–∞–ª–∞—Ö
        if not thread_id:
            logger.info("üßµ –®–∏–Ω—ç thread “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")
            thread = client.beta.threads.create()
            thread_id = thread.id
            update_conversation(conv_id, {thread_key: thread_id})
            logger.info(f"‚úÖ Thread “Ø“Ø—Å–≥—ç–ª—ç—ç: {thread_id}")
        else:
            logger.info(f"‚úÖ –û–¥–æ–æ –±–∞–π–≥–∞–∞ thread –∞—à–∏–≥–ª–∞–∂ –±–∞–π–Ω–∞: {thread_id}")

        # 5) AI —Ö–∞—Ä–∏—É–ª—Ç –±—ç–ª—Ç–≥—ç—Ö (thread-–¥ user –º–µ—Å—Å–µ–∂ –æ—Ä—É—É–ª–∂, assistant run —Ö“Ø–ª—ç—ç—Ö)
        ai_response_text = None
        ai_success = False

        def run_ai_assistant():
            nonlocal ai_response_text, ai_success
            retry_count = 0
            while retry_count <= MAX_AI_RETRIES:
                resp = get_ai_response(thread_id, message_content, conv_id, None, retry_count)
                if not any(err in resp for err in ["–∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", "—Ö—ç—Ç —É–¥–∞–∂ –±–∞–π–Ω–∞", "–æ–ª–¥—Å–æ–Ω–≥“Ø–π"]):
                    ai_response_text = resp
                    ai_success = True
                    logger.info(f"‚úÖ AI —Ö–∞—Ä–∏—É–ª—Ç: {resp[:50]}...")
                    break
                retry_count += 1
                if retry_count <= MAX_AI_RETRIES:
                    logger.info(f"üîÑ AI –¥–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–∂ –±–∞–π–Ω–∞... ({retry_count}/{MAX_AI_RETRIES})")
                    time.sleep(2)
            if not ai_success:
                logger.error("‚ùå AI –±“Ø—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ –±“Ø—Ç—ç–ª–≥“Ø–π—Ç—ç–≤")

        ai_thread = threading.Thread(target=run_ai_assistant)
        ai_thread.start()
        ai_thread.join(timeout=30)

        logger.info(f"üîç AI –∞–º–∂–∏–ª—Ç—Ç–∞–π: {ai_success}")

        # 6) –•–∞—Ä–∏—É–ª—Ç –±—ç–ª–¥—ç—Ö
        if ai_success:
            final_response = ai_response_text
            response_type = "AI Assistant"
        else:
            final_response = (
                "üö® –£—É—á–ª–∞–∞—Ä–∞–π, —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. "
                "–¢–∞–Ω—ã –∞—Å—É—É–ª—Ç—ã–≥ —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –±–∞–≥—Ç –¥–∞–º–∂—É—É–ª—Å–∞–Ω. –£–¥–∞—Ö–≥“Ø–π —Ö–∞—Ä–∏—É–ª—Ç ”©–≥”©—Ö –±–æ–ª–Ω–æ."
            )
            response_type = "Error - Escalated"
            # –•—ç—Ä—ç–≤ —Ö“Ø—Å–≤—ç–ª Teams —Ä“Ø“Ø –º—ç–¥—ç—ç–ª–∂ –±–æ–ª–Ω–æ
            try:
                send_teams_notification(conv_id, message_content, None,
                                        "AI Assistant —Ö–∞—Ä–∏—É–ª—Ç –∞–ª–¥–∞–∞—Ç–∞–π", None)
            except Exception as e:
                logger.error(f"‚ùå Teams –º—ç–¥—ç—ç–ª—ç—Ö –∞–ª–¥–∞–∞: {e}")

        # 7) Chatwoot —Ä—É—É outgoing —Ö–∞—Ä–∏—É –∏–ª–≥—ç—ç—Ö
        send_to_chatwoot(conv_id, final_response)
        logger.info(f"‚úÖ {response_type} —Ö–∞—Ä–∏—É–ª—Ç –∏–ª–≥—ç—ç–ª—ç—ç: {final_response[:50]}...")

        return jsonify({"status": "success"}), 200

    except Exception as e:
        logger.error(f"üí• Webhook –∞–ª–¥–∞–∞: {e}")
        return jsonify({"status": f"error: {str(e)}"}), 500

if __name__ == "__main__":
    # debug=True –±–æ–ª –∞–ª–¥–∞–∞ –≥–∞—Ä—Å–∞–Ω “Ø–µ–¥ –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞—Ä—É—É–ª–Ω–∞
    app.run(host="0.0.0.0", port=5000, debug=True)
