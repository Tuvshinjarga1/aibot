import os
import time
import requests
import re
import jwt
import smtplib
import threading
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
from flask import Flask, request, jsonify, render_template_string
from openai import OpenAI

# RAG —Å–∏—Å—Ç–µ–º–∏–π–Ω –∏–º–ø–æ—Ä—Ç –Ω—ç–º—ç—Ö
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urldefrag
from dotenv import load_dotenv
import logging
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.embeddings import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.chains import RetrievalQA
from langchain.schema import Document
from langchain_openai import OpenAI as LC_OpenAI
from langchain.prompts import PromptTemplate

# Load .env
load_dotenv()

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –û—Ä—á–Ω—ã —Ö—É–≤—å—Å–∞–≥—á–∏–¥
OPENAI_API_KEY    = os.environ.get("OPENAI_API_KEY", "")
ASSISTANT_ID      = os.environ.get("ASSISTANT_ID", "")
CHATWOOT_API_KEY  = os.environ.get("CHATWOOT_API_KEY", "")
ACCOUNT_ID        = os.environ.get("ACCOUNT_ID", "")
CHATWOOT_BASE_URL = "https://app.chatwoot.com"

# RAG —Å–∏—Å—Ç–µ–º–∏–π–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ
DOCS_BASE_URL = os.environ.get("DOCS_BASE_URL", "https://docs.cloud.mn")
VECTOR_STORE_PATH = "docs_faiss_index"

# Email —Ç–æ—Ö–∏—Ä–≥–æ–æ
SMTP_SERVER = os.environ.get("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT = int(os.environ.get("SMTP_PORT", "587"))
SENDER_EMAIL = os.environ.get("SENDER_EMAIL", "")
SENDER_PASSWORD = os.environ.get("SENDER_PASSWORD", "")

# –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç –∏–¥—ç–≤—Ö—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
EMAIL_VERIFICATION_ENABLED = bool(SENDER_EMAIL and SENDER_PASSWORD)

# Microsoft Teams —Ç–æ—Ö–∏—Ä–≥–æ–æ
TEAMS_WEBHOOK_URL = os.environ.get("TEAMS_WEBHOOK_URL")
MAX_AI_RETRIES = 2

# JWT —Ç–æ—Ö–∏—Ä–≥–æ–æ
JWT_SECRET = os.environ.get("JWT_SECRET", "your-secret-key-here")
VERIFICATION_URL_BASE = os.environ.get("VERIFICATION_URL_BASE", "http://localhost:5000")

# OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

# Debug –º—ç–¥—ç—ç–ª—ç–ª —Ö—ç–≤–ª—ç—Ö
print("üîß –°–ò–°–¢–ï–ú–ò–ô–ù –¢–û–•–ò–†–ì–û–û")
print(f"üìß –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç: {'‚úÖ –ò–¥—ç–≤—Ö—Ç—ç–π' if EMAIL_VERIFICATION_ENABLED else '‚ùå –ò–¥—ç–≤—Ö–≥“Ø–π'}")
print(f"ü§ñ OpenAI: {'‚úÖ –¢–æ—Ö–∏—Ä—É—É–ª—Å–∞–Ω' if OPENAI_API_KEY else '‚ùå –¢–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π'}")
print(f"üí¨ Chatwoot: {'‚úÖ –¢–æ—Ö–∏—Ä—É—É–ª—Å–∞–Ω' if CHATWOOT_API_KEY else '‚ùå –¢–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π'}")

if EMAIL_VERIFICATION_ENABLED:
    print(f"üìß SMTP: {SMTP_SERVER}:{SMTP_PORT}")
    print(f"üìß –ò–ª–≥—ç—ç–≥—á: {SENDER_EMAIL}")
else:
    print("‚ö†Ô∏è –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç –∏–¥—ç–≤—Ö–∂“Ø“Ø–ª—ç—Ö–∏–π–Ω —Ç—É–ª–¥ .env —Ñ–∞–π–ª–¥ SENDER_EMAIL –±–æ–ª–æ–Ω SENDER_PASSWORD —Ç–æ—Ö–∏—Ä—É—É–ª–Ω–∞ —É—É")

# =============== RAG –°–ò–°–¢–ï–ú–ò–ô–ù –§–£–ù–ö–¶–£–£–î ===============

def crawl_docs(base_url: str) -> list:
    """–î–æ–∫—É–º–µ–Ω—Ç —Å–∞–π—Ç–∞–∞—Å –º—ç–¥—ç—ç–ª—ç–ª —Ü—É–≥–ª—É—É–ª–∞—Ö"""
    seen = set()
    to_visit = {base_url}
    docs = []
    
    logger.info(f"Starting to crawl docs from {base_url}")
    
    while to_visit and len(docs) < 100:  # 100 —Ö—É—É–¥–∞—Å —Ö—è–∑–≥–∞–∞—Ä
        url = to_visit.pop()
        if url in seen:
            continue
            
        seen.add(url)
        
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # Title –∞–≤–∞—Ö
            title = soup.find('title')
            title_text = title.get_text().strip() if title else "No title"
            
            # Main content –∞–≤–∞—Ö - –∏—Ö—ç–≤—á–ª—ç–Ω article, main, .content –≥—ç—Ö –º—ç—Ç
            content_selectors = [
                'article', 'main', '[role="main"]',
                '.content', '.post-content', '.entry-content',
                '.documentation', '.docs-content', '#content'
            ]
            
            content_text = ""
            for selector in content_selectors:
                content = soup.select_one(selector)
                if content:
                    # Script, style tags –∞—Ä–∏–ª–≥–∞—Ö
                    for script in content(["script", "style", "nav", "header", "footer"]):
                        script.decompose()
                    content_text = content.get_text()
                    break
            
            # –•—ç—Ä—ç–≤ content –æ–ª–¥–æ–æ–≥“Ø–π –±–æ–ª body –∞—à–∏–≥–ª–∞—Ö
            if not content_text:
                body = soup.find('body')
                if body:
                    for script in body(["script", "style", "nav", "header", "footer"]):
                        script.decompose()
                    content_text = body.get_text()
            
            # –¢–µ–∫—Å—Ç —Ü—ç–≤—ç—Ä–ª—ç—Ö
            content_text = re.sub(r'\s+', ' ', content_text).strip()
            
            if content_text and len(content_text) > 100:  # –•–æ–æ—Å–æ–Ω —Ö—É—É–¥–∞—Å –∞–ª–≥–∞—Å–∞—Ö
                docs.append(Document(
                    page_content=content_text,
                    metadata={
                        "source": url,
                        "title": title_text,
                        "length": len(content_text)
                    }
                ))
                logger.info(f"Crawled: {title_text} ({len(content_text)} chars)")
            
            # –®–∏–Ω—ç —Ö–æ–ª–±–æ–æ—Å—É—É–¥ –æ–ª–æ—Ö
            links = soup.find_all('a', href=True)
            for link in links:
                href = link['href']
                full_url = urljoin(url, href)
                clean_url, _ = urldefrag(full_url)  # Fragment –∞—Ä–∏–ª–≥–∞—Ö
                
                # –ó”©–≤—Ö”©–Ω –∏–∂–∏–ª –¥–æ–º—ç–π–Ω
                if clean_url.startswith(base_url) and clean_url not in seen:
                    to_visit.add(clean_url)
                    
        except Exception as e:
            logger.error(f"Error crawling {url}: {str(e)}")
            continue
    
    logger.info(f"Crawling completed. Found {len(docs)} documents")
    return docs

def build_vectorstore():
    """–î–æ–∫—É–º–µ–Ω—Ç—É—É–¥–∞–∞—Å vector store –±“Ø—Ç—ç—ç—Ö"""
    try:
        logger.info("Building vector store from docs...")
        
        # –î–æ–∫—É–º–µ–Ω—Ç —Ç–∞—Ç–∞—Ö
        docs = crawl_docs(DOCS_BASE_URL)
        
        if not docs:
            logger.warning("No documents found to index")
            return None
        
        # –¢–µ–∫—Å—Ç —Ö—É–≤–∞–∞—Ö
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200,
            length_function=len,
        )
        
        splits = text_splitter.split_documents(docs)
        logger.info(f"Split documents into {len(splits)} chunks")
        
        # OpenAI embeddings
        embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)
        
        # FAISS vector store “Ø“Ø—Å–≥—ç—Ö
        vectorstore = FAISS.from_documents(splits, embeddings)
        
        # –•–∞–¥–≥–∞–ª–∞—Ö
        vectorstore.save_local(VECTOR_STORE_PATH)
        logger.info(f"Vector store saved to {VECTOR_STORE_PATH}")
        
        return vectorstore
        
    except Exception as e:
        logger.error(f"Error building vector store: {str(e)}")
        return None

def load_vectorstore():
    """–•–∞–¥–≥–∞–ª—Å–∞–Ω vector store –∞—á–∞–∞–ª–∞—Ö"""
    try:
        if not os.path.exists(VECTOR_STORE_PATH):
            logger.info("Vector store not found. Building new one...")
            return build_vectorstore()
        
        logger.info("Loading existing vector store...")
        embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)
        vectorstore = FAISS.load_local(VECTOR_STORE_PATH, embeddings, allow_dangerous_deserialization=True)
        logger.info("Vector store loaded successfully")
        return vectorstore
        
    except Exception as e:
        logger.error(f"Error loading vector store: {str(e)}")
        return build_vectorstore()

# Custom prompt for RAG
CUSTOM_PROMPT = PromptTemplate(
    input_variables=["context", "question"],
    template="""–¢–∞ Cloud.mn-–∏–π–Ω —Ç—É—Å–ª–∞–º–∂–∏–π–Ω —Å–∏—Å—Ç–µ–º –±”©–≥”©”©–¥ –¥–æ–æ—Ä—Ö –±–∞—Ä–∏–º—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã–Ω “Ø–Ω–¥—Å—ç–Ω –¥—ç—ç—Ä —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–ª—Ç–∞–Ω–¥ —Ö–∞—Ä–∏—É–ª–∞—Ö —ë—Å—Ç–æ–π.

–ë–∞—Ä–∏–º—Ç –º–∞—Ç–µ—Ä–∏–∞–ª:
{context}

–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–ª—Ç: {question}

–ó”©–≤–ª”©–º–∂:
1. –ó”©–≤—Ö”©–Ω ”©–≥”©–≥–¥—Å”©–Ω –±–∞—Ä–∏–º—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞—à–∏–≥–ª–∞–Ω–∞ —É—É
2. –•—ç—Ä—ç–≤ –±–∞—Ä–∏–º—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–¥ —Ö–∞—Ä–∏—É–ª—Ç –±–∞–π—Ö–≥“Ø–π –±–æ–ª "–£—É—á–ª–∞–∞—Ä–∞–π, —ç–Ω—ç —Ç–∞–ª–∞–∞—Ä –±–∞—Ä–∏–º—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–¥ –º—ç–¥—ç—ç–ª—ç–ª –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞" –≥—ç–∂ —Ö—ç–ª–Ω—ç “Ø“Ø
3. –¢–æ–≤—á, –æ–π–ª–≥–æ–º–∂—Ç–æ–π —Ö–∞—Ä–∏—É–ª—Ç ”©–≥–Ω”© “Ø“Ø
4. –ú–æ–Ω–≥–æ–ª —Ö—ç–ª—ç—ç—Ä —Ö–∞—Ä–∏—É–ª–Ω–∞ —É—É

–•–∞—Ä–∏—É–ª—Ç:"""
)

# Initialize RAG system
qa_chain = None
if OPENAI_API_KEY:
    try:
        vectorstore = load_vectorstore()
        if vectorstore:
            retriever = vectorstore.as_retriever(
                search_type="similarity",
                search_kwargs={"k": 5}
            )
            
            qa_chain = RetrievalQA.from_chain_type(
                llm=LC_OpenAI(
                    openai_api_key=OPENAI_API_KEY, 
                    temperature=0.1,
                    max_tokens=800,
                    model_name="gpt-3.5-turbo-instruct"
                ),
                chain_type="stuff",
                retriever=retriever,
                chain_type_kwargs={"prompt": CUSTOM_PROMPT},
                return_source_documents=True
            )
            logger.info("RAG system initialized successfully")
        
    except Exception as e:
        logger.error(f"Failed to initialize RAG system: {str(e)}")
        qa_chain = None

# =============== –≠–ù–ì–ò–ô–ù –ò–ú–≠–ô–õ –§–£–ù–ö–¶–£–£–î ===============

def is_valid_email(email):
    """–ò–º—ç–π–ª —Ö–∞—è–≥–∏–π–Ω —Ñ–æ—Ä–º–∞—Ç—ã–≥ —à–∞–ª–≥–∞—Ö"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def generate_verification_token(email, conv_id, contact_id):
    """–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö JWT —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö"""
    payload = {
        'email': email,
        'conv_id': conv_id,
        'contact_id': contact_id,
        'exp': datetime.utcnow() + timedelta(hours=24)  # 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ –¥—É—É—Å–Ω–∞
    }
    return jwt.encode(payload, JWT_SECRET, algorithm='HS256')

def verify_token(token):
    """JWT —Ç–æ–∫–µ–Ω—ã–≥ —à–∞–ª–≥–∞—Ö"""
    try:
        logger.info(f"Verifying JWT token: {token[:20]}...")
        payload = jwt.decode(token, JWT_SECRET, algorithms=['HS256'])
        logger.info("JWT token verification successful")
        return payload
    except jwt.ExpiredSignatureError:
        logger.warning("JWT token has expired")
        print("‚ùå –¢–æ–∫–µ–Ω—ã“£ —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω")
        return None
    except jwt.InvalidTokenError as e:
        logger.warning(f"Invalid JWT token: {str(e)}")
        print(f"‚ùå –ë—É—Ä—É—É —Ç–æ–∫–µ–Ω: {str(e)}")
        return None
    except Exception as e:
        logger.error(f"Unexpected error verifying JWT token: {str(e)}")
        print(f"‚ùå –¢–æ–∫–µ–Ω —à–∞–ª–≥–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {str(e)}")
        return None

def send_verification_email(email, token):
    """–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∏–º—ç–π–ª –∏–ª–≥—ç—ç—Ö - —ç–Ω–≥–∏–π–Ω —Ö—É–≤–∏–ª–±–∞—Ä"""
    if not EMAIL_VERIFICATION_ENABLED:
        print("‚ùå –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç –∏–¥—ç–≤—Ö–≥“Ø–π –±–∞–π–Ω–∞")
        return False
        
    try:
        verification_url = f"{VERIFICATION_URL_BASE}/verify?token={token}"
        
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = email
        msg['Subject'] = "–ò–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É"
        
        body = f"""
–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!

–¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥–∏–π–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –¥–æ–æ—Ä—Ö –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É:

{verification_url}

–≠–Ω—ç –ª–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–Ω–æ.

–ë–∞—è—Ä–ª–∞–ª–∞–∞!
        """
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        # SMTP —Å–µ—Ä–≤–µ—Ä—Ç —Ö–æ–ª–±–æ–≥–¥–æ—Ö
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        server.send_message(msg)
        server.quit()
        
        print(f"‚úÖ –ò–º—ç–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç: {email}")
        return True
        
    except Exception as e:
        print(f"‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False

# =============== CHATWOOT –§–£–ù–ö–¶–£–£–î ===============

def get_contact(contact_id):
    """Contact –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
    headers = {"api_access_token": CHATWOOT_API_KEY}
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json()["payload"]["contact"]

def update_contact(contact_id, custom_attributes):
    """Contact –¥—ç—ç—Ä custom attribute —à–∏–Ω—ç—á–ª—ç—Ö"""
    try:
        url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
        headers = {"api_access_token": CHATWOOT_API_KEY}
        payload = {"custom_attributes": custom_attributes}
        
        logger.info(f"Updating contact {contact_id} with attributes: {custom_attributes}")
        response = requests.put(url, json=payload, headers=headers, timeout=30)
        
        if response.status_code != 200:
            logger.error(f"Chatwoot API error: {response.status_code} - {response.text}")
            
        response.raise_for_status()
        logger.info("Contact updated successfully")
        return response.json()
        
    except requests.exceptions.Timeout:
        logger.error("Timeout updating contact")
        raise
    except requests.exceptions.RequestException as e:
        logger.error(f"Request error updating contact: {str(e)}")
        raise
    except Exception as e:
        logger.error(f"Unexpected error updating contact: {str(e)}")
        raise

def get_conversation(conv_id):
    """Conversation –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
    headers = {"api_access_token": CHATWOOT_API_KEY}
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json()["payload"]["conversation"]

def update_conversation(conv_id, custom_attributes):
    """Conversation –¥—ç—ç—Ä custom attribute —à–∏–Ω—ç—á–ª—ç—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/custom_attributes"
    headers = {"api_access_token": CHATWOOT_API_KEY}
    payload = {"custom_attributes": custom_attributes}
    response = requests.post(url, json=payload, headers=headers)
    response.raise_for_status()
    return response.json()

def send_to_chatwoot(conv_id, text):
    """Chatwoot —Ä—É—É –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö"""
    try:
        url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/messages"
        headers = {"api_access_token": CHATWOOT_API_KEY}
        payload = {"content": text, "message_type": "outgoing"}
        
        logger.info(f"Sending message to conversation {conv_id}: {text[:50]}...")
        r = requests.post(url, json=payload, headers=headers, timeout=30)
        
        if r.status_code != 200:
            logger.error(f"Chatwoot API error: {r.status_code} - {r.text}")
            
        r.raise_for_status()
        logger.info("Message sent successfully")
        return r.json()
        
    except requests.exceptions.Timeout:
        logger.error("Timeout sending message to Chatwoot")
        raise
    except requests.exceptions.RequestException as e:
        logger.error(f"Request error sending message: {str(e)}")
        raise
    except Exception as e:
        logger.error(f"Unexpected error sending message: {str(e)}")
        raise

def get_ai_response(thread_id, message_content):
    """OpenAI Assistant-—ç—ç—Å —ç–Ω–≥–∏–π–Ω —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö"""
    if not client:
        return "OpenAI —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞"
        
    try:
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂–∏–π–≥ thread —Ä—É—É –Ω—ç–º—ç—Ö
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=message_content
        )

        # Assistant run “Ø“Ø—Å–≥—ç—Ö
        run = client.beta.threads.runs.create(
            thread_id=thread_id, 
            assistant_id=ASSISTANT_ID
        )

        # Run –¥—É—É—Å–∞—Ö—ã–≥ —Ö“Ø–ª—ç—ç—Ö
        max_wait = 30
        wait_count = 0
        while wait_count < max_wait:
            run_status = client.beta.threads.runs.retrieve(
                thread_id=thread_id, 
                run_id=run.id
            )
            
            if run_status.status == "completed":
                break
            elif run_status.status in ["failed", "cancelled", "expired"]:
                return "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
                
            time.sleep(1)
            wait_count += 1

        if wait_count >= max_wait:
            return "–•–∞—Ä–∏—É–ª–∞—Ö–∞–¥ —Ö—ç—Ç —É–¥–∞–∂ –±–∞–π–Ω–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."

        # Assistant-–∏–π–Ω —Ö–∞—Ä–∏—É–ª—Ç—ã–≥ –∞–≤–∞—Ö
        messages = client.beta.threads.messages.list(thread_id=thread_id)
        
        for msg in messages.data:
            if msg.role == "assistant":
                reply = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        reply += content_block.text.value
                return reply

        return "–•–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
        
    except Exception as e:
        print(f"AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
        return "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."

# =============== ROUTES ===============

@app.route("/verify", methods=["GET"])
def verify_email():
    """–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö endpoint"""
    try:
        token = request.args.get('token')
        if not token:
            logger.warning("Token parameter missing from verify request")
            return "–¢–æ–∫–µ–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π!", 400
        
        logger.info(f"Attempting to verify email with token: {token[:20]}...")
        
        payload = verify_token(token)
        if not payload:
            logger.warning("Token verification failed - invalid or expired")
            return "–¢–æ–∫–µ–Ω —Ö“Ø—á–∏–Ω–≥“Ø–π —ç—Å–≤—ç–ª —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω!", 400
        
        # Token-–∏–π–Ω –¥–∞—Ç–∞ —à–∞–ª–≥–∞—Ö
        conv_id = payload.get('conv_id')
        contact_id = payload.get('contact_id')
        email = payload.get('email')
        
        if not all([conv_id, contact_id, email]):
            logger.error(f"Invalid token payload: conv_id={conv_id}, contact_id={contact_id}, email={email}")
            return "–¢–æ–∫–µ–Ω –±—É—Ä—É—É —Ñ–æ—Ä–º–∞—Ç—Ç–∞–π –±–∞–π–Ω–∞!", 400
        
        logger.info(f"Token verified for email: {email}, conv_id: {conv_id}, contact_id: {contact_id}")
        
        # Chatwoot API key —à–∞–ª–≥–∞—Ö
        if not CHATWOOT_API_KEY or not ACCOUNT_ID:
            logger.error("Chatwoot configuration missing")
            return "–°–∏—Å—Ç–µ–º–∏–π–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ–Ω—ã –∞–ª–¥–∞–∞. –¢–µ—Ö–Ω–∏–∫–∏–π–Ω –¥—ç–º–∂–ª—ç–≥—Ç —Ö–∞–Ω–¥–∞–Ω–∞ —É—É.", 500
        
        try:
            # Contact –¥—ç—ç—Ä –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞–¥–≥–∞–ª–∞—Ö
            logger.info(f"Updating contact {contact_id} verification status")
            update_contact(contact_id, {
                "email_verified": "true",
                "verified_email": email,
                "verification_date": datetime.utcnow().isoformat()
            })
            logger.info("Contact updated successfully")
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Chatwoot API error when updating contact: {e}")
            if hasattr(e, 'response') and e.response is not None:
                logger.error(f"Response status: {e.response.status_code}, Response body: {e.response.text}")
            # Continue execution even if contact update fails
        except Exception as e:
            logger.error(f"Unexpected error updating contact: {e}")
            # Continue execution
        
        try:
            # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö
            logger.info(f"Sending verification success message to conversation {conv_id}")
            send_to_chatwoot(conv_id, f"‚úÖ –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({email}) –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞! –û–¥–æ–æ —Ç–∞ chatbot-—Ç–æ–π —Ö–∞—Ä–∏–ª—Ü–∞–∂ –±–æ–ª–Ω–æ.")
            logger.info("Verification message sent successfully")
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Chatwoot API error when sending message: {e}")
            if hasattr(e, 'response') and e.response is not None:
                logger.error(f"Response status: {e.response.status_code}, Response body: {e.response.text}")
            # Continue to show success page even if message fails
        except Exception as e:
            logger.error(f"Unexpected error sending message: {e}")
            # Continue to show success page
        
        # –ê–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω —Ö—É—É–¥–∞—Å —Ö–∞—Ä—É—É–ª–∞—Ö
        logger.info("Displaying verification success page")
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: #f5f5f5; }
                .container { max-width: 500px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                .success { color: #4CAF50; font-size: 24px; margin: 20px 0; }
                .info { color: #666; font-size: 16px; line-height: 1.5; }
                .email { background: #f0f0f0; padding: 10px; border-radius: 5px; font-family: monospace; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="success">‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞!</div>
                <div class="info">–¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥:<br><span class="email">{{ email }}</span><br><br>–±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞. –û–¥–æ–æ —Ç–∞ chatbot-—Ç–æ–π–≥–æ–æ —Ö–∞—Ä–∏–ª—Ü–∞–∂ –±–æ–ª–Ω–æ.</div>
            </div>
        </body>
        </html>
        """, email=email)
        
    except Exception as e:
        logger.error(f"Verification endpoint error: {str(e)}", exc_info=True)
        return f"–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}", 500

@app.route("/webhook", methods=["POST"])
def webhook():
    """–≠–Ω–≥–∏–π–Ω Webhook Handler"""
    try:
        data = request.json
        print(f"üîÑ Webhook —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞: {data.get('message_type', 'unknown')}")
        
        # –ó”©–≤—Ö”©–Ω incoming –º–µ—Å—Å–µ–∂ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö
        if data.get("message_type") != "incoming":
            return jsonify({"status": "skipped"}), 200

        # “Æ–Ω–¥—Å—ç–Ω –º—ç–¥—ç—ç–ª—ç–ª
        conv_id = data["conversation"]["id"]
        message_content = data.get("content", "").strip()
        contact_id = data.get("sender", {}).get("id")
        
        if not contact_id:
            send_to_chatwoot(conv_id, "‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
            return jsonify({"status": "error"}), 400

        print(f"üìù Conv: {conv_id}, Contact: {contact_id}, Message: '{message_content}'")

        # ========== –ò–ú–≠–ô–õ –ë–ê–¢–ê–õ–ì–ê–ê–ñ–£–£–õ–ê–õ–¢ –®–ê–õ–ì–ê–• ==========
        
        is_verified = False
        verified_email = ""
        
        if EMAIL_VERIFICATION_ENABLED:
            # Contact-–∏–π–Ω –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç —à–∞–ª–≥–∞—Ö
            try:
                contact = get_contact(contact_id)
                contact_attrs = contact.get("custom_attributes", {})
                is_verified = contact_attrs.get("email_verified") == "true"
                verified_email = contact_attrs.get("verified_email", "")
                print(f"‚úÖ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª—Å–∞–Ω: {is_verified}, –ò–º—ç–π–ª: {verified_email}")
            except Exception as e:
                print(f"‚ùå Contact –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
                is_verified = False
        else:
            # –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç –∏–¥—ç–≤—Ö–≥“Ø–π –±–æ–ª —à—É—É–¥ –¥–∞–º–∂—É—É–ª–∞—Ö
            print("‚ö†Ô∏è –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç –∏–¥—ç–≤—Ö–≥“Ø–π - —à—É—É–¥ AI —Ä—É—É –¥–∞–º–∂—É—É–ª–∂ –±–∞–π–Ω–∞")
            is_verified = True
            verified_email = "no-verification@example.com"

        # ========== –ë–ê–¢–ê–õ–ì–ê–ê–ñ–£–£–õ–ê–ê–ì“Æ–ô –ë–û–õ –ò–ú–≠–ô–õ –®–ê–ê–†–î–ê–• ==========
        
        if not is_verified:
            print("üö´ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–∞–≥“Ø–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á")
            
            if is_valid_email(message_content):
                # –ó”©–≤ –∏–º—ç–π–ª —Ö“Ø–ª—ç—ç–Ω –∞–≤—Å–∞–Ω
                print(f"üìß –ó”©–≤ –∏–º—ç–π–ª —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞: {message_content}")
                
                token = generate_verification_token(message_content, conv_id, contact_id)
                
                if send_verification_email(message_content, token):
                    send_to_chatwoot(conv_id, 
                        f"üìß –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({message_content}) —Ä“Ø“Ø –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –ª–∏–Ω–∫ –∏–ª–≥—ç—ç–ª—ç—ç.\n\n"
                        "–ò–º—ç–π–ª—ç—ç —à–∞–ª–≥–∞–∞–¥ –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É. –õ–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–Ω–æ.")
                else:
                    send_to_chatwoot(conv_id, 
                        "‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –¢–µ—Ö–Ω–∏–∫–∏–π–Ω –¥—ç–º–∂–ª—ç–≥—Ç —Ö–∞–Ω–¥–∞–Ω–∞ —É—É.")
            else:
                # –ë—É—Ä—É—É –∏–º—ç–π–ª —Ñ–æ—Ä–º–∞—Ç
                send_to_chatwoot(conv_id, 
                    "üëã –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!\n\n"
                    "üìß –¢–∞ —ç—Ö–ª—ç—ç–¥ –∑”©–≤ –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∏—á—ç—ç–¥ –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø.\n"
                    "–ñ–∏—à—ç—ç: example@gmail.com")
            
            return jsonify({"status": "waiting_verification"}), 200

        # ========== –ë–ê–¢–ê–õ–ì–ê–ê–ñ–£–£–õ–°–ê–ù –•–≠–†–≠–ì–õ–≠–ì–ß - AI-–î –î–ê–ú–ñ–£–£–õ–ê–• ==========
        
        print("‚úÖ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª—Å–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á - AI —Ä—É—É –¥–∞–º–∂—É—É–ª–∂ –±–∞–π–Ω–∞")
        
        # Thread –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö/“Ø“Ø—Å–≥—ç—Ö
        try:
            conv = get_conversation(conv_id)
            conv_attrs = conv.get("custom_attributes", {})
            thread_key = f"openai_thread_{contact_id}"
            thread_id = conv_attrs.get(thread_key)
            
            # Thread —à–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç—Ö
            if not thread_id:
                print("üßµ –®–∏–Ω—ç thread “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")
                thread = client.beta.threads.create()
                thread_id = thread.id
                update_conversation(conv_id, {thread_key: thread_id})
                print(f"‚úÖ Thread “Ø“Ø—Å–≥—ç–ª—ç—ç: {thread_id}")
        except Exception as e:
            print(f"‚ùå Thread “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
            send_to_chatwoot(conv_id, "‚ùå –¢–µ—Ö–Ω–∏–∫–∏–π–Ω –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.")
            return jsonify({"status": "error"}), 500

        # AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö
        try:
            ai_response = get_ai_response(thread_id, message_content)
            send_to_chatwoot(conv_id, ai_response)
            print(f"‚úÖ AI —Ö–∞—Ä–∏—É–ª—Ç –∏–ª–≥—ç—ç–ª—ç—ç: {ai_response[:50]}...")
        except Exception as e:
            print(f"‚ùå AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
            send_to_chatwoot(conv_id, "‚ùå –£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.")

        return jsonify({"status": "success"}), 200

    except Exception as e:
        print(f"üí• Webhook –∞–ª–¥–∞–∞: {e}")
        return jsonify({"status": f"error: {str(e)}"}), 500

@app.route("/health", methods=["GET"])
def health():
    """–°–∏—Å—Ç–µ–º–∏–π–Ω health check"""
    status = {
        "status": "ok",
        "timestamp": datetime.utcnow().isoformat(),
        "components": {
            "openai": client is not None and bool(OPENAI_API_KEY),
            "chatwoot": bool(CHATWOOT_API_KEY and ACCOUNT_ID),
            "email": EMAIL_VERIFICATION_ENABLED,
            "rag": qa_chain is not None
        }
    }
    
    # –ù–∏–π—Ç —Å—Ç–∞—Ç—É—Å —à–∞–ª–≥–∞—Ö
    all_ok = all(status["components"].values())
    if not all_ok:
        status["status"] = "warning"
        
    return jsonify(status), 200 if all_ok else 206

@app.route("/", methods=["GET"])
def home():
    """“Æ–Ω–¥—Å—ç–Ω —Ö—É—É–¥–∞—Å"""
    return render_template_string("""
    <!DOCTYPE html>
    <html>
    <head>
        <title>AI Assistant –°–∏—Å—Ç–µ–º–∏–π–Ω –¢”©–≤</title>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; padding: 20px; background: #f5f5f5; }
            .container { background: white; padding: 40px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            h1 { color: #333; text-align: center; }
            .status { margin: 20px 0; }
            .status-item { padding: 10px; margin: 5px 0; border-radius: 5px; }
            .status-ok { background: #d4edda; color: #155724; }
            .status-error { background: #f8d7da; color: #721c24; }
            .info { background: #e7f3ff; padding: 20px; border-radius: 5px; margin: 20px 0; }
            code { background: #f4f4f4; padding: 2px 5px; border-radius: 3px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ü§ñ AI Assistant –°–∏—Å—Ç–µ–º–∏–π–Ω –¢”©–≤</h1>
            
            <div class="status">
                <h3>–°–∏—Å—Ç–µ–º–∏–π–Ω —Å—Ç–∞—Ç—É—Å:</h3>
                <div class="status-item {{ 'status-ok' if components.openai else 'status-error' }}">
                    OpenAI: {{ '‚úÖ –ò–¥—ç–≤—Ö—Ç—ç–π' if components.openai else '‚ùå –¢–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π' }}
                </div>
                <div class="status-item {{ 'status-ok' if components.chatwoot else 'status-error' }}">
                    Chatwoot: {{ '‚úÖ –ò–¥—ç–≤—Ö—Ç—ç–π' if components.chatwoot else '‚ùå –¢–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π' }}
                </div>
                <div class="status-item {{ 'status-ok' if components.email else 'status-error' }}">
                    –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç: {{ '‚úÖ –ò–¥—ç–≤—Ö—Ç—ç–π' if components.email else '‚ùå –ò–¥—ç–≤—Ö–≥“Ø–π' }}
                </div>
                <div class="status-item {{ 'status-ok' if components.rag else 'status-error' }}">
                    RAG —Å–∏—Å—Ç–µ–º: {{ '‚úÖ –ò–¥—ç–≤—Ö—Ç—ç–π' if components.rag else '‚ùå –ò–¥—ç–≤—Ö–≥“Ø–π' }}
                </div>
            </div>
            
            <div class="info">
                <h3>üìã –ê—à–∏–≥–ª–∞—Ö –∑–∞–∞–≤–∞—Ä:</h3>
                <p><strong>Webhook URL:</strong> <code>{{ request.url_root }}webhook</code></p>
                <p><strong>Health Check:</strong> <code>{{ request.url_root }}health</code></p>
                <p><strong>–°–∏—Å—Ç–µ–º–∏–π–Ω —Ç–µ—Å—Ç:</strong> <code>{{ request.url_root }}test</code></p>
                <p><strong>–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç:</strong> <code>{{ request.url_root }}verify?token=...</code></p>
            </div>
            
            <div class="info">
                <h3>‚öôÔ∏è –¢–æ—Ö–∏—Ä–≥–æ–æ–Ω—ã –∑”©–≤–ª”©–º–∂:</h3>
                <ul>
                    <li><strong>.env —Ñ–∞–π–ª:</strong> –ë“Ø—Ö API key –±–æ–ª–æ–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ–Ω—É—É–¥—ã–≥ .env —Ñ–∞–π–ª–¥ —Ç–æ—Ö–∏—Ä—É—É–ª–Ω–∞ —É—É</li>
                    <li><strong>Gmail:</strong> Gmail –∞—à–∏–≥–ª–∞—Ö –±–æ–ª App Password “Ø“Ø—Å–≥—ç—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π</li>
                    <li><strong>Webhook:</strong> Chatwoot –¥—ç—ç—Ä webhook URL —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π</li>
                </ul>
            </div>
        </div>
    </body>
    </html>
    """, **health().get_json())

@app.route("/test", methods=["GET"])
def test_system():
    """–°–∏—Å—Ç–µ–º–∏–π–Ω “Ø–Ω–¥—Å—ç–Ω —Ñ—É–Ω–∫—Ü—É—É–¥—ã–≥ —Ç–µ—Å—Ç —Ö–∏–π—Ö"""
    results = {
        "timestamp": datetime.utcnow().isoformat(),
        "tests": {}
    }
    
    # JWT —Ç–µ—Å—Ç
    try:
        test_payload = {
            'email': 'test@example.com',
            'conv_id': 123,
            'contact_id': 456,
            'exp': datetime.utcnow() + timedelta(hours=1)
        }
        test_token = jwt.encode(test_payload, JWT_SECRET, algorithm='HS256')
        decoded = verify_token(test_token)
        results["tests"]["jwt"] = {
            "status": "‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π" if decoded else "‚ùå –ê–ª–¥–∞–∞",
            "details": "JWT —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö/—à–∞–ª–≥–∞—Ö" 
        }
    except Exception as e:
        results["tests"]["jwt"] = {
            "status": "‚ùå –ê–ª–¥–∞–∞", 
            "details": f"JWT –∞–ª–¥–∞–∞: {str(e)}"
        }
    
    # Environment variables —Ç–µ—Å—Ç  
    env_vars = {
        "CHATWOOT_API_KEY": bool(CHATWOOT_API_KEY),
        "ACCOUNT_ID": bool(ACCOUNT_ID),
        "OPENAI_API_KEY": bool(OPENAI_API_KEY),
        "JWT_SECRET": bool(JWT_SECRET)
    }
    results["tests"]["environment"] = {
        "status": "‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π" if all(env_vars.values()) else "‚ö†Ô∏è –î—É—Ç—É—É",
        "details": env_vars
    }
    
    # Chatwoot API —Ç–µ—Å—Ç (—Ö—ç—Ä—ç–≤ API key –±–∞–π–≤–∞–ª)
    if CHATWOOT_API_KEY and ACCOUNT_ID:
        try:
            url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}"
            headers = {"api_access_token": CHATWOOT_API_KEY}
            response = requests.get(url, headers=headers, timeout=10)
            results["tests"]["chatwoot"] = {
                "status": "‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π" if response.status_code == 200 else f"‚ùå –ê–ª–¥–∞–∞ ({response.status_code})",
                "details": f"Chatwoot API —Ö–æ–ª–±–æ–ª—Ç - Account: {ACCOUNT_ID}"
            }
        except Exception as e:
            results["tests"]["chatwoot"] = {
                "status": "‚ùå –ê–ª–¥–∞–∞",
                "details": f"Chatwoot API –∞–ª–¥–∞–∞: {str(e)}"
            }
    else:
        results["tests"]["chatwoot"] = {
            "status": "‚ö†Ô∏è –¢–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π",
            "details": "Chatwoot API key —ç—Å–≤—ç–ª Account ID –¥—É—Ç—É—É"
        }
    
    return jsonify(results)

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)