import os
import time
import requests
import re
import jwt
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
from flask import Flask, request, jsonify, render_template_string
from openai import OpenAI
# CloudMN documentation crawler –±–æ–ª–æ–Ω vector search-–∏–π–Ω dependencies
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse
import json
from typing import Dict, List, Set, Tuple, Optional
import numpy as np
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.embeddings import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.schema import Document
import tiktoken

app = Flask(__name__)

# –û—Ä—á–Ω—ã —Ö—É–≤—å—Å–∞–≥—á–∏–¥
OPENAI_API_KEY    = os.environ["OPENAI_API_KEY"]
ASSISTANT_ID      = os.environ["ASSISTANT_ID"]
CHATWOOT_API_KEY  = os.environ["CHATWOOT_API_KEY"]
ACCOUNT_ID        = os.environ["ACCOUNT_ID"]
CHATWOOT_BASE_URL = "https://app.chatwoot.com"

# Email —Ç–æ—Ö–∏—Ä–≥–æ–æ
SMTP_SERVER = os.environ.get("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT = int(os.environ.get("SMTP_PORT", "587"))
SENDER_EMAIL = os.environ["SENDER_EMAIL"]
SENDER_PASSWORD = os.environ["SENDER_PASSWORD"]

# Microsoft Teams —Ç–æ—Ö–∏—Ä–≥–æ–æ
TEAMS_WEBHOOK_URL = os.environ.get("TEAMS_WEBHOOK_URL")
MAX_AI_RETRIES = 2  # AI —Ö—ç–¥—ç–Ω —É–¥–∞–∞ –æ—Ä–æ–ª–¥—Å–æ–Ω—ã –¥–∞—Ä–∞–∞ –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞—Ö

# JWT —Ç–æ—Ö–∏—Ä–≥–æ–æ
JWT_SECRET = os.environ.get("JWT_SECRET", "your-secret-key-here")
VERIFICATION_URL_BASE = os.environ.get("VERIFICATION_URL_BASE", "http://localhost:5000")

# CloudMN documentation —Ç–æ—Ö–∏—Ä–≥–æ–æ
CLOUDMN_DOCS_BASE = "https://docs.cloud.mn/"
CRAWL_DELAY = 1  # –°–µ–∫—É–Ω–¥—ç—ç—Ä —Ö—ç–ª–±—ç—Ä—ç—ç—Ä —Å–µ—Ä–≤–µ—Ä—Ç –∞—á–∞–∞–ª–∞–ª –±–∞–≥–∞—Å–≥–∞—Ö
MAX_CRAWL_PAGES = 50  # –ú–∞–∫—Å–∏–º—É–º —Ö—ç–¥—ç–Ω —Ö—É—É–¥–∞—Å –∞–≤–∞—Ö
VECTOR_SIMILARITY_THRESHOLD = 0.75  # Vector similarity —Ö—è–∑–≥–∞–∞—Ä (0-1)
MAX_VECTOR_RESULTS = 3  # –•–∞–º–≥–∏–π–Ω –∏—Ö —Ö—ç–¥—ç–Ω “Ø—Ä –¥“Ø–Ω –±—É—Ü–∞–∞—Ö

# OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=OPENAI_API_KEY)

# CloudMN –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–π–Ω –∫—ç—à —Ö–∞–¥–≥–∞–ª–∞—Ö
cloudmn_docs_cache = {}
last_crawl_time = None
vector_store = None
last_vector_store_update = None

class CloudMNDocsCrawler:
    """CloudMN documentation —Å–∞–π—Ç—ã–≥ crawl —Ö–∏–π—Ö –∫–ª–∞—Å—Å"""
    
    def __init__(self, base_url: str = CLOUDMN_DOCS_BASE):
        self.base_url = base_url
        self.visited_urls: Set[str] = set()
        self.docs_content: Dict[str, Dict] = {}
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'CloudMN-ChatBot-Crawler/1.0 (Educational Purpose)'
        })
    
    def is_valid_docs_url(self, url: str) -> bool:
        """URL –Ω—å CloudMN docs —Å–∞–π—Ç—ã–Ω —Ö—ç—Å—ç–≥ –º”©–Ω —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö"""
        parsed = urlparse(url)
        return parsed.netloc == 'docs.cloud.mn' and not url.endswith(('.pdf', '.jpg', '.png', '.gif'))
    
    def extract_page_content(self, url: str) -> Dict:
        """–¢—É—Ö–∞–π–Ω —Ö—É—É–¥–∞—Å–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç—ã–≥ –∑–∞–¥–ª–∞–Ω –∞–≤–∞—Ö"""
        try:
            print(f"üîç –•—É—É–¥–∞—Å –∑–∞–¥–ª–∞–∂ –±–∞–π–Ω–∞: {url}")
            
            response = self.session.get(url, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ì–∞—Ä—á–∏–≥ –∞–≤–∞—Ö
            title = ""
            title_tag = soup.find('title')
            if title_tag:
                title = title_tag.get_text().strip()
            
            # “Æ–Ω–¥—Å—ç–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –∞–≤–∞—Ö (docs —Å–∞–π—Ç—ã–Ω —Ö—ç—Å–≥—ç—ç—Å)
            content = ""
            
            # –Ø–Ω–∑ –±“Ø—Ä–∏–π–Ω selector-—É—É–¥ —Ç—É—Ä—à–∏–∂ “Ø–∑—ç—Ö
            content_selectors = [
                'main', 'article', '.content', '#content', 
                '.markdown', '.docs-content', '.main-content'
            ]
            
            for selector in content_selectors:
                content_elem = soup.select_one(selector)
                if content_elem:
                    content = content_elem.get_text(separator='\n', strip=True)
                    break
            
            # –•—ç—Ä—ç–≤ —Ç–æ–¥–æ—Ä—Ö–æ–π content –æ–ª–¥–æ–æ–≥“Ø–π –±–æ–ª body –¥–æ—Ç—Ä–æ–æ—Å –∞–≤–∞—Ö
            if not content:
                body = soup.find('body')
                if body:
                    # Script, style –≥—ç—Ö –º—ç—Ç —à–∞–∞—Ä–¥–ª–∞–≥–∞–≥“Ø–π —ç–ª–µ–º–µ–Ω—Ç“Ø“Ø–¥–∏–π–≥ –∞—Ä–∏–ª–≥–∞—Ö
                    for script in body(["script", "style", "nav", "footer", "header"]):
                        script.decompose()
                    content = body.get_text(separator='\n', strip=True)
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏–π–Ω –ª–∏–Ω–∫“Ø“Ø–¥ –æ–ª–æ—Ö
            links = []
            for link in soup.find_all('a', href=True):
                href = link['href']
                absolute_url = urljoin(url, href)
                if self.is_valid_docs_url(absolute_url):
                    links.append(absolute_url)
            
            return {
                'url': url,
                'title': title,
                'content': content[:5000],  # –•—ç—Ç —É—Ä—Ç –∫–æ–Ω—Ç–µ–Ω—Ç—ã–≥ —Ö—è–∑–≥–∞–∞—Ä–ª–∞—Ö
                'links': list(set(links)),  # –î–∞–≤—Ö—Ü—Å–∞–Ω –ª–∏–Ω–∫“Ø“Ø–¥–∏–π–≥ –∞—Ä–∏–ª–≥–∞—Ö
                'crawled_at': datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"‚ùå {url} —Ö—É—É–¥–∞—Å –∑–∞–¥–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
            return None
    
    def crawl_docs(self, max_pages: int = MAX_CRAWL_PAGES) -> Dict[str, Dict]:
        """CloudMN docs —Å–∞–π—Ç—ã–≥ crawl —Ö–∏–π—Ö"""
        try:
            print(f"üöÄ CloudMN docs crawling —ç—Ö—ç–ª–∂ –±–∞–π–Ω–∞... (max: {max_pages} —Ö—É—É–¥–∞—Å)")
            
            # –≠—Ö–ª—ç—Ö URL-—É—É–¥
            start_urls = [
                self.base_url,
                urljoin(self.base_url, '/docs/'),
                urljoin(self.base_url, '/getting-started/'),
            ]
            
            urls_to_visit = list(start_urls)
            pages_crawled = 0
            
            while urls_to_visit and pages_crawled < max_pages:
                current_url = urls_to_visit.pop(0)
                
                # –ê–ª—å —Ö—ç–¥–∏–π–Ω –∑–æ—á–∏–ª—Å–æ–Ω URL —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
                if current_url in self.visited_urls:
                    continue
                
                self.visited_urls.add(current_url)
                
                # –•—É—É–¥–∞—Å–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç—ã–≥ –∞–≤–∞—Ö
                page_data = self.extract_page_content(current_url)
                
                if page_data and page_data['content'].strip():
                    self.docs_content[current_url] = page_data
                    pages_crawled += 1
                    
                    print(f"‚úÖ [{pages_crawled}/{max_pages}] {current_url}")
                    
                    # –®–∏–Ω—ç –ª–∏–Ω–∫“Ø“Ø–¥–∏–π–≥ –Ω—ç–º—ç—Ö
                    for link in page_data.get('links', []):
                        if link not in self.visited_urls and link not in urls_to_visit:
                            urls_to_visit.append(link)
                
                # –°–µ—Ä–≤–µ—Ä—Ç—ç–π –∑”©—Ä“Ø“Ø–ª—ç—Ö–≥“Ø–π–Ω —Ç—É–ª–¥ —Ç“Ø—Ä –∑–æ–≥—Å–æ—Ö
                time.sleep(CRAWL_DELAY)
            
            print(f"üéâ Crawling –¥—É—É—Å–ª–∞–∞! –ù–∏–π—Ç {len(self.docs_content)} —Ö—É—É–¥–∞—Å —Ü—É–≥–ª—É—É–ª–∞–≤")
            return self.docs_content
            
        except Exception as e:
            print(f"‚ùå Crawling –∞–ª–¥–∞–∞: {e}")
            return {}

def get_cloudmn_docs_content() -> Dict[str, Dict]:
    """CloudMN –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–π–Ω –∫–æ–Ω—Ç–µ–Ω—Ç—ã–≥ –∞–≤–∞—Ö (cache-—Ç—ç–π)"""
    global cloudmn_docs_cache, last_crawl_time
    
    # 1 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ –¥–∞—Ö–∏–Ω crawl —Ö–∏–π—Ö
    now = datetime.now()
    if (last_crawl_time is None or 
        (now - last_crawl_time).total_seconds() > 3600 or 
        not cloudmn_docs_cache):
        
        print("üîÑ CloudMN docs —à–∏–Ω—ç—á–∏–ª–∂ –±–∞–π–Ω–∞...")
        
        crawler = CloudMNDocsCrawler()
        cloudmn_docs_cache = crawler.crawl_docs()
        last_crawl_time = now
        
        print(f"‚úÖ CloudMN docs cache —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç ({len(cloudmn_docs_cache)} —Ö—É—É–¥–∞—Å)")
    
    return cloudmn_docs_cache

def create_vector_store() -> FAISS:
    """CloudMN –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–π–≥ vector store “Ø“Ø—Å–≥—ç—Ö"""
    global vector_store, last_vector_store_update
    
    try:
        # –•—ç—Ä—ç–≤ vector store –∞–ª—å —Ö—ç–¥–∏–π–Ω “Ø“Ø—Å—Å—ç–Ω, 1 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —à–∏–Ω—ç—á–ª—ç—Ö
        now = datetime.now()
        if (vector_store is not None and 
            last_vector_store_update is not None and 
            (now - last_vector_store_update).total_seconds() < 3600):
            return vector_store
        
        print("üîÑ Vector store “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")
        
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–π–Ω –∫–æ–Ω—Ç–µ–Ω—Ç—ã–≥ –∞–≤–∞—Ö
        docs_content = get_cloudmn_docs_content()
        
        if not docs_content:
            print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–π–Ω –∫–æ–Ω—Ç–µ–Ω—Ç —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞")
            return None
        
        # –î–æ–∫—É–º–µ–Ω—Ç—É—É–¥—ã–≥ –±—ç–ª—Ç–≥—ç—Ö
        documents = []
        for url, page_data in docs_content.items():
            title = page_data.get('title', '')
            content = page_data.get('content', '')
            
            if not content.strip():
                continue
            
            # –î–æ–∫—É–º–µ–Ω—Ç—É—É–¥—ã–≥ –∂–∏–∂–∏–≥ —Ö—ç—Å–≥“Ø“Ø–¥ –±–æ–ª–≥–æ–Ω —Ö—É–≤–∞–∞—Ö
            text_splitter = RecursiveCharacterTextSplitter(
                chunk_size=1000,
                chunk_overlap=200,
                length_function=len,
                separators=["\n\n", "\n", " ", ""]
            )
            
            chunks = text_splitter.split_text(content)
            
            for i, chunk in enumerate(chunks):
                # –ú–µ—Ç–∞ –º—ç–¥—ç—ç–ª—ç–ª—Ç—ç–π Document “Ø“Ø—Å–≥—ç—Ö
                doc = Document(
                    page_content=chunk,
                    metadata={
                        "source": url,
                        "title": title,
                        "chunk_index": i,
                        "total_chunks": len(chunks)
                    }
                )
                documents.append(doc)
        
        print(f"‚úÖ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç –±—ç–ª—Ç–≥—ç–ª—ç—ç")
        
        # Embeddings “Ø“Ø—Å–≥—ç—Ö
        embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)
        
        # Vector store “Ø“Ø—Å–≥—ç—Ö
        vector_store = FAISS.from_documents(documents, embeddings)
        last_vector_store_update = now
        
        print(f"‚úÖ Vector store “Ø“Ø—Å–≥—ç–ª—ç—ç ({len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç)")
        
        return vector_store
        
    except Exception as e:
        print(f"‚ùå Vector store “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return None

def search_cloudmn_docs_vector(query: str, max_results: int = MAX_VECTOR_RESULTS) -> List[Dict]:
    """Vector similarity search –∞—à–∏–≥–ª–∞–Ω CloudMN –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∞–∞—Å —Ö–∞–π–ª—Ç —Ö–∏–π—Ö"""
    try:
        # Vector store “Ø“Ø—Å–≥—ç—Ö —ç—Å–≤—ç–ª –∞–≤–∞—Ö
        vector_store = create_vector_store()
        
        if not vector_store:
            print("‚ùå Vector store “Ø“Ø—Å–≥—ç—Ö –±–æ–ª–æ–º–∂–≥“Ø–π")
            return []
        
        # –•–∞–π–ª—Ç —Ö–∏–π—Ö
        docs_and_scores = vector_store.similarity_search_with_score(query, k=max_results)
        
        results = []
        for doc, score in docs_and_scores:
            # Score-–≥ 0-1 —Ö“Ø—Ä—ç—ç–Ω–¥ —Ö”©—Ä–≤“Ø“Ø–ª—ç—Ö
            similarity_score = 1.0 - score  # FAISS-–∏–π–Ω distance-–∏–π–≥ similarity –±–æ–ª–≥–æ—Ö
            
            # –•—ç—Ä—ç–≤ similarity —Ö—è–∑–≥–∞–∞—Ä–∞–∞—Å –±–∞–≥–∞ –±–æ–ª –∞–ª–≥–∞—Å–∞—Ö
            if similarity_score < VECTOR_SIMILARITY_THRESHOLD:
                continue
            
            # “Æ—Ä –¥“Ø–Ω–≥ –±—ç–ª—Ç–≥—ç—Ö
            result = {
                'url': doc.metadata.get('source', ''),
                'title': doc.metadata.get('title', ''),
                'content_excerpt': doc.page_content,
                'similarity_score': similarity_score,
                'chunk_index': doc.metadata.get('chunk_index', 0),
                'total_chunks': doc.metadata.get('total_chunks', 0)
            }
            
            results.append(result)
        
        return results
        
    except Exception as e:
        print(f"‚ùå Vector search –∞–ª–¥–∞–∞: {e}")
        return []

def enhance_ai_response_with_cloudmn_docs(message_content: str) -> str:
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–ª—Ç–∞–Ω–¥ CloudMN –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –Ω—ç–º–∂ ”©–≥”©—Ö (vector search)"""
    try:
        print(f"üîç CloudMN –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∞–∞—Å —Ö–∞–π–ª—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞: {message_content[:50]}...")
        
        # Vector search —Ö–∏–π—Ö
        search_results = search_cloudmn_docs_vector(message_content)
        
        if not search_results:
            print("‚ùå –•–∞–π–ª—Ç–∞–¥ —Ç–æ—Ö–∏—Ä–æ—Ö “Ø—Ä –¥“Ø–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            return ""
        
        print(f"‚úÖ {len(search_results)} “Ø—Ä –¥“Ø–Ω –æ–ª–¥–ª–æ–æ")
        
        # AI-–¥ ”©–≥”©—Ö –Ω—ç–º—ç–ª—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—ç–ª—Ç–≥—ç—Ö
        docs_context = "\n\nCloudMN –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∞–∞—Å –æ–ª–¥—Å–æ–Ω —Ö–æ–ª–±–æ–≥–¥–æ—Ö –º—ç–¥—ç—ç–ª—ç–ª:\n"
        
        for i, result in enumerate(search_results, 1):
            similarity_percent = int(result['similarity_score'] * 100)
            docs_context += f"\n{i}. {result['title']} (–•–æ–ª–±–æ–æ—Ç–æ–π –±–∞–π–¥–∞–ª: {similarity_percent}%)\n"
            docs_context += f"   URL: {result['url']}\n"
            docs_context += f"   –ö–æ–Ω—Ç–µ–Ω—Ç: {result['content_excerpt']}\n"
        
        docs_context += "\n–≠–Ω—ç –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞—à–∏–≥–ª–∞–∂ —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–ª—Ç–∞–Ω–¥ —Ö–∞—Ä–∏—É–ª–Ω–∞ —É—É."
        
        return docs_context
        
    except Exception as e:
        print(f"‚ùå CloudMN docs –Ω—ç–º—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return ""

def is_valid_email(email):
    """–ò–º—ç–π–ª —Ö–∞—è–≥–∏–π–Ω —Ñ–æ—Ä–º–∞—Ç—ã–≥ —à–∞–ª–≥–∞—Ö"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def generate_verification_token(email, conv_id, contact_id):
    """–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö JWT —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö"""
    payload = {
        'email': email,
        'conv_id': conv_id,
        'contact_id': contact_id,
        'exp': datetime.utcnow() + timedelta(hours=24)  # 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ –¥—É—É—Å–Ω–∞
    }
    return jwt.encode(payload, JWT_SECRET, algorithm='HS256')

def verify_token(token):
    """JWT —Ç–æ–∫–µ–Ω—ã–≥ —à–∞–ª–≥–∞—Ö"""
    try:
        print(f"üîç verify_token: Starting verification for token: {token[:50]}...")
        print(f"üîë JWT_SECRET: {'SET' if JWT_SECRET and JWT_SECRET != 'your-secret-key-here' else 'DEFAULT/NOT SET'}")
        
        payload = jwt.decode(token, JWT_SECRET, algorithms=['HS256'])
        print(f"‚úÖ JWT decode –∞–º–∂–∏–ª—Ç—Ç–∞–π: {payload}")
        return payload
        
    except jwt.ExpiredSignatureError as e:
        print(f"‚è∞ JWT —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω: {e}")
        return None
    except jwt.InvalidTokenError as e:
        print(f"‚ùå JWT —Ç–æ–∫–µ–Ω –±—É—Ä—É—É: {e}")
        return None
    except Exception as e:
        print(f"üí• verify_token –∞–ª–¥–∞–∞: {e}")
        return None

def send_verification_email(email, token):
    """–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∏–º—ç–π–ª –∏–ª–≥—ç—ç—Ö"""
    try:
        verification_url = f"{VERIFICATION_URL_BASE}/verify?token={token}"
        
        msg = MIMEMultipart()
        msg['From'] = SENDER_EMAIL
        msg['To'] = email
        msg['Subject'] = "–ò–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É"
        
        body = f"""
        –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É!
        
        –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥–∏–π–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –¥–æ–æ—Ä—Ö –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É:
        
        {verification_url}
        
        –≠–Ω—ç –ª–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–Ω–æ.
        
        –•—ç—Ä—ç–≤ —Ç–∞ –±–∏—à –±–æ–ª –±–∏–¥—ç–Ω–¥ –º—ç–¥—ç–≥–¥—ç–Ω—ç “Ø“Ø.
        
        –ë–∞—è—Ä–ª–∞–ª–∞–∞!
        """
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        server.send_message(msg)
        server.quit()
        
        return True
    except Exception as e:
        print(f"–ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False

def get_contact(contact_id):
    """Contact –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
    resp = requests.get(url, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def update_contact(contact_id, attrs):
    """Contact-–∏–π–Ω custom attributes —à–∏–Ω—ç—á–ª—ç—Ö"""
    try:
        url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/{contact_id}"
        payload = {"custom_attributes": attrs}
        headers = {"api_access_token": CHATWOOT_API_KEY}
        
        print(f"üîó Chatwoot API URL: {url}")
        print(f"üîë Using API Key: {CHATWOOT_API_KEY[:10]}..." if CHATWOOT_API_KEY else "‚ùå API Key –±“Ø—Ä –±–∞–π—Ö–≥“Ø–π")
        print(f"üìä Payload: {payload}")
        
        resp = requests.put(url, json=payload, headers=headers)
        
        print(f"üìà Response status: {resp.status_code}")
        print(f"üìÑ Response text: {resp.text[:200]}...")
        
        resp.raise_for_status()
        return resp.json()
        
    except requests.exceptions.HTTPError as e:
        print(f"‚ùå Chatwoot API HTTP –∞–ª–¥–∞–∞: {e}")
        print(f"üìä Response status: {resp.status_code}")
        print(f"üìÑ Response text: {resp.text}")
        raise e
    except Exception as e:
        print(f"üí• Contact update –∞–ª–¥–∞–∞: {e}")
        raise e

def get_conversation(conv_id):
    """Conversation –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö"""
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
    resp = requests.get(url, headers={"api_access_token": CHATWOOT_API_KEY})
    resp.raise_for_status()
    return resp.json()

def update_conversation(conv_id, attrs):
    """Conversation-–∏–π–Ω custom attributes —à–∏–Ω—ç—á–ª—ç—Ö"""
    try:
        url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/custom_attributes"
        payload = {"custom_attributes": attrs}
        headers = {"api_access_token": CHATWOOT_API_KEY}
        
        print(f"üîó Conversation API URL: {url}")
        print(f"üìä Payload: {payload}")
        
        resp = requests.post(url, json=payload, headers=headers)
        
        print(f"üìà Response status: {resp.status_code}")
        print(f"üìÑ Response text: {resp.text[:200]}...")
        
        resp.raise_for_status()
        return resp.json()
        
    except requests.exceptions.HTTPError as e:
        print(f"‚ùå Conversation API HTTP –∞–ª–¥–∞–∞: {e}")
        print(f"üìä Response status: {resp.status_code}")
        print(f"üìÑ Response text: {resp.text}")
        raise e
    except Exception as e:
        print(f"üí• Conversation update –∞–ª–¥–∞–∞: {e}")
        raise e

def send_to_chatwoot(conv_id, text):
    """Chatwoot —Ä—É—É –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö"""
    try:
        url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/messages"
        headers = {"api_access_token": CHATWOOT_API_KEY}
        payload = {"content": text, "message_type": "outgoing"}
        
        print(f"üîó Message API URL: {url}")
        print(f"üìä Message payload: {payload}")
        
        r = requests.post(url, json=payload, headers=headers)
        
        print(f"üìà Message response status: {r.status_code}")
        print(f"üìÑ Message response text: {r.text[:200]}...")
        
        r.raise_for_status()
        return r.json()
        
    except requests.exceptions.HTTPError as e:
        print(f"‚ùå Message API HTTP –∞–ª–¥–∞–∞: {e}")
        print(f"üìä Response status: {r.status_code}")
        print(f"üìÑ Response text: {r.text}")
        raise e
    except Exception as e:
        print(f"üí• Message send –∞–ª–¥–∞–∞: {e}")
        raise e

def analyze_customer_issue(thread_id, current_message, customer_email=None):
    """AI –∞—à–∏–≥–ª–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±“Ø—Ö —á–∞—Ç —Ç“Ø“Ø—Ö–∏–π–≥ –¥“Ø–≥–Ω—ç–∂, comprehensive –º—ç–¥—ç—ç–ª—ç–ª ”©–≥”©—Ö"""
    try:
        # OpenAI thread-—Å –±“Ø—Ö –º–µ—Å—Å–µ–∂–∏–π–≥ –∞–≤–∞—Ö
        messages = client.beta.threads.messages.list(thread_id=thread_id, limit=50)
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂“Ø“Ø–¥–∏–π–≥ —Ü—É–≥–ª—É—É–ª–∞—Ö
        conversation_history = []
        for msg in reversed(messages.data):  # –≠—Ö–Ω—ç—ç—Å –Ω—å —ç—Ä—ç–º–±—ç–ª—ç—Ö
            if msg.role == "user":
                content = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        content += content_block.text.value
                if content.strip():
                    conversation_history.append(f"–•—ç—Ä—ç–≥–ª—ç–≥—á: {content.strip()}")
            elif msg.role == "assistant":
                content = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        content += content_block.text.value
                if content.strip():
                    conversation_history.append(f"AI: {content.strip()[:200]}...")  # –•—è–∑–≥–∞–∞—Ä–ª–∞—Ö
        
        # –•—ç—Ä—ç–≤ —á–∞—Ç —Ç“Ø“Ø—Ö —Ö–æ–æ—Å–æ–Ω –±–æ–ª –∑”©–≤—Ö”©–Ω –æ–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂—ç—ç—Ä –¥“Ø–≥–Ω—ç—Ö
        if not conversation_history:
            conversation_history = [f"–•—ç—Ä—ç–≥–ª—ç–≥—á: {current_message}"]
        
        # Conversation —Ç“Ø“Ø—Ö–∏–π–≥ string –±–æ–ª–≥–æ—Ö
        chat_history = "\n".join(conversation_history[-10:])  # –°“Ø“Ø–ª–∏–π–Ω 10 –º–µ—Å—Å–µ–∂
        
        # –ò–ª“Ø“Ø —Ç–æ–¥–æ—Ä—Ö–æ–π system prompt
        system_msg = (
            "–¢–∞ –±–æ–ª –¥—ç–º–∂–ª—ç–≥–∏–π–Ω –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω. "
            "–¢—É—Ö–∞–π–Ω –∞—Å—É—É–¥–ª—ã–≥ —á–∞–¥–∞—Ö–∞–∞—Ä –±–∞–π–≤–∞–ª ”©”©—Ä–∏–π–Ω –º—ç–¥–ª—ç–≥–∏–π–Ω —Ö“Ø—Ä—ç—ç–Ω–¥ —à–∏–π–¥–≤—ç—Ä–ª—ç–∂ ”©–≥–Ω”© “Ø“Ø. "
            "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±“Ø—Ö —á–∞—Ç —Ç“Ø“Ø—Ö–∏–π–≥ —Ö–∞—Ä–∂, –∞—Å—É—É–¥–ª—ã–≥ –∏–∂ –±“Ø—Ä—ç–Ω –¥“Ø–≥–Ω—ç–∂ ”©–≥–Ω”© “Ø“Ø. "
            "–•—ç—Ä—ç–≤ –æ–ª–æ–Ω –∞—Å—É—É–¥–∞–ª –±–∞–π–≤–∞–ª –≥–æ–ª –∞—Å—É—É–¥–ª—ã–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–∂ —Ñ–æ–∫—É—Å–ª–∞–Ω–∞ —É—É."
        )

        # Comprehensive user prompt
        user_msg = f'''
–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —á–∞—Ç —Ç“Ø“Ø—Ö:
{chat_history}

–û–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂: "{current_message}"

–î–∞—Ä–∞–∞—Ö —Ñ–æ—Ä–º–∞—Ç–∞–∞—Ä –±“Ø—Ö —á–∞—Ç —Ç“Ø“Ø—Ö—ç–¥ —Ç—É–ª–≥—É—É—Ä–ª–∞–Ω –¥“Ø–≥–Ω—ç–ª—Ç ”©–≥–Ω”© “Ø“Ø:

–ê–°–£–£–î–õ–´–ù –¢”®–†”®–õ: [–¢–µ—Ö–Ω–∏–∫–∏–π–Ω/–ú—ç–¥—ç—ç–ª–ª–∏–π–Ω/–ì–æ–º–¥–æ–ª]
–Ø–ê–†–ê–õ–¢–ê–ô –ë–ê–ô–î–ê–õ: [”®–Ω–¥”©—Ä/–î—É–Ω–¥/–ë–∞–≥–∞] 
–ê–°–£–£–î–õ–´–ù –¢–û–í–ß –¢–ê–ô–õ–ë–ê–†: [–ì–æ–ª –∞—Å—É—É–¥–ª—ã–≥ 1-2 ”©–≥“Ø“Ø–ª–±—ç—Ä—ç—ç—Ä]
–ß–ê–¢–´–ù –•–≠–í –ú–ê–Ø–ì: [–ê–Ω—Ö–Ω—ã –∞—Å—É—É–ª—Ç/–î–∞–≥–∞–ª–¥–∞—Ö –∞—Å—É—É–ª—Ç/–ì–æ–º–¥–æ–ª/–¢–æ–¥—Ä—É—É–ª–≥–∞ —Ö“Ø—Å—ç—Ö]
–®–ê–ê–†–î–õ–ê–ì–ê–¢–ê–ô –ê–†–ì–ê –•–≠–ú–ñ–≠–≠: [–¢–æ–¥–æ—Ä—Ö–æ–π –∞—Ä–≥–∞ —Ö—ç–º–∂—ç—ç]
–•“Æ–õ–≠–≠–ì–î–≠–ñ –ë–£–ô –•–ê–†–ò–£–õ–¢: [–•—ç—Ä—ç–≥–ª—ç–≥—á —è–º–∞—Ä —Ö–∞—Ä–∏—É–ª—Ç —Ö“Ø–ª—ç—ç–∂ –±–∞–π–≥–∞–∞]
–î“Æ–ì–ù–≠–õ–¢: [–ï—Ä”©–Ω—Ö–∏–π “Ø–Ω—ç–ª–≥—ç—ç –±–∞ –∑”©–≤–ª”©–º–∂]
'''

        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
            max_tokens=500,
            temperature=0.2
        )

        return response.choices[0].message.content.strip()

    except Exception as e:
        print(f"‚ùå –ê—Å—É—É–¥–∞–ª –¥“Ø–≥–Ω—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return f"–ê—Å—É—É–¥–∞–ª –¥“Ø–≥–Ω—ç—Ö –±–æ–ª–æ–º–∂–≥“Ø–π. –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –æ–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂: {current_message}"

def send_teams_notification(conv_id, customer_message, customer_email=None, escalation_reason="–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–∞–ª", ai_analysis=None):
    """Microsoft Teams —Ä—É—É —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω —Ç–∞–ª–∞–∞—Ä –∞–∂–∏–ª—Ç–∞–Ω–¥ –º—ç–¥—ç—ç–ª—ç—Ö"""
    if not TEAMS_WEBHOOK_URL:
        print("‚ö†Ô∏è Teams webhook URL —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞")
        return False
    
    try:
        # Chatwoot conversation URL
        conv_url = f"{CHATWOOT_BASE_URL}/app/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
        
        # AI –∞—Å—É—É–¥–ª—ã–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª –±—ç–ª—Ç–≥—ç—Ö
        error_summary = escalation_reason
        if ai_analysis:
            error_summary += f"\n\n–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –∞–Ω–∞–ª–∏–∑: {ai_analysis}"
        
        # Teams message format
        teams_message = {
            "type": "message",
            "attachments": [{
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                    "type": "AdaptiveCard",
                    "version": "1.3",
                    "body": [
                        {
                            "type": "TextBlock",
                            "text": "üìã –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç",
                            "weight": "Bolder",
                            "size": "Medium",
                            "color": "Attention"
                        },
                        {
                            "type": "TextBlock",
                            "text": "AI —Å–∏—Å—Ç–µ–º —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂, –∞–∂–∏–ª—Ç–Ω—ã –∞–Ω—Ö–∞–∞—Ä–∞–ª —Ç–∞—Ç–∞—Ö—É–π—Ü –∞—Å—É—É–¥–∞–ª –≥—ç–∂ “Ø–∑—ç–∂ –±–∞–π–Ω–∞.",
                            "wrap": True,
                            "color": "Default"
                        },
                        {
                            "type": "FactSet",
                            "facts": [
                                {
                                    "title": "–•–∞—Ä–∏–ª—Ü–∞–≥—á:",
                                    "value": customer_email or "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π"
                                },
                                {
                                    "title": "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂:",
                                    "value": customer_message[:300] + ("..." if len(customer_message) > 300 else "")
                                },
                                {
                                    "title": "–•—É–≥–∞—Ü–∞–∞:",
                                    "value": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                                }
                            ]
                        }
                    ]
                }
            }]
        }
        
        # AI –¥“Ø–≥–Ω—ç–ª—Ç –Ω—ç–º—ç—Ö
        if ai_analysis:
            teams_message["attachments"][0]["content"]["body"].append({
                "type": "TextBlock",
                "text": "ü§ñ AI –î“Ø–≥–Ω—ç–ª—Ç:",
                "weight": "Bolder",
                "size": "Medium",
                "spacing": "Large"
            })
            teams_message["attachments"][0]["content"]["body"].append({
                "type": "TextBlock",
                "text": ai_analysis,
                "wrap": True,
                "fontType": "Monospace",
                "color": "Good"
            })
        
        # Actions –Ω—ç–º—ç—Ö
        teams_message["attachments"][0]["content"]["actions"] = [
            {
                "type": "Action.OpenUrl",
                "title": "Chatwoot –¥—ç—ç—Ä —Ö–∞—Ä–∞—Ö",
                "url": conv_url
            }
        ]
        
        response = requests.post(TEAMS_WEBHOOK_URL, json=teams_message)
        response.raise_for_status()
        print(f"‚úÖ Teams —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç–ª—ç—ç: {escalation_reason}")
        return True
        
    except Exception as e:
        print(f"‚ùå Teams –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return False

def get_ai_response(thread_id, message_content, conv_id=None, customer_email=None, retry_count=0):
    """OpenAI Assistant-—ç—ç—Å —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö (CloudMN docs integration-—Ç—ç–π)"""
    try:
        # CloudMN –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–π–Ω –Ω—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
        cloudmn_context = enhance_ai_response_with_cloudmn_docs(message_content)
        
        # –•—ç—Ä—ç–≤ CloudMN —Ö–æ–ª–±–æ–æ—Ç–æ–π –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥–≤–æ–ª “Ø“Ø–Ω–∏–π–≥ –º–µ—Å—Å–µ–∂–∏–¥ –Ω—ç–º—ç—Ö
        enhanced_message = message_content
        if cloudmn_context:
            enhanced_message = message_content + cloudmn_context
            print(f"üìö CloudMN docs –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω—ç–º—ç–≥–¥–ª—ç—ç ({len(cloudmn_context)} —Ç—ç–º–¥—ç–≥—Ç)")

        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂–∏–π–≥ thread —Ä—É—É –Ω—ç–º—ç—Ö
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=enhanced_message
        )

        # Assistant run “Ø“Ø—Å–≥—ç—Ö
        run = client.beta.threads.runs.create(
            thread_id=thread_id, 
            assistant_id=ASSISTANT_ID
        )

        # Run –¥—É—É—Å–∞—Ö—ã–≥ —Ö“Ø–ª—ç—ç—Ö
        max_wait = 30
        wait_count = 0
        while wait_count < max_wait:
            run_status = client.beta.threads.runs.retrieve(
                thread_id=thread_id, 
                run_id=run.id
            )
            
            if run_status.status == "completed":
                break
            elif run_status.status in ["failed", "cancelled", "expired"]:
                error_msg = "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
                
                # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
                if retry_count == 0 and conv_id:
                    send_teams_notification(
                        conv_id, 
                        message_content, 
                        customer_email, 
                        f"AI run —Å—Ç–∞—Ç—É—Å –∞–ª–¥–∞–∞: {run_status.status}",
                        f"OpenAI run ID: {run.id}, Status: {run_status.status}"
                    )
                
                return error_msg
                
            time.sleep(1)
            wait_count += 1

        if wait_count >= max_wait:
            timeout_msg = "–•–∞—Ä–∏—É–ª–∞—Ö–∞–¥ —Ö—ç—Ç —É–¥–∞–∂ –±–∞–π–Ω–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
            
            # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω timeout –±–æ–ª)
            if retry_count == 0 and conv_id:
                send_teams_notification(
                    conv_id, 
                    message_content, 
                    customer_email, 
                    "AI —Ö–∞—Ä–∏—É–ª—Ç timeout (30 —Å–µ–∫—É–Ω–¥)",
                    f"OpenAI run ID: {run.id}, Thread ID: {thread_id}"
                )
            
            return timeout_msg

        # Assistant-–∏–π–Ω —Ö–∞—Ä–∏—É–ª—Ç—ã–≥ –∞–≤–∞—Ö
        messages = client.beta.threads.messages.list(thread_id=thread_id)
        
        for msg in messages.data:
            if msg.role == "assistant":
                reply = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        reply += content_block.text.value
                
                # AI —Ö–∞—Ä–∏—É–ª—Ç—ã–≥ —Ü—ç–≤—ç—Ä–ª—ç—Ö
                cleaned_reply = clean_ai_response(reply)
                return cleaned_reply

        # –•–∞—Ä–∏—É–ª—Ç –æ–ª–¥–æ—Ö–≥“Ø–π
        no_response_msg = "–•–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
        
        # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
        if retry_count == 0 and conv_id:
            send_teams_notification(
                conv_id, 
                message_content, 
                customer_email, 
                "AI —Ö–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π",
                f"Thread ID: {thread_id}, Messages —Ö–∞–π–ª—Ç–∞–¥ —Ö–∞—Ä–∏—É–ª—Ç –±–∞–π—Ö–≥“Ø–π"
            )
        
        return no_response_msg
        
    except Exception as e:
        print(f"AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
        error_msg = "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
        
        # Teams –º—ç–¥—ç—ç–ª—ç—Ö (—Ö—ç—Ä—ç–≤ —ç—Ö–Ω–∏–π —É–¥–∞–∞–≥–∏–π–Ω –∞–ª–¥–∞–∞ –±–æ–ª)
        if retry_count == 0 and conv_id:
            send_teams_notification(
                conv_id, 
                message_content, 
                customer_email, 
                "AI —Å–∏—Å—Ç–µ–º–∏–π–Ω –∞–ª–¥–∞–∞ (Exception)",
                f"Python exception: {str(e)}, Thread ID: {thread_id}"
            )
        
        return error_msg

@app.route("/verify", methods=["GET"])
def verify_email():
    print("üì© /verify –¥—É—É–¥–ª–∞–∞")

    token = request.args.get('token')
    if not token:
        return "‚ùå –¢–æ–∫–µ–Ω –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞!", 400

    payload = verify_token(token)
    if not payload:
        return "‚ùå –¢–æ–∫–µ–Ω —Ö“Ø—á–∏–Ω–≥“Ø–π —ç—Å–≤—ç–ª —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω –±–∞–π–Ω–∞!", 400

    try:
        contact_id = payload['contact_id']
        email = payload['email']
        conv_id = payload.get('conv_id', None)

        # ‚úÖ –ó”©–≤—Ö”©–Ω Contact-–≥ verified —Ç—ç–º–¥—ç–≥–ª—ç—Ö
        update_result = update_contact(contact_id, {
            "email_verified": "1",
            "verified_email": email,
            "verification_date": datetime.utcnow().isoformat()
        })
        print(f"‚úÖ Contact update: {update_result}")

        # ‚úÖ –•—ç—Ä—ç–≤ conv_id –±–∞–π–≥–∞–∞ –±–æ–ª —Ç—ç—Ä conversation –¥—ç—ç—Ä –∞–º–∂–∏–ª—Ç—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö
        if conv_id:
            send_to_chatwoot(conv_id, f"‚úÖ –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({email}) –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞! –û–¥–æ–æ chatbot-—Ç–æ–π —Ö–∞—Ä–∏–ª—Ü–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π –±–æ–ª–ª–æ–æ.")

        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                .success { color: green; font-size: 24px; margin: 20px 0; }
                .info { color: #666; font-size: 16px; }
            </style>
        </head>
        <body>
            <div class="success">‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞!</div>
            <div class="info">–¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({{ email }}) –±–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω –±–∞–π–Ω–∞.<br>–û–¥–æ–æ —Ç–∞ chatbot-—Ç–æ–π —Ö–∞—Ä–∏–ª—Ü–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π –±–æ–ª–ª–æ–æ.</div>
        </body>
        </html>
        """, email=email)

    except Exception as e:
        import traceback
        traceback.print_exc()
        return f"‚ùå –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}", 500

@app.route("/webhook", methods=["POST"])
def webhook():
    """Chatwoot webhook handler - –±“Ø—Ä—ç–Ω —à–∏–Ω—ç –ª–æ–≥–∏–∫"""
    try:
        data = request.json
        print(f"üîÑ Webhook received: {data.get('message_type', 'unknown')}")
        
        # –ó”©–≤—Ö”©–Ω incoming –º–µ—Å—Å–µ–∂ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö
        if data.get("message_type") != "incoming":
            print("‚è≠Ô∏è Skipping: not incoming message")
            return jsonify({"status": "skipped - not incoming"}), 200

        # “Æ–Ω–¥—Å—ç–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
        conv_id = data["conversation"]["id"]
        message_content = data.get("content", "").strip()
        
        print(f"üìù Conv ID: {conv_id}, Message: '{message_content}'")
        
        # Contact ID –æ–ª–æ—Ö
        contact_id = None
        if "sender" in data and data["sender"]:
            contact_id = data["sender"].get("id")
        
        if not contact_id:
            print("‚ùå Contact ID –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            send_to_chatwoot(conv_id, "–ê–ª–¥–∞–∞: –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
            return jsonify({"status": "error - no contact"}), 400

        print(f"üë§ Contact ID: {contact_id}")

        # ========== –ë–ê–¢–ê–õ–ì–ê–ê–ñ–£–£–õ–ê–õ–¢ –®–ê–õ–ì–ê–• ==========
        print("üîç –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
        
        # Contact-–∏–π–Ω custom attributes –∞–≤–∞—Ö (webhook-—ç—ç—Å —à—É—É–¥)
        is_verified = False
        verified_email = ""
        
        # Webhook –¥–æ—Ç–æ—Ä contact –º—ç–¥—ç—ç–ª—ç–ª –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        if "conversation" in data and "meta" in data["conversation"] and "sender" in data["conversation"]["meta"]:
            sender_meta = data["conversation"]["meta"]["sender"]
            if "custom_attributes" in sender_meta:
                contact_attrs = sender_meta["custom_attributes"]
                email_verified_value = contact_attrs.get("email_verified", "")
                verified_email = contact_attrs.get("verified_email", "")
                
                # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç —à–∞–ª–≥–∞—Ö
                is_verified = str(email_verified_value).lower() in ["true", "1", "yes"]
                
                print(f"üìä Webhook-—ç—ç—Å –∞–≤—Å–∞–Ω: email_verified='{email_verified_value}', verified_email='{verified_email}'")
                print(f"‚úÖ Is verified: {is_verified}")
        
        # –•—ç—Ä—ç–≤ webhook –¥—ç—ç—Ä –±–∞–π—Ö–≥“Ø–π –±–æ–ª API-–∞–∞—Ä –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞—Ö
        if not is_verified:
            print("üîç API-–∞–∞—Ä –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
            try:
                contact = get_contact(contact_id)
                contact_attrs = contact.get("custom_attributes", {})
                email_verified_value = contact_attrs.get("email_verified", "")
                verified_email = contact_attrs.get("verified_email", "")
                
                is_verified = str(email_verified_value).lower() in ["true", "1", "yes"]
                print(f"üìä API-–∞–∞—Å –∞–≤—Å–∞–Ω: email_verified='{email_verified_value}', verified_email='{verified_email}'")
                print(f"‚úÖ Is verified: {is_verified}")
            except Exception as e:
                print(f"‚ùå API –∞–ª–¥–∞–∞: {e}")
                is_verified = False

        # ========== –ë–ê–¢–ê–õ–ì–ê–ê–ñ–£–£–õ–ê–õ–¢–´–ù “Æ–ô–õ–î–≠–õ ==========
        if not is_verified:
            print("üö´ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–∞–≥“Ø–π - –∏–º—ç–π–ª —à–∞–∞—Ä–¥–∞–∂ –±–∞–π–Ω–∞")
            
            # –ò–º—ç–π–ª —Ö–∞—è–≥ —à–∞–ª–≥–∞—Ö
            if is_valid_email(message_content):
                print(f"üìß –ó”©–≤ –∏–º—ç–π–ª: {message_content}")
                
                # –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö
                token = generate_verification_token(message_content, conv_id, contact_id)
                
                # –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö
                if send_verification_email(message_content, token):
                    send_to_chatwoot(conv_id, 
                        f"üìß –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ ({message_content}) —Ä“Ø“Ø –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –ª–∏–Ω–∫ –∏–ª–≥—ç—ç–ª—ç—ç.\n\n"
                        "–ò–º—ç–π–ª—ç—ç —à–∞–ª–≥–∞–∞–¥ –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞ —É—É. –õ–∏–Ω–∫ 24 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞ —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–Ω–æ.\n\n"
                        "‚ö†Ô∏è Spam —Ñ–æ–ª–¥–µ—Ä—ã–≥ —à–∞–ª–≥–∞—Ö–∞–∞ –º–∞—Ä—Ç—É—É–∑–∞–π!")
                    print("‚úÖ –ò–º—ç–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç")
                else:
                    send_to_chatwoot(conv_id, "‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.")
                    print("‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞")
            else:
                print(f"‚ùå –ë—É—Ä—É—É –∏–º—ç–π–ª —Ñ–æ—Ä–º–∞—Ç: '{message_content}'")
                send_to_chatwoot(conv_id, 
                    "üëã –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! Chatbot –∞—à–∏–≥–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ —ç—Ö–ª—ç—ç–¥ –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–Ω–∞ —É—É.\n\n"
                    "üìß –ó”©–≤ –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –±–∏—á—ç—ç–¥ –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø.\n"
                    "–ñ–∏—à—ç—ç: example@gmail.com")
            
            return jsonify({"status": "waiting_verification"}), 200

        # ========== AI CHATBOT –ê–ñ–ò–õ–õ–£–£–õ–ê–• ==========
        print(f"ü§ñ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á ({verified_email}) - AI chatbot –∞–∂–∏–ª–ª—É—É–ª–∂ –±–∞–π–Ω–∞")
        
        # Thread –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
        conv = get_conversation(conv_id)
        conv_attrs = conv.get("custom_attributes", {})
        
        thread_key = f"openai_thread_{contact_id}"
        thread_id = conv_attrs.get(thread_key)
        
        # Thread —à–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        if not thread_id:
            print("üßµ –®–∏–Ω—ç thread “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")
            thread = client.beta.threads.create()
            thread_id = thread.id
            update_conversation(conv_id, {thread_key: thread_id})
            print(f"‚úÖ Thread “Ø“Ø—Å–≥—ç–ª—ç—ç: {thread_id}")
        else:
            print(f"‚úÖ –û–¥–æ–æ –±–∞–π–≥–∞–∞ thread –∞—à–∏–≥–ª–∞–∂ –±–∞–π–Ω–∞: {thread_id}")

        # AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö (retry logic-—Ç–æ–π)
        print("ü§ñ AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤—á –±–∞–π–Ω–∞...")
        
        retry_count = 0
        ai_response = None
        
        while retry_count <= MAX_AI_RETRIES:
            ai_response = get_ai_response(thread_id, message_content, conv_id, verified_email, retry_count)
            
            # –•—ç—Ä—ç–≤ –∞–ª–¥–∞–∞—Ç–∞–π —Ö–∞—Ä–∏—É–ª—Ç –±–∏—à –±–æ–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π
            if not any(error_phrase in ai_response for error_phrase in [
                "–∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", "—Ö—ç—Ç —É–¥–∞–∂ –±–∞–π–Ω–∞", "–æ–ª–¥—Å–æ–Ω–≥“Ø–π"
            ]):
                break
                
            retry_count += 1
            if retry_count <= MAX_AI_RETRIES:
                print(f"üîÑ AI –¥–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–∂ –±–∞–π–Ω–∞... ({retry_count}/{MAX_AI_RETRIES})")
                time.sleep(2)  # 2 —Å–µ–∫—É–Ω–¥ —Ö“Ø–ª—ç—ç—Ö
        
        # –•—ç—Ä—ç–≤ –±“Ø—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ –±“Ø—Ç—ç–ª–≥“Ø–π—Ç–≤—ç–ª –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞—Ö
        if retry_count > MAX_AI_RETRIES:
            print("‚ùå AI-–∏–π–Ω –±“Ø—Ö –æ—Ä–æ–ª–¥–ª–æ–≥–æ –±“Ø—Ç—ç–ª–≥“Ø–π—Ç—ç–≤ - –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∂ –±–∞–π–Ω–∞")
            
            send_teams_notification(
                conv_id, 
                message_content, 
                verified_email, 
                f"AI {MAX_AI_RETRIES + 1} —É–¥–∞–∞ –¥–∞—Ä–∞–∞–ª–∞–Ω –∞–ª–¥–∞–∞ –≥–∞—Ä–≥–∞–ª–∞–∞",
                f"Thread ID: {thread_id}, –ë“Ø—Ö retry –æ—Ä–æ–ª–¥–ª–æ–≥–æ –±“Ø—Ç—ç–ª–≥“Ø–π—Ç—ç–≤"
            )
            
            ai_response = (
                "üö® –£—É—á–ª–∞–∞—Ä–∞–π, —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞—Å—É—É–¥–∞–ª –≥–∞—Ä–ª–∞–∞.\n\n"
                "–ë–∏ —Ç–∞–Ω—ã –∞—Å—É—É–ª—Ç—ã–≥ —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –±–∞–≥—Ç –¥–∞–º–∂—É—É–ª–∞–∞. –£–¥–∞—Ö–≥“Ø–π –∞—Å—É—É–¥–ª—ã–≥ —à–∏–π–¥—ç–∂, —Ç–∞–Ω–¥ —Ö–∞—Ä–∏—É–ª—Ç ”©–≥”©—Ö –±–æ–ª–Ω–æ.\n\n"
                "üïê –¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø..."
            )
        
        # Chatwoot —Ä—É—É –∏–ª–≥—ç—ç—Ö
        send_to_chatwoot(conv_id, ai_response)
        print(f"‚úÖ AI —Ö–∞—Ä–∏—É–ª—Ç –∏–ª–≥—ç—ç–ª—ç—ç: {ai_response[:50]}...")
        
        # AI –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞—Ä–∏—É–ª—Ç ”©–≥—Å–Ω–∏–π –¥–∞—Ä–∞–∞ –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂ Teams-—ç—ç—Ä –º—ç–¥—ç—ç–ª—ç—Ö
        if retry_count <= MAX_AI_RETRIES:  # –ó”©–≤—Ö”©–Ω –∞–º–∂–∏–ª—Ç—Ç–∞–π AI —Ö–∞—Ä–∏—É–ª—Ç “Ø–µ–¥
            print("üîç Teams-–¥ –∏–ª–≥—ç—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
            
            # –®–∏–Ω—ç –∞—Å—É—É–¥–∞–ª –º”©–Ω —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
            should_escalate, reason = should_escalate_to_teams(thread_id, message_content)
            
            if should_escalate:
                print(f"‚úÖ {reason} - Teams-–¥ –∏–ª–≥—ç—ç—Ö")
                try:
                    # AI-—ç—ç—Ä –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç—Ö
                    analysis = analyze_customer_issue(thread_id, message_content, verified_email)
                    print(f"‚úÖ –î“Ø–≥–Ω—ç–ª—Ç –±—ç–ª—ç–Ω: {analysis[:100]}...")
                    
                    # Teams-—ç—ç—Ä –º—ç–¥—ç—ç–ª—ç—Ö
                    send_teams_notification(
                        conv_id,
                        message_content,
                        verified_email,
                        f"–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç - {reason}",
                        analysis
                    )
                    print("‚úÖ –ê—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç –∞–∂–∏–ª—Ç–∞–Ω–¥ –∏–ª–≥—ç—ç–ª—ç—ç")
                    
                except Exception as e:
                    print(f"‚ùå –ê—Å—É—É–¥–∞–ª –¥“Ø–≥–Ω—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
            else:
                print(f"‚è≠Ô∏è {reason} - Teams-–¥ –∏–ª–≥—ç—ç—Ö–≥“Ø–π")
        
        return jsonify({"status": "success"}), 200

    except Exception as e:
        print(f"üí• Webhook –∞–ª–¥–∞–∞: {e}")
        return jsonify({"status": f"error: {str(e)}"}), 500

@app.route("/test-teams", methods=["GET"])
def test_teams():
    """Teams webhook —Ç–µ—Å—Ç —Ö–∏–π—Ö"""
    if not TEAMS_WEBHOOK_URL:
        return jsonify({"error": "TEAMS_WEBHOOK_URL —Ç–æ—Ö–∏—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞"}), 400
    
    try:
        # –¢–µ—Å—Ç –¥“Ø–≥–Ω—ç–ª—Ç “Ø“Ø—Å–≥—ç—Ö
        test_analysis = """–ê–°–£–£–î–õ–´–ù –¢”®–†”®–õ : Teams –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π–Ω —Ç–µ—Å—Ç
–Ø–ê–†–ê–õ–¢–ê–ô –ë–ê–ô–î–ê–õ: –ë–∞–≥–∞
–ê–°–£–£–î–õ–´–ù –¢–û–í–ß –¢–ê–ô–õ–ë–ê–†: –°–∏—Å—Ç–µ–º –∑”©–≤”©”©—Ä –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö –∑–æ—Ä–∏–ª–≥–æ—Ç–æ–π —Ç–µ—Å—Ç –º—ç–¥—ç—ç–ª—ç–ª.
–®–ê–ê–†–î–õ–ê–ì–ê–¢–ê–ô –ê–†–ì–ê –•–≠–ú–ñ–≠–≠: Teams –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞–∂–∏–ª—Ç–∞–Ω —Ö–∞—Ä–∂, —Å–∏—Å—Ç–µ–º—Ç—ç–π —Ç–∞–Ω–∏–ª—Ü–∞—Ö
–•“Æ–õ–≠–≠–ì–î–≠–ñ –ë–£–ô –•–ê–†–ò–£–õ–¢: "–¢–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π" –≥—ç—Å—ç–Ω –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç"""
        
        # –¢–µ—Å—Ç –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö
        success = send_teams_notification(
            conv_id="test_123",
            customer_message="–≠–Ω—ç —Ç–µ—Å—Ç –º—ç–¥—ç—ç–ª—ç–ª —é–º. Teams —Ö–æ–ª–±–æ–ª—Ç –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞.",
            customer_email="test@example.com",
            escalation_reason="Teams webhook —Ç–µ—Å—Ç",
            ai_analysis=test_analysis
        )
        
        if success:
            return jsonify({"status": "success", "message": "Teams –º—ç–¥—ç—ç–ª—ç–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç!"}), 200
        else:
            return jsonify({"error": "Teams –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞"}), 500
            
    except Exception as e:
        return jsonify({"error": f"–ê–ª–¥–∞–∞: {str(e)}"}), 500

def escalate_to_human(conv_id, customer_message, customer_email=None):
    """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ AI-—ç—ç—Ä –¥“Ø–≥–Ω—ç–∂ Teams-—ç—ç—Ä –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞—Ö (–∞—à–∏–≥–ª–∞–≥–¥–¥–∞–≥–≥“Ø–π)"""
    try:
        print("üîç –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂ –±–∞–π–Ω–∞...")
        
        # –≠–Ω—ç —Ñ—É–Ω–∫—Ü –∞—à–∏–≥–ª–∞–≥–¥–¥–∞–≥–≥“Ø–π —É—á–∏—Ä –ø—Ä–æ—Å—Ç–æ–π –¥“Ø–≥–Ω—ç–ª—Ç —Ö–∏–π—Ö
        simple_analysis = f"""–ê–°–£–£–î–õ–´–ù –¢”®–†”®–õ: –¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π
–Ø–ê–†–ê–õ–¢–ê–ô –ë–ê–ô–î–ê–õ: –î—É–Ω–¥
–ê–°–£–£–î–õ–´–ù –¢–û–í–ß –¢–ê–ô–õ–ë–ê–†: {customer_message}
–®–ê–ê–†–î–õ–ê–ì–ê–¢–ê–ô –ê–†–ì–ê –•–≠–ú–ñ–≠–≠: –ê–∂–∏–ª—Ç–Ω—ã –∞–Ω—Ö–∞–∞—Ä–∞–ª —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π
–•“Æ–õ–≠–≠–ì–î–≠–ñ –ë–£–ô –•–ê–†–ò–£–õ–¢: –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–≥ —à–∏–π–¥—ç—Ö"""
        
        print(f"‚úÖ –≠–Ω–≥–∏–π–Ω –¥“Ø–≥–Ω—ç–ª—Ç –±—ç–ª—ç–Ω: {simple_analysis[:100]}...")
        
        # Teams-—ç—ç—Ä –º—ç–¥—ç—ç–ª—ç—Ö
        success = send_teams_notification(
            conv_id,
            customer_message,
            customer_email,
            "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–¥–ª—ã–Ω –¥“Ø–≥–Ω—ç–ª—Ç:",
            simple_analysis
        )
        
        if success:
            print("‚úÖ –ê—Å—É—É–¥–ª—ã–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π –∞–∂–∏–ª—Ç–∞–Ω–¥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞–≤")
            return "üëã –ë–∏ —Ç–∞–Ω—ã –∞—Å—É—É–¥–ª—ã–≥ –¥“Ø–≥–Ω—ç–∂, –∞–∂–∏–ª—Ç–∞–Ω–¥ –¥–∞–º–∂—É—É–ª–∞–∞. –£–¥–∞—Ö–≥“Ø–π –∞–∂–∏–ª—Ç–∞–Ω —Ç–∞–Ω—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ–Ω–æ.\n\nüïê –¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø..."
        else:
            print("‚ùå Teams –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞")
            return "–£—É—á–ª–∞–∞—Ä–∞–π, —Ç–∞–Ω—ã –∞—Å—É—É–¥–ª—ã–≥ –∞–∂–∏–ª—Ç–∞–Ω–¥ –¥–∞–º–∂—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
            
    except Exception as e:
        print(f"‚ùå Escalation –∞–ª–¥–∞–∞: {e}")
        return "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."

def should_escalate_to_teams(thread_id, current_message):
    """–¢—É—Ö–∞–π–Ω –∞—Å—É—É–¥–ª—ã–≥ Teams-–¥ –∏–ª–≥—ç—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π —ç—Å—ç—Ö–∏–π–≥ —à–∏–π–¥—ç—Ö"""
    try:
        # OpenAI thread-—Å —Å“Ø“Ø–ª–∏–π–Ω 20 –º–µ—Å—Å–µ–∂–∏–π–≥ –∞–≤–∞—Ö
        messages = client.beta.threads.messages.list(thread_id=thread_id, limit=20)
        
        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂“Ø“Ø–¥–∏–π–≥ —Ü—É–≥–ª—É—É–ª–∞—Ö
        user_messages = []
        for msg in reversed(messages.data):
            if msg.role == "user":
                content = ""
                for content_block in msg.content:
                    if hasattr(content_block, 'text'):
                        content += content_block.text.value
                if content.strip():
                    user_messages.append(content.strip())
        
        # –•—ç—Ä—ç–≤ –∞–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂ –±–æ–ª Teams-–¥ –∏–ª–≥—ç—ç—Ö
        if len(user_messages) <= 1:
            return True, "–ê–Ω—Ö–Ω—ã –∞—Å—É—É–ª—Ç"
        
        # AI-–∞–∞—Ä —à–∏–Ω—ç –∞—Å—É—É–¥–∞–ª –º”©–Ω —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        system_msg = (
            "–¢–∞ –±–æ–ª —á–∞—Ç –¥“Ø–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç–Ω–∏–π –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω. "
            "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Å“Ø“Ø–ª–∏–π–Ω –º–µ—Å—Å–µ–∂ –Ω—å —à–∏–Ω—ç –∞—Å—É—É–¥–∞–ª –º”©–Ω —ç—Å—ç—Ö–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–Ω–æ —É—É."
        )
        
        user_msg = f'''
–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω ”©–º–Ω”©—Ö –º–µ—Å—Å–µ–∂“Ø“Ø–¥:
{chr(10).join(user_messages[:-1])}

–û–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂: "{current_message}"

–î–∞—Ä–∞–∞—Ö –∞–ª—å –Ω—ç–≥—ç—ç—Ä —Ö–∞—Ä–∏—É–ª–Ω–∞ —É—É:
- "–®–ò–ù_–ê–°–£–£–î–ê–õ" - —Ö—ç—Ä—ç–≤ –æ–¥–æ–æ–≥–∏–π–Ω –º–µ—Å—Å–µ–∂ —à–∏–Ω—ç —Ç”©—Ä–ª–∏–π–Ω –∞—Å—É—É–¥–∞–ª –±–æ–ª
- "“Æ–†–ì–≠–õ–ñ–õ–≠–õ" - —Ö—ç—Ä—ç–≤ ”©–º–Ω”©—Ö –∞—Å—É—É–¥–ª—ã–Ω “Ø—Ä–≥—ç–ª–∂–ª—ç–ª, —Ç–æ–¥—Ä—É—É–ª–≥–∞ –±–æ–ª
- "–î–ê–•–ò–ù_–ê–°–£–£–õ–¢" - —Ö—ç—Ä—ç–≤ –∏–∂–∏–ª –∞—Å—É—É–¥–ª—ã–≥ –¥–∞—Ö–∏–Ω –∞—Å—É—É–∂ –±–∞–π–≥–∞–∞ –±–æ–ª
'''
        
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg}
            ],
            max_tokens=50,
            temperature=0.1
        )
        
        analysis_result = response.choices[0].message.content.strip()
        
        if "–®–ò–ù_–ê–°–£–£–î–ê–õ" in analysis_result:
            return True, "–®–∏–Ω—ç –∞—Å—É—É–¥–∞–ª –∏–ª—Ä—ç–≤"
        else:
            return False, "”®–º–Ω”©—Ö –∞—Å—É—É–¥–ª—ã–Ω “Ø—Ä–≥—ç–ª–∂–ª—ç–ª"
            
    except Exception as e:
        print(f"‚ùå Escalation —à–∏–π–¥—ç—Ö –∞–ª–¥–∞–∞: {e}")
        # –ê–ª–¥–∞–∞ –≥–∞—Ä–≤–∞–ª –∞–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂ –≥—ç–∂ “Ø–∑—ç—Ö
        return True, "–ê–ª–¥–∞–∞ - –∞–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂ –≥—ç–∂ “Ø–∑—ç–≤"

@app.route("/debug-env", methods=["GET"])
def debug_env():
    """–û—Ä—á–Ω—ã —Ö—É–≤—å—Å–∞–≥—á–¥—ã–≥ —à–∞–ª–≥–∞—Ö debug endpoint"""
    return {
        "JWT_SECRET": "SET" if JWT_SECRET else "NOT SET",
        "OPENAI_API_KEY": "SET" if OPENAI_API_KEY else "NOT SET", 
        "ASSISTANT_ID": "SET" if ASSISTANT_ID else "NOT SET",
        "CHATWOOT_API_KEY": "SET" if CHATWOOT_API_KEY else "NOT SET",
        "ACCOUNT_ID": "SET" if ACCOUNT_ID else "NOT SET",
        "SMTP_SERVER": SMTP_SERVER,
        "SMTP_PORT": SMTP_PORT,
        "SENDER_EMAIL": "SET" if SENDER_EMAIL else "NOT SET",
        "SENDER_PASSWORD": "SET" if SENDER_PASSWORD else "NOT SET",
        "TEAMS_WEBHOOK_URL": "SET" if TEAMS_WEBHOOK_URL else "NOT SET",
        "VERIFICATION_URL_BASE": VERIFICATION_URL_BASE
    }

def clean_ai_response(response_text):
    """AI —Ö–∞—Ä–∏—É–ª—Ç—ã–≥ —Ü—ç–≤—ç—Ä–ª—ç–∂, JSON —Ö—ç–ª–±—ç—Ä–∏–π–≥ —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥—ç–¥ –æ–π–ª–≥–æ–º–∂—Ç–æ–π –±–æ–ª–≥–æ—Ö"""
    try:
        # JSON —Ö—ç–ª–±—ç—Ä–∏–π–≥ –∏–ª—Ä“Ø“Ø–ª—ç—Ö
        import json
        
        # –•—ç—Ä—ç–≤ JSON —Ö—ç–ª–±—ç—Ä –±–∞–π–≤–∞–ª parse —Ö–∏–π—Ö
        if response_text.strip().startswith('{') and response_text.strip().endswith('}'):
            try:
                json_data = json.loads(response_text)
                
                # JSON –¥–æ—Ç–æ—Ä clarification_question –±–∞–π–≤–∞–ª —Ç—ç—Ä–∏–π–≥ –±—É—Ü–∞–∞—Ö
                if isinstance(json_data, dict):
                    if 'clarification_question' in json_data:
                        return json_data['clarification_question']
                    elif 'message' in json_data:
                        return json_data['message']
                    elif 'content' in json_data:
                        return json_data['content']
                    elif 'response' in json_data:
                        return json_data['response']
                    else:
                        # JSON-–∏–π–Ω —É—Ç–≥—É—É–¥—ã–≥ –Ω—ç–≥—Ç–≥—ç–∂ —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥—ç–¥ –æ–π–ª–≥–æ–º–∂—Ç–æ–π –±–æ–ª–≥–æ—Ö
                        readable_parts = []
                        for key, value in json_data.items():
                            if isinstance(value, str) and value.strip():
                                readable_parts.append(value)
                        
                        if readable_parts:
                            return ' '.join(readable_parts)
                        else:
                            return "–£—É—á–ª–∞–∞—Ä–∞–π, —Ç–æ–¥–æ—Ä—Ö–æ–π —Ö–∞—Ä–∏—É–ª—Ç ”©–≥”©—Ö –±–æ–ª–æ–º–∂–≥“Ø–π –±–∞–π–Ω–∞. –ê—Å—É—É–ª—Ç–∞–∞ –¥–∞—Ö–∏–Ω —Ç–æ–¥–æ—Ä—Ö–æ–π –∞—Å—É—É–≥–∞–∞—Ä–∞–π."
                            
            except json.JSONDecodeError:
                pass
        
        # JSON –±–∏—à –±–æ–ª —à—É—É–¥ –±—É—Ü–∞–∞—Ö
        return response_text.strip()
        
    except Exception as e:
        print(f"‚ùå AI —Ö–∞—Ä–∏—É–ª—Ç —Ü—ç–≤—ç—Ä–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return response_text.strip()

if __name__ == "__main__":
    app.run(debug=True, port=5000)