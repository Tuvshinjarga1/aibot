# main.py
from fastapi import FastAPI, Request
import asyncio
from pydantic import BaseModel
import httpx
import os
from dotenv import load_dotenv
load_dotenv()

app = FastAPI()

API_KEY = os.getenv("OPENROUTER_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_API_KEY")

# –¢“Ø—Ä —Ö–∞–¥–≥–∞–ª–∞—Ö (demo) ‚Äî production-–¥ –±–æ–ª Redis/DB-—Ä —Å–æ–ª–∏—Ö
user_threads: dict[str,str] = {}

@app.post("/api/chatwoot")
async def chatwoot_webhook(request: Request):
    body = await request.json()
    print("üì• Body from Chatwoot:", body)

    # 1) –ó”©–≤—Ö”©–Ω ‚Äúincoming‚Äù message_type –¥—ç—ç—Ä –∞–∂–∏–ª–ª–∞–Ω–∞
    if body.get("message_type") != "incoming":
        return {}  # –ë—É—Å–∞–¥ “Ø–π–ª–¥–ª–∏–π–≥ –∞–ª–≥–∞—Å–∞–Ω–∞

    # 2) –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω ID-–≥ meta.sender —ç—Å–≤—ç–ª top-level sender-–∞–∞—Å –∞–≤–Ω–∞
    #    (—á–∞–Ω–∞—Ä—Ç–∞–π –Ω—å meta.sender.id ‚Äî Chatwoot v2.10+)
    user_id = (
        str(body.get("meta", {}).get("sender", {}).get("id"))
        if body.get("meta", {}).get("sender")
        else str(body.get("sender", {}).get("id", "anonymous"))
    )

    # 3) –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±–∏—á—Å—ç–Ω —Ç–µ–∫—Å—Ç
    content = body.get("content", "").strip()
    if not content:
        return {"content": "‚ö†Ô∏è –ú–µ—Å—Å–µ–∂ —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞."}

    # 4) ”®–º–Ω”© “Ø“Ø—Å–≥—ç—Å—ç–Ω thread_id –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–∞–¥ “Ø“Ø—Å–≥—ç—Ö
    if user_id not in user_threads:
        user_threads[user_id] = await create_new_thread()
    thread_id = user_threads[user_id]

    # 5) AI-–¥ —Ç–µ–∫—Å—Ç –¥–∞–º–∂—É—É–ª–∂, —Ö–∞—Ä–∏—É –∞–≤–Ω–∞
    try:
        reply = await get_assistant_response(content, thread_id)
        return {"content": reply}
    except Exception:
        import traceback
        traceback.print_exc()
        return {"content": "üí• AI-–¥ —Ö–∞–Ω–¥–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞."}


async def create_new_thread() -> str:
    async with httpx.AsyncClient() as client:
        res = await client.post(
            "https://api.openai.com/v1/threads",
            headers={
                "Authorization": f"Bearer {API_KEY}",
                "OpenAI-Beta": "assistants=v2",
                "Content-Type": "application/json",
            },
        )
        res.raise_for_status()
        return res.json()["id"]


async def get_assistant_response(message: str, thread_id: str) -> str:
    async with httpx.AsyncClient() as client:
        # a) –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ç–µ–∫—Å—Ç –Ω—ç–º—ç—Ö
        await client.post(
            f"https://api.openai.com/v1/threads/{thread_id}/messages",
            headers={
                "Authorization": f"Bearer {API_KEY}",
                "OpenAI-Beta": "assistants=v2",
                "Content-Type": "application/json",
            },
            json={"role": "user", "content": message},
        )

        # b) Run “Ø“Ø—Å–≥—ç—Ö
        run_res = await client.post(
            f"https://api.openai.com/v1/threads/{thread_id}/runs",
            headers={
                "Authorization": f"Bearer {API_KEY}",
                "OpenAI-Beta": "assistants=v2",
                "Content-Type": "application/json",
            },
            json={"assistant_id": ASSISTANT_ID},
        )
        run_data = run_res.json()
        if "id" not in run_data:
            print("‚ùå Run —ç—Ö–ª“Ø“Ø–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞:", run_data)
            return "‚ö†Ô∏è AI run —ç—Ö–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞."
        run_id = run_data["id"]

        # c) Run –¥—É—É—Å–∞—Ö—ã–≥ polling
        while True:
            status = (await client.get(
                f"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
                headers={
                    "Authorization": f"Bearer {API_KEY}",
                    "OpenAI-Beta": "assistants=v2",
                    "Content-Type": "application/json",
                },
            )).json()["status"]
            if status == "completed":
                break
            await asyncio.sleep(1)

        # d) AI —Ö–∞—Ä–∏—É–≥ —É–Ω—à–∏—Ö
        messages = (await client.get(
            f"https://api.openai.com/v1/threads/{thread_id}/messages",
            headers={
                "Authorization": f"Bearer {API_KEY}",
                "OpenAI-Beta": "assistants=v2",
                "Content-Type": "application/json",
            },
        )).json()["data"]
        return messages[0]["content"][0]["text"]["value"]