import os
import time
import requests
import re
import threading
from flask import Flask, request, jsonify

# ‚îÄ‚îÄ Environment load ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from dotenv import load_dotenv
load_dotenv()

# ‚îÄ‚îÄ Logging ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# ‚îÄ‚îÄ Orchny huvisagchid ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CHATWOOT_API_KEY  = os.getenv("CHATWOOT_API_KEY", "").strip()
ACCOUNT_ID        = os.getenv("ACCOUNT_ID", "").strip()
INBOX_ID          = os.getenv("INBOX_ID", "").strip()
CHATWOOT_BASE_URL = os.getenv("CHATWOOT_BASE_URL", "https://app.chatwoot.com").rstrip("/")

# (–ò–º—ç–π–ª –±–æ–ª–æ–Ω –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö–≥“Ø–π —Ç—É–ª –¥–æ–æ—Ä—Ö —É—Ç–≥—É—É–¥—ã–≥ —Ö–æ–æ—Å–æ–Ω –±–∞–π–ª–≥–∞–∂ –±–æ–ª–Ω–æ)
SENDER_EMAIL      = os.getenv("SENDER_EMAIL", "").strip()
SENDER_PASSWORD   = os.getenv("SENDER_PASSWORD", "").strip()
SMTP_SERVER       = os.getenv("SMTP_SERVER", "").strip()
SMTP_PORT         = int(os.getenv("SMTP_PORT", "587"))
VERIFICATION_URL_BASE = os.getenv("VERIFICATION_URL_BASE", "").strip()
JWT_SECRET        = os.getenv("JWT_SECRET", "").strip()
TEAMS_WEBHOOK_URL = os.getenv("TEAMS_WEBHOOK_URL", "").strip()

# ‚îÄ‚îÄ Chatwoot —Ñ—É–Ω–∫—Ü—É—É–¥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def send_to_chatwoot(conv_id: int, text: str) -> None:
    """
    Chatwoot —Ä—É—É outgoing (–∞–≥–µ–Ω—Ç—ã–Ω) –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö
    """
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/messages"
    headers = {
        "api_access_token": CHATWOOT_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {
        "content": text,
        "message_type": "outgoing",
        "private": False
    }
    logger.info(f"üì§ Sending to Chatwoot: {url}  payload={payload}")
    resp = requests.post(url, json=payload, headers=headers)
    resp.raise_for_status()
    logger.info(f"üì• Chatwoot response: {resp.status_code}")

def create_conversation(contact_id: int) -> int:
    """
    –®–∏–Ω—ç Conversation “Ø“Ø—Å–≥—ç—Ö (API Channel Inbox —Ä—É—É)
    """
    url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations"
    headers = {
        "api_access_token": CHATWOOT_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {
        "contact_id": contact_id,
        "inbox_id": INBOX_ID     # API Channel Inbox ID
    }
    resp = requests.post(url, json=payload, headers=headers)
    resp.raise_for_status()
    conv = resp.json()["payload"]["conversation"]
    return conv["id"]

def create_or_update_contact(email_or_name: str) -> int:
    """
    –•—ç—Ä–≤—ç—ç email –±–∞–π—Å–∞–Ω –±–æ–ª —Ç—É—Ö–∞–π–Ω Contact-–∏–π–≥ —Ö–∞–π–∂, –±–∞–π–≤–∞–ª ID-–∏–π–≥ –±—É—Ü–∞–∞—Ö.
    –ë–∞–π—Ö–≥“Ø–π –±–æ–ª —à–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç—ç–¥ ID –±—É—Ü–∞–∞—Ö.
    –ó–∞–∞–≤–∞–ª email –±–∏—à –±–æ–ª –±–∏–¥ name —Ç–∞–ª–±–∞—Ä –¥—ç—ç—Ä —à—É—É–¥ ”©–≥—á –±–æ–ª–Ω–æ.
    """
    # 1) –•–∞–π–ª—Ç–∞–∞—Ä —à–∞–ª–≥–∞—Ö (–∏–º—ç–π–ª—ç—ç—Ä)
    search_url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts/search"
    headers = {"api_access_token": CHATWOOT_API_KEY}
    resp = requests.get(search_url, params={"q": email_or_name}, headers=headers)
    resp.raise_for_status()
    payload = resp.json().get("payload", [])
    if payload:
        # –•—ç—Ä–≤—ç—ç contact –æ–ª–¥–≤–æ–ª —Ç—ç—Ä ID-–∏–π–≥ –±—É—Ü–∞–∞—Ö
        existing = payload[0]
        return existing["id"]

    # 2) –®–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç—Ö (–∏–º—ç–π–ª–≥“Ø–π –±–æ–ª name —Ç–∞–ª–±–∞—Ä—Ç —à—É—É–¥ –±–∏—á–Ω—ç)
    create_url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/contacts"
    headers = {
        "api_access_token": CHATWOOT_API_KEY,
        "Content-Type": "application/json"
    }
    # –•—ç—Ä–≤—ç—ç –∑”©–≤ –∏–º—ç–π–ª —Ñ–æ—Ä–º–∞—Ç—ã–Ω —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞–∞–¥ –±–æ–ª–≥–æ–æ–º–∂—Ç–æ–π –∞–∂–∏–ª–ª–∞–∂ –±–æ–ª–Ω–æ.
    is_email = re.match(r"^[\w\.-]+@[\w\.-]+\.\w+$", email_or_name)
    contact_data = {
        "name": email_or_name if not is_email else email_or_name.split("@")[0],
        "email": email_or_name if is_email else None
    }
    resp = requests.post(create_url, json=contact_data, headers=headers)
    resp.raise_for_status()
    new_contact = resp.json()["payload"]["contact"]
    return new_contact["id"]

# ‚îÄ‚îÄ Flask Routes ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@app.route("/webhook", methods=["POST"])
def webhook_handler():
    """
    Chatwoot webhook handler. 
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ incoming –º–µ—Å—Å–µ–∂ –∏—Ä—ç—Ö—ç–¥ –∞–∂–∏–ª–ª–∞–Ω–∞.
    """
    try:
        data = request.json or {}
        logger.info(f"üîÑ Webhook –∏—Ä–ª—ç—ç: {data.get('message_type', 'unknown')}")

        # –ó”©–≤—Ö”©–Ω incoming –º–µ—Å—Å–µ–∂ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö
        if data.get("message_type") != "incoming":
            return jsonify({"status": "skipped - not incoming"}), 200

        # 1) Conversation ID –±–æ–ª–æ–Ω –º–µ—Å—Å–µ–∂–∏–π–Ω content
        conv_id = data["conversation"].get("id")    # –ó–∞—Ä–∏–º —Ç–æ—Ö–∏–æ–ª–¥–æ–ª–¥ conv_id –±–∞–π—Ö–≥“Ø–π –±–∞–π–∂ –±–æ–ª–Ω–æ
        message_content = (data.get("content") or "").strip()
        logger.info(f"üìù conv_id={conv_id}, content='{message_content}'")

        # 2) Contact ID –æ–ª–æ—Ö
        contact_id = None
        if data.get("sender") and data["sender"].get("id"):
            contact_id = data["sender"]["id"]

        # –•—ç—Ä–≤—ç—ç contact_id –±–∞–π—Ö–≥“Ø–π –±–æ–ª (API Channel-–∞–∞—Ä –∏—Ä—Å—ç–Ω –∞–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂) ‚Üí –®–∏–Ω—ç Contact “Ø“Ø—Å–≥—ç—Ö
        if not contact_id:
            # –ú–∞–Ω–∞–π –∂–∏—à—ç—ç: —Ö—ç—Ä–≤—ç—ç message_content –Ω—å –∏–º—ç–π–ª –±–æ–ª “Ø“Ø–Ω–∏–π–≥ –∞—à–∏–≥–ª–∞–Ω “Ø“Ø—Å–≥—ç–Ω—ç, —ç—Å –±”©–≥”©”©—Å name –≥—ç–∂ “Ø“Ø—Å–≥—ç–Ω—ç.
            contact_id = create_or_update_contact(message_content or "AnonymousUser")
            # –ú”©–Ω —à—É—É–¥ —à–∏–Ω—ç Conversation “Ø“Ø—Å–≥—ç—Ö
            conv_id = create_conversation(contact_id)
            logger.info(f"üë§ –®–∏–Ω—ç Contact ID={contact_id}, –®–∏–Ω—ç Conversation ID={conv_id}")

        else:
            # –•—ç—Ä–≤—ç—ç conv_id –∏—Ä—ç—ç–≥“Ø–π —Ç–æ—Ö–∏–æ–ª–¥–æ–ª–¥ (–∑–∞—Ä–∏–º webhook-–¥ —Å–∏—Ä–æ–ª –±–∞–π–∂ –±–æ–ª–Ω–æ)
            if not conv_id:
                conv_id = create_conversation(contact_id)
                logger.info(f"üë§ –ë”©–≥–ª”©”©–≥“Ø–π Conversation ID –±–∞–π—Å–∞–Ω —Ç—É–ª —à–∏–Ω—ç Conversation ID={conv_id}")

        # 3) –•–∞—Ä–∏—É–ª—Ç –±—ç–ª—Ç–≥—ç—Ö (—ç–Ω—ç –∂–∏—à—ç—ç–Ω–¥ –±–∏–¥ ‚Äúecho‚Äù –º–∞—è–≥–∞–∞—Ä —Ö–∞—Ä–∏—É–ª—Ç –±—É—Ü–∞–∞–Ω–∞)
        reply_text = f"–ë–æ—Ç —Ö–∞—Ä–∏—É–ª—Ç: \"{message_content}\""
        logger.info(f"ü§ñ Reply —Ç–µ–∫—Å—Ç –±—ç–ª—Ç–≥—ç–ª—ç—ç: {reply_text}")

        # 4) Chatwoot —Ä—É—É outgoing –º–µ—Å—Å–µ–∂ —è–≤—É—É–ª–∞—Ö
        send_to_chatwoot(conv_id, reply_text)

        return jsonify({"status": "success"}), 200

    except Exception as e:
        logger.error(f"üí• Webhook –∞–ª–¥–∞–∞: {e}")
        return jsonify({"status": f"error: {str(e)}"}), 500

if __name__ == "__main__":
    # debug=True –±–æ–ª –∞–ª–¥–∞–∞ –≥–∞—Ä–∞—Ö “Ø–µ–¥ –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π log —Ö–∞—Ä—É—É–ª–Ω–∞
    app.run(host="0.0.0.0", port=5000, debug=True)
