# main.py
from fastapi import FastAPI, Request
import asyncio
from pydantic import BaseModel
import httpx
import os
from dotenv import load_dotenv
load_dotenv()

app = FastAPI()

API_KEY = os.getenv("OPENROUTER_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_API_KEY")

# –¢—É—Ä—à–∏–ª—Ç—ã–Ω –∑–æ—Ä–∏—É–ª–∞–ª—Ç ‚Äî production-–¥ –±–æ–ª Redis/DB-—Ä —Ö–∞–¥–≥–∞–ª–Ω–∞
user_threads: dict[str,str] = {}

@app.post("/api/chatwoot")
async def chatwoot_webhook(request: Request):
    body = await request.json()
    print("üì• Body from Chatwoot:", body)

    # 1) –ó”©–≤—Ö”©–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á—ç—ç—Å –∏—Ä—Å—ç–Ω –º–µ—Å—Å–µ–∂ –¥—ç—ç—Ä –∞–∂–∏–ª–ª–∞–Ω–∞
    if body.get("message_type") != "incoming" or body.get("event") != "message_created":
        # –ß–∞—Ç–±–æ—Ç —Ö–∞—Ä–∏—É ”©–≥”©—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞–≥“Ø–π event
        return {"content": ""}

    try:
        # 2) –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω ID-–≥ meta.sender.id-–∞–∞—Å –∞–≤–Ω–∞
        user_id = str(body.get("meta", {})
                          .get("sender", {})
                          .get("id", "anonymous"))
        # 3) –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±–∏—á—Å—ç–Ω —Ç–µ–∫—Å—Ç
        content = body.get("content", "").strip()
        if not content:
            return {"content": "‚ö†Ô∏è –ú–µ—Å—Å–µ–∂ —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞."}

        # 4) Thread ID –æ–ª–≥–æ—Ö/“Ø—Å–≥—ç—Ö
        if user_id not in user_threads:
            user_threads[user_id] = await create_new_thread()
        thread_id = user_threads[user_id]
        print(f"üßµ Using thread_id={thread_id} for user={user_id}")

        # 5) AI-–¥ –¥–∞–º–∂—É—É–ª–∂ —Ö–∞—Ä–∏—É –∞–≤–∞—Ö
        reply = await get_assistant_response(content, thread_id)
        print("ü§ñ AI Reply:", reply)
        return {"content": reply}

    except Exception:
        traceback.print_exc()
        # –ê–ª–¥–∞–∞ –≥–∞—Ä—Å–∞–Ω —á —Ö–æ–æ—Å–æ–Ω –±–∏—à fallback ”©–≥–Ω”©
        return {"content": "üí• –•–∞—Ä–∏—É –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞."}


async def create_new_thread() -> str:
    print("‚ûï Creating new thread...")
    async with httpx.AsyncClient() as client:
        res = await client.post(
            "https://api.openai.com/v1/threads",
            headers={
                "Authorization": f"Bearer {API_KEY}",
                "OpenAI-Beta": "assistants=v2",
                "Content-Type": "application/json",
            },
        )
        res.raise_for_status()
        thread_id = res.json()["id"]
        print("‚úÖ New thread_id:", thread_id)
        return thread_id


async def get_assistant_response(message: str, thread_id: str) -> str:
    print("‚úâÔ∏è Sending message to assistant:", message)
    async with httpx.AsyncClient() as client:
        # –∞) –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ç–µ–∫—Å—Ç –Ω—ç–º—ç—Ö
        m_res = await client.post(
            f"https://api.openai.com/v1/threads/{thread_id}/messages",
            headers={
                "Authorization": f"Bearer {API_KEY}",
                "OpenAI-Beta": "assistants=v2",
                "Content-Type": "application/json",
            },
            json={"role": "user", "content": message},
        )
        m_res.raise_for_status()

        # –±) Run —ç—Ö–ª“Ø“Ø–ª—ç—Ö
        run_res = await client.post(
            f"https://api.openai.com/v1/threads/{thread_id}/runs",
            headers={
                "Authorization": f"Bearer {API_KEY}",
                "OpenAI-Beta": "assistants=v2",
                "Content-Type": "application/json",
            },
            json={"assistant_id": ASSISTANT_ID},
        )
        run_data = run_res.json()
        print("üõ† Run response:", run_data)
        if "id" not in run_data:
            # –ê–ª–¥–∞–∞ –∑–∞–∞–≥—á fallback
            return "‚ö†Ô∏è AI run —ç—Ö–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞."
        run_id = run_data["id"]

        # –≤) Run –¥—É—É—Å–∞—Ö—ã–≥ —Ö“Ø–ª—ç—ç—Ö (poll)
        print("‚è≥ Polling for run to complete...")
        while True:
            status_res = await client.get(
                f"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
                headers={
                    "Authorization": f"Bearer {API_KEY}",
                    "OpenAI-Beta": "assistants=v2",
                    "Content-Type": "application/json",
                },
            )
            status = status_res.json().get("status")
            if status == "completed":
                break
            await asyncio.sleep(1)

        # –≥) AI —Ö–∞—Ä–∏—É–≥ —É–Ω—à–∏—Ö
        msg_res = await client.get(
            f"https://api.openai.com/v1/threads/{thread_id}/messages",
            headers={
                "Authorization": f"Bearer {API_KEY}",
                "OpenAI-Beta": "assistants=v2",
                "Content-Type": "application/json",
            },
        )
        data = msg_res.json().get("data", [])
        if data and data[0].get("content"):
            return data[0]["content"][0]["text"]["value"]
        return "ü§î –Ø–≥ —Ö–∞—Ä–∏—É –æ–ª–¥—Å–æ–Ω–≥“Ø–π."