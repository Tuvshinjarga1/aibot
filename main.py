import os
import time
import logging
import requests
from openai import OpenAI
import json
from urllib.parse import urljoin, urlparse
from flask import Flask, request, jsonify
from bs4 import BeautifulSoup
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import re
import random
from typing import Dict, Optional

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# ‚Äî‚Äî Config ‚Äî‚Äî #
ROOT_URL             = os.getenv("ROOT_URL", "https://docs.cloud.mn/")
DELAY_SEC            = float(os.getenv("DELAY_SEC", "0.5"))
ALLOWED_NETLOC       = urlparse(ROOT_URL).netloc
MAX_CRAWL_PAGES      = int(os.getenv("MAX_CRAWL_PAGES", "50"))
CHATWOOT_API_KEY     = os.getenv("CHATWOOT_API_KEY")
ACCOUNT_ID           = os.getenv("ACCOUNT_ID")
CHATWOOT_BASE_URL    = os.getenv("CHATWOOT_BASE_URL", "https://app.chatwoot.com")
# CHATWOOT_BASE_URL    = os.getenv("CHATWOOT_BASE_URL", "https://chat.cloud.mn")
OPENAI_API_KEY       = os.getenv("OPENAI_API_KEY")
AUTO_CRAWL_ON_START  = os.getenv("AUTO_CRAWL_ON_START", "true").lower() == "true"

# SMTP —Ç–æ—Ö–∏—Ä–≥–æ–æ
SMTP_SERVER          = os.getenv("SMTP_SERVER")
SMTP_PORT            = int(os.getenv("SMTP_PORT", "587"))
SMTP_USERNAME        = os.getenv("SENDER_EMAIL")
SMTP_PASSWORD        = os.getenv("SENDER_PASSWORD")
SMTP_FROM_EMAIL      = os.getenv("SENDER_EMAIL")

# Microsoft Teams webhook
TEAMS_WEBHOOK_URL    = os.getenv("TEAMS_WEBHOOK_URL")

# Microsoft Planner —Ç–æ—Ö–∏—Ä–≥–æ–æ
PLANNER_TENANT_ID    = os.getenv("PLANNER_TENANT_ID")
PLANNER_CLIENT_ID    = os.getenv("PLANNER_CLIENT_ID")
PLANNER_CLIENT_SECRET = os.getenv("PLANNER_CLIENT_SECRET")
PLANNER_PLAN_ID      = os.getenv("PLANNER_PLAN_ID")
PLANNER_BUCKET_ID    = os.getenv("PLANNER_BUCKET_ID")

# Initialize OpenAI client
client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

# ‚Äî‚Äî Memory Storage ‚Äî‚Äî #
conversation_memory = {}
crawled_data = []
crawl_status = {"status": "not_started", "message": "Crawling has not started yet"}

# ‚Äî‚Äî Microsoft Planner Integration ‚Äî‚Äî #
_cached_token = None
_token_expiry = 0  # UNIX timestamp

def get_planner_access_token() -> str:
    """Microsoft Planner-–∏–π–Ω access token –∞–≤–∞—Ö"""
    global _cached_token, _token_expiry

    # –•—ç—Ä–≤—ç—ç token —Ö“Ø—á–∏–Ω—Ç—ç–π –±–∞–π–≤–∞–ª cache-–∞–∞—Å –±—É—Ü–∞–∞–Ω–∞
    if _cached_token and time.time() < _token_expiry - 10:
        return _cached_token

    url = f"https://login.microsoftonline.com/{PLANNER_TENANT_ID}/oauth2/v2.0/token"
    headers = { "Content-Type": "application/x-www-form-urlencoded" }
    data = {
        "client_id": PLANNER_CLIENT_ID,
        "client_secret": PLANNER_CLIENT_SECRET,
        "scope": "https://graph.microsoft.com/.default",
        "grant_type": "client_credentials"
    }

    try:
        response = requests.post(url, headers=headers, data=data, timeout=10)
        if response.status_code != 200:
            logging.error(f"Planner access token –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {response.status_code} - {response.text}")
            return None

        token_data = response.json()
        _cached_token = token_data["access_token"]
        _token_expiry = time.time() + token_data.get("expires_in", 3600)
        
        logging.info("Planner access token –∞–º–∂–∏–ª—Ç—Ç–∞–π –∞–≤–ª–∞–∞")
        return _cached_token
        
    except Exception as e:
        logging.error(f"Planner access token –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {e}")
        return None

class MicrosoftPlannerAPI:
    def __init__(self, access_token: str):
        self.base_url = "https://graph.microsoft.com/v1.0"
        self.headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }

    def create_task(self, plan_id: str, bucket_id: str, title: str,
                    due_date: Optional[str] = None, priority: int = 5,
                    assigned_user_id: Optional[str] = None) -> Dict:
        """Microsoft Planner-–¥ —à–∏–Ω—ç task “Ø“Ø—Å–≥—ç—Ö"""
        url = f"{self.base_url}/planner/tasks/"
        data = {
            "planId": plan_id,
            "bucketId": bucket_id,
            "title": title,
            "priority": priority
        }

        if due_date:
            data["dueDateTime"] = due_date
    
        if assigned_user_id:
            data["assignments"] = {
                assigned_user_id: {
                    "@odata.type": "#microsoft.graph.plannerAssignment",
                    "orderHint": " !"
                }
            }

        try:
            response = requests.post(url, headers=self.headers, json=data, timeout=10)
            return response.json()
        except Exception as e:
            logging.error(f"Planner task “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {e}")
            return {"error": str(e)}

def create_planner_task(email: str, issue: str, conv_id: int = None) -> bool:
    """Microsoft Planner-–¥ task “Ø“Ø—Å–≥—ç—Ö"""
    if not all([PLANNER_TENANT_ID, PLANNER_CLIENT_ID, PLANNER_CLIENT_SECRET, PLANNER_PLAN_ID, PLANNER_BUCKET_ID]):
        logging.error("Microsoft Planner —Ç–æ—Ö–∏—Ä–≥–æ–æ –¥—É—Ç—É—É –±–∞–π–Ω–∞")
        return False
        
    try:
        # Access token –∞–≤–∞—Ö
        token = get_planner_access_token()
        if not token:
            logging.error("Planner access token –∞–≤—á —á–∞–¥—Å–∞–Ω–≥“Ø–π")
            return False
            
        # Planner API instance “Ø“Ø—Å–≥—ç—Ö
        planner = MicrosoftPlannerAPI(token)
        
        # Task title “Ø“Ø—Å–≥—ç—Ö (buten.py —Ñ–æ—Ä–º–∞—Ç—Ç–∞–π–≥–∞–∞—Ä)
        issue_preview = issue[:50] + "..." if len(issue) > 50 else issue
        title = f"{email} --> {issue_preview}"
        
        # Task “Ø“Ø—Å–≥—ç—Ö
        result = planner.create_task(
            plan_id=PLANNER_PLAN_ID,
            bucket_id=PLANNER_BUCKET_ID,
            title=title,
            priority=1  # ”®–Ω–¥”©—Ä –∞—á —Ö–æ–ª–±–æ–≥–¥–æ–ª
        )
        
        if "error" not in result and result.get("id"):
            task_id = result.get("id")
            logging.info(f"Microsoft Planner task –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–≥—ç–ª—ç—ç: {task_id} - {email}")
            return True
        else:
            logging.error(f"Planner task “Ø“Ø—Å–≥—ç—Ö –∞–º–∂–∏–ª—Ç–≥“Ø–π: {result}")
            return False
            
    except Exception as e:
        logging.error(f"Planner task “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {e}")
        return False

# ‚Äî‚Äî Crawl & Scrape ‚Äî‚Äî #
def crawl_and_scrape(start_url: str):
    visited = set()
    to_visit = {start_url}
    results = []

    while to_visit and len(visited) < MAX_CRAWL_PAGES:
        url = to_visit.pop()
        if url in visited:
            continue
        visited.add(url)

        try:
            logging.info(f"[Crawling] {url}")
            resp = requests.get(url, timeout=10)
            resp.raise_for_status()
        except Exception as e:
            logging.warning(f"Failed to fetch {url}: {e}")
            continue

        soup = BeautifulSoup(resp.text, "html.parser")
        title = soup.title.string.strip() if soup.title else url
        body, images = extract_content(soup, url)

        results.append({
            "url": url,
            "title": title,
            "body": body,
            "images": images
        })

        for a in soup.find_all("a", href=True):
            href = a["href"]
            if is_internal_link(href):
                full = normalize_url(url, href)
                if full.startswith(ROOT_URL) and full not in visited:
                    to_visit.add(full)

        time.sleep(DELAY_SEC)

    return results

# ‚Äî‚Äî Startup Functions ‚Äî‚Äî #
def auto_crawl_on_startup():
    """Automatically crawl the site on startup"""
    global crawled_data, crawl_status
    
    if not AUTO_CRAWL_ON_START:
        crawl_status = {"status": "disabled", "message": "Auto-crawl is disabled"}
        logging.info("Auto-crawl is disabled")
        return
    
    try:
        logging.info(f"üöÄ Starting automatic crawl of {ROOT_URL}")
        crawl_status = {"status": "running", "message": f"Crawling {ROOT_URL}..."}
        
        crawled_data = crawl_and_scrape(ROOT_URL)
        
        if crawled_data:
            crawl_status = {
                "status": "completed", 
                "message": f"Successfully crawled {len(crawled_data)} pages",
                "pages_count": len(crawled_data),
                "timestamp": datetime.now().isoformat()
            }
            logging.info(f"‚úÖ Auto-crawl completed: {len(crawled_data)} pages")
        else:
            crawl_status = {"status": "failed", "message": "No pages were crawled"}
            logging.warning("‚ùå Auto-crawl failed: No pages found")
            
    except Exception as e:
        crawl_status = {"status": "error", "message": f"Crawl error: {str(e)}"}
        logging.error(f"‚ùå Auto-crawl error: {e}")

# Start auto-crawl in background when app starts
import threading
if AUTO_CRAWL_ON_START:
    threading.Thread(target=auto_crawl_on_startup, daemon=True).start()

# ‚Äî‚Äî Content Extraction ‚Äî‚Äî #
def extract_content(soup: BeautifulSoup, base_url: str):
    main = soup.find("main") or soup
    texts = []
    images = []

    for tag in main.find_all(["h1", "h2", "h3", "h4", "p", "li", "code"]):
        text = tag.get_text(strip=True)
        if text:
            texts.append(text)

    for img in main.find_all("img"):
        src = img.get("src")
        alt = img.get("alt", "").strip()
        if src:
            full_img_url = urljoin(base_url, src)
            entry = f"[Image] {alt} ‚Äî {full_img_url}" if alt else f"[Image] {full_img_url}"
            texts.append(entry)
            images.append({"url": full_img_url, "alt": alt})

    return "\n\n".join(texts), images

def is_internal_link(href: str) -> bool:
    if not href:
        return False
    parsed = urlparse(href)
    return not parsed.netloc or parsed.netloc == ALLOWED_NETLOC

def normalize_url(base: str, link: str) -> str:
    return urljoin(base, link.split("#")[0])

def scrape_single(url: str):
    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text, "html.parser")
    title = soup.title.string.strip() if soup.title else url
    body, images = extract_content(soup, url)
    return {"url": url, "title": title, "body": body, "images": images}


# ‚Äî‚Äî AI Assistant Functions ‚Äî‚Äî #
def get_ai_response(user_message: str, conversation_id: int, context_data: list = None):
    """Enhanced AI response with better context awareness"""
    
    if not client:
        return "üîë OpenAI API —Ç“Ø–ª—Ö“Ø“Ø—Ä —Ç–æ—Ö–∏—Ä—É—É–ª–∞–≥–¥–∞–∞–≥“Ø–π –±–∞–π–Ω–∞. –ê–¥–º–∏–Ω—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ–Ω–æ —É—É."
    
    # Get conversation history
    history = conversation_memory.get(conversation_id, [])
    
    # Build context from crawled data if available
    context = ""
    if context_data and crawled_data:
        # Search for relevant content
        search_results = search_in_crawled_data(user_message, max_results=3)
        if search_results:
            relevant_pages = []
            for result in search_results:
                relevant_pages.append(
                    f"–•—É—É–¥–∞—Å: {result['title']}\n"
                    f"URL: {result['url']}\n"
                    f"–•–æ–ª–±–æ–≥–¥–æ—Ö –∞–≥—É—É–ª–≥–∞: {result['snippet']}\n"
                )
            context = "\n\n".join(relevant_pages)
    
    # Build system message with context
    system_content = """–¢–∞ Cloud.mn-–∏–π–Ω –±–∞—Ä–∏–º—Ç –±–∏—á–≥–∏–π–Ω —Ç–∞–ª–∞–∞—Ä –∞—Å—É—É–ª—Ç–∞–¥ —Ö–∞—Ä–∏—É–ª–¥–∞–≥ –ú–æ–Ω–≥–æ–ª AI —Ç—É—Å–ª–∞—Ö —é–º. 
    –•—ç—Ä—ç–≥–ª—ç–≥—á—Ç—ç–π –º–æ–Ω–≥–æ–ª —Ö—ç–ª—ç—ç—Ä —è—Ä–∏–ª—Ü–∞–∞—Ä–∞–π. –•–∞—Ä–∏—É–ª—Ç–∞–∞ —Ç–æ–≤—á –±”©–≥”©”©–¥ –æ–π–ª–≥–æ–º–∂—Ç–æ–π –±–∞–π–ª–≥–∞–∞—Ä–∞–π.
    
    –•–∞—Ä–∏—É–ª–∞—Ö–¥–∞–∞ –¥–∞—Ä–∞–∞—Ö –∑“Ø–π–ª—Å–∏–π–≥ –∞–Ω—Ö–∞–∞—Ä–Ω–∞ —É—É:
    1. –•–∞—Ä–∏—É–ª—Ç–∞–∞ —Ö–æ–ª–±–æ–≥–¥–æ—Ö –±–∞—Ä–∏–º—Ç –±–∏—á–≥–∏–π–Ω –ª–∏–Ω–∫—ç—ç—Ä –¥—ç–º–∂“Ø“Ø–ª—ç—ç—Ä—ç–π
    2. –•—ç—Ä—ç–≤ –æ–π–ª–≥–æ–º–∂–≥“Ø–π –±–æ–ª —Ç–æ–¥–æ—Ä—Ö–æ–π –∞—Å—É—É–Ω–∞ —É—É
    3. –•–∞—Ä–∏—É–ª—Ç–∞–∞ –±“Ø—Ç—ç—Ü—Ç—ç–π, —Ü—ç–≥—Ü—Ç—ç–π –±–∞–π–ª–≥–∞–∞—Ä–∞–π
    4. –¢–µ—Ö–Ω–∏–∫–∏–π–Ω –Ω—ç—Ä —Ç–æ–º—ä—ë–æ–≥ –º–æ–Ω–≥–æ–ª —Ö—ç–ª—ç—ç—Ä —Ç–∞–π–ª–±–∞—Ä–ª–∞–∞—Ä–∞–π
    
    –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä —Ç–∞–Ω—å–∂, –¥–∞—Ä–∞–∞—Ö “Ø–π–ª–¥–ª“Ø“Ø–¥–∏–π–≥ —Ö–∏–π—Ö –±–æ–ª–æ–º–∂—Ç–æ–π:
    - –•—ç—Ä—ç–≥–ª—ç–≥—á –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞–π—Ö—ã–≥ —Ö“Ø—Å–≤—ç–ª, —Ö–æ–ª–±–æ–≥–¥–æ—Ö –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö–∞–π–∂ –æ–ª–∂ —Ö–∞—Ä–∏—É–ª–Ω–∞
    - –•—ç—Ä—ç–≥–ª—ç–≥—á —Ç–æ–¥–æ—Ä—Ö–æ–π —Ö—É—É–¥—Å—ã–≥ —à“Ø“Ø—Ä–¥—ç—Ö–∏–π–≥ —Ö“Ø—Å–≤—ç–ª, —Ç—É—Ö–∞–π–Ω —Ö—É—É–¥—Å—ã–≥ —à“Ø“Ø—Ä–¥—ç–∂ —Ö–∞—Ä–∏—É–ª–Ω–∞
    - –•—ç—Ä—ç–≥–ª—ç–≥—á —Ç—É—Å–ª–∞–º–∂ —Ö“Ø—Å–≤—ç–ª, –±–æ–ª–æ–º–∂—Ç–æ–π “Ø–π–ª–¥–ª“Ø“Ø–¥–∏–π–Ω —Ç–∞–ª–∞–∞—Ä —Ç–∞–π–ª–±–∞—Ä–ª–∞–Ω–∞
    - –•—ç—Ä—ç–≥–ª—ç–≥—á –±“Ø—Ö —Å–∞–π—Ç—ã–≥ —à“Ø“Ø—Ä–¥—ç—Ö–∏–π–≥ —Ö“Ø—Å–≤—ç–ª, —à“Ø“Ø—Ä–¥—ç–ª—Ç–∏–π–≥ —ç—Ö–ª“Ø“Ø–ª–Ω—ç"""
    
    if context:
        system_content += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –º—ç–¥—ç—ç–ª—ç–ª:\n{context}"
    
    # Build conversation context
    messages = [
        {
            "role": "system", 
            "content": system_content
        }
    ]
    
    # Add conversation history
    for msg in history[-4:]:  # Last 4 messages
        messages.append(msg)
    
    # Add current message
    messages.append({"role": "user", "content": user_message})
    
    try:
        response = client.chat.completions.create(
            model="gpt-4.1",
            messages=messages,
            max_tokens=500,  # Increased token limit for better responses
            temperature=0.7
        )
        
        ai_response = response.choices[0].message.content
        
        # Store in memory
        if conversation_id not in conversation_memory:
            conversation_memory[conversation_id] = []
        
        conversation_memory[conversation_id].append({"role": "user", "content": user_message})
        conversation_memory[conversation_id].append({"role": "assistant", "content": ai_response})
        
        # Keep only last 8 messages
        if len(conversation_memory[conversation_id]) > 8:
            conversation_memory[conversation_id] = conversation_memory[conversation_id][-8:]
            
        return ai_response
        
    except Exception as e:
        logging.error(f"OpenAI API –∞–ª–¥–∞–∞: {e}")
        return f"üîß AI-—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ—Ö–æ–¥ —Å–∞–∞–¥ –≥–∞—Ä–ª–∞–∞. –î–∞—Ä–∞–∞—Ö –∑“Ø–π–ª—Å–∏–π–≥ —Ç—É—Ä—à–∏–∂ “Ø–∑–Ω—ç “Ø“Ø:\n‚Ä¢ –ê—Å—É—É–ª—Ç–∞–∞ –¥–∞—Ö–∏–Ω –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø\n‚Ä¢ –ê—Å—É—É–ª—Ç–∞–∞ —Ç–æ–¥–æ—Ä—Ö–æ–π –±–æ–ª–≥–æ–Ω–æ —É—É\n‚Ä¢ –•–æ–ª–±–æ–≥–¥–æ—Ö –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö–∞–π–∂ “Ø–∑–Ω—ç “Ø“Ø\n\n–ê–ª–¥–∞–∞–Ω—ã –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π: {str(e)[:100]}"

def search_in_crawled_data(query: str, max_results: int = 3):
    """Enhanced search through crawled data with better relevance scoring"""
    if not crawled_data:
        return []
    
    query_lower = query.lower()
    results = []
    scored_pages = []
    
    for page in crawled_data:
        score = 0
        title = page['title'].lower()
        body = page['body'].lower()
        
        # Title matches are more important
        if query_lower in title:
            score += 3
        elif any(word in title for word in query_lower.split()):
            score += 2
            
        # Body matches
        if query_lower in body:
            score += 2
        elif any(word in body for word in query_lower.split()):
            score += 1
            
        # Exact phrase matches are very important
        if f'"{query_lower}"' in body:
            score += 4
            
        if score > 0:
            scored_pages.append((score, page))
    
    # Sort by score and get top results
    scored_pages.sort(key=lambda x: x[0], reverse=True)  # Sort by score (first element of tuple)
    for score, page in scored_pages[:max_results]:
        # Find the most relevant snippet
        body = page['body']
        query_words = query_lower.split()
        
        # Try to find a good context around the query
        best_snippet = ""
        max_context = 300
        
        for word in query_words:
            if word in body.lower():
                start = max(0, body.lower().find(word) - 100)
                end = min(len(body), body.lower().find(word) + 200)
                snippet = body[start:end]
                if len(snippet) > len(best_snippet):
                    best_snippet = snippet
        
        if not best_snippet:
            best_snippet = body[:max_context] + "..." if len(body) > max_context else body
            
        results.append({
            'title': page['title'],
            'url': page['url'],
            'snippet': best_snippet,
            'relevance_score': score
        })
            
    return results

def scrape_single(url: str):
    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text, "html.parser")
    title = soup.title.string.strip() if soup.title else url
    body, images = extract_content(soup, url)
    return {"url": url, "title": title, "body": body, "images": images}


# ‚Äî‚Äî Enhanced Chatwoot Integration ‚Äî‚Äî #
def send_to_chatwoot(conv_id: int, content: str, message_type: str = "outgoing"):
    """Enhanced chatwoot message sending with better error handling"""
    api_url = (
        f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}"
        f"/conversations/{conv_id}/messages"
    )
    headers = {
        "api_access_token": CHATWOOT_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {
        "content": content, 
        "message_type": message_type,
        "private": False
    }
    
    try:
        resp = requests.post(api_url, json=payload, headers=headers, timeout=10)
        resp.raise_for_status()
        logging.info(f"Message sent to conversation {conv_id}")
        return True
    except Exception as e:
        logging.error(f"Failed to send message to chatwoot: {e}")
        return False

def get_conversation_info(conv_id: int):
    """Get conversation details from Chatwoot"""
    api_url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}"
    headers = {"api_access_token": CHATWOOT_API_KEY}
    
    try:
        resp = requests.get(api_url, headers=headers, timeout=10)
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        logging.error(f"Failed to get conversation info: {e}")
        return None

def mark_conversation_resolved(conv_id: int):
    """Mark conversation as resolved"""
    api_url = f"{CHATWOOT_BASE_URL}/api/v1/accounts/{ACCOUNT_ID}/conversations/{conv_id}/toggle_status"
    headers = {"api_access_token": CHATWOOT_API_KEY}
    payload = {"status": "resolved"}
    
    try:
        resp = requests.post(api_url, json=payload, headers=headers, timeout=10)
        resp.raise_for_status()
        return True
    except Exception as e:
        logging.error(f"Failed to mark conversation as resolved: {e}")
        return False


# ‚Äî‚Äî Microsoft Teams Integration ‚Äî‚Äî #
def send_to_teams(email: str, issue: str, conv_id: int = None) -> bool:
    """Send issue to Microsoft Teams via webhook"""
    if not TEAMS_WEBHOOK_URL:
        logging.error("Teams webhook URL not configured")
        return False
    
    # Build Chatwoot conversation link
    chatwoot_link = f"{CHATWOOT_BASE_URL}/app/accounts/{ACCOUNT_ID}/conversations/{conv_id}" if conv_id else "–õ–∏–Ω–∫ –±–∞–π—Ö–≥“Ø–π"
        
    payload = {
        "@type": "MessageCard",
        "@context": "http://schema.org/extensions",
        "themeColor": "0076D7",
        "summary": f"–®–∏–Ω—ç —Ö“Ø—Å—ç–ª—Ç: {email}",
        "sections": [{
            "activityTitle": "Cloud.mn - –®–∏–Ω—ç —Ö“Ø—Å—ç–ª—Ç",
            # "activitySubtitle": f"–•—ç—Ä—ç–≥–ª—ç–≥—á: {email}",
            "activityImage": "https://docs.cloud.mn/logo.png",
            "facts": [{
                "name": "–•—ç—Ä—ç–≥–ª—ç–≥—á:",
                "value": email
            }, {
                "name": "–ê—Å—É—É–¥–∞–ª:",
                "value": issue
            }, {
                "name": "Chatwoot —è—Ä–∏–ª—Ü–ª–∞–≥–∞:",
                "value": f"[–Ø—Ä–∏–ª—Ü–ª–∞–≥–∞ —Ö–∞—Ä–∞—Ö]({chatwoot_link})"
            }, {
                "name": "–û–≥–Ω–æ–æ:",
                "value": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }],
            "markdown": True
        }],
        "potentialAction": [{
            "@type": "OpenUri",
            "name": "Chatwoot-–¥ —Ö–∞—Ä–∞—Ö",
            "targets": [{
                "os": "default",
                "uri": chatwoot_link
            }]
        }]
    }
    
    try:
        response = requests.post(
            TEAMS_WEBHOOK_URL,
            json=payload,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        response.raise_for_status()
        logging.info(f"Issue sent to Teams for {email} with conv link: {chatwoot_link}")
        return True
    except Exception as e:
        logging.error(f"Failed to send to Teams: {e}")
        return False


# ‚Äî‚Äî API Endpoints ‚Äî‚Äî #
@app.route("/api/scrape", methods=["POST"])
def api_scrape():
    data = request.get_json(force=True)
    url = data.get("url")
    if not url:
        return jsonify({"error": "Missing 'url' in JSON body"}), 400
    try:
        page = scrape_single(url)
        return jsonify(page)
    except Exception as e:
        return jsonify({"error": f"Fetch/Scrape failed: {e}"}), 502

@app.route("/api/crawl", methods=["POST"])
def api_crawl():
    pages = crawl_and_scrape(ROOT_URL)
    return jsonify(pages)


# ‚Äî‚Äî Enhanced Chatwoot Webhook ‚Äî‚Äî #
@app.route("/webhook/chatwoot", methods=["POST"])
def chatwoot_webhook():
    """Enhanced webhook with AI integration"""
    global crawled_data, crawl_status
    
    data = request.json or {}
    
    # Only process incoming messages
    if data.get("message_type") != "incoming":
        return jsonify({}), 200

    conv_id = data["conversation"]["id"]
    text = data.get("content", "").strip()
    contact = data.get("conversation", {}).get("contact", {})
    contact_name = contact.get("name", "–•—ç—Ä—ç–≥–ª—ç–≥—á")
    
    logging.info(f"Received message from {contact_name} in conversation {conv_id}: {text}")
    
    # Get conversation history
    history = conversation_memory.get(conv_id, [])
    
    # Check if this is an email address
    if "@" in text and is_valid_email(text.strip()):
        verification_code = send_verification_email(text.strip())
        if verification_code:
            if conv_id not in conversation_memory:
                conversation_memory[conv_id] = []
            conversation_memory[conv_id].append({
                "role": "system", 
                "content": f"verification_code:{verification_code},email:{text.strip()}"
            })
            
            response = "üìß –¢–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ —Ä—É—É –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∫–æ–¥ –∏–ª–≥—ç—ç–ª—ç—ç. –£–≥ –∫–æ–¥—ã–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É."
            send_to_chatwoot(conv_id, response)
            return jsonify({"status": "success"}), 200
        else:
            response = "‚ùå –ò–º—ç–π–ª –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É —ç—Å–≤—ç–ª ”©”©—Ä –∏–º—ç–π–ª —Ö–∞—è–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É."
            send_to_chatwoot(conv_id, response)
            return jsonify({"status": "success"}), 200
    
    # Check if this is a verification code (6 digits)
    if len(text) == 6 and text.isdigit():
        verification_info = None
        for msg in history:
            if msg.get("role") == "system" and "verification_code:" in msg.get("content", ""):
                verification_info = msg.get("content")
                break
        
        if verification_info:
            parts = verification_info.split(",")
            stored_code = parts[0].split(":")[1]
            email = parts[1].split(":")[1]
            
            if text == stored_code:
                response = "‚úÖ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π. –û–¥–æ–æ –∞—Å—É—É–¥–ª–∞–∞ –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –±–∏—á–Ω—ç “Ø“Ø."
                send_to_chatwoot(conv_id, response)
                
                conversation_memory[conv_id].append({
                    "role": "system", 
                    "content": f"verified_email:{email}"
                })
                return jsonify({"status": "success"}), 200
            else:
                response = "‚ùå –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∫–æ–¥ –±—É—Ä—É—É –±–∞–π–Ω–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É."
                send_to_chatwoot(conv_id, response)
                return jsonify({"status": "success"}), 200
    
    # Check if user has verified email and is describing an issue
    verified_email = None
    for msg in history:
        if msg.get("role") == "system" and "verified_email:" in msg.get("content", ""):
            verified_email = msg.get("content").split(":")[1]
            break
    
    if verified_email and len(text) > 15:  # User has verified email and writing detailed message
        teams_success = send_to_teams(verified_email, text, conv_id)
        planner_success = create_planner_task(verified_email, text, conv_id)
        
        if teams_success or planner_success:
            # Send confirmation email to user
            confirmation_sent = send_confirmation_email(verified_email, text[:100] + "..." if len(text) > 100 else text)
            
            status_msg = ""
            if teams_success and planner_success:
                status_msg = "‚úÖ –¢–∞–Ω—ã –∞—Å—É—É–¥–ª—ã–≥ Teams –±–æ–ª–æ–Ω Planner-–¥ –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç."
            elif teams_success:
                status_msg = "‚úÖ –¢–∞–Ω—ã –∞—Å—É—É–¥–ª—ã–≥ Teams-–¥ –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç."
            elif planner_success:
                status_msg = "‚úÖ –¢–∞–Ω—ã –∞—Å—É—É–¥–ª—ã–≥ Planner-–¥ –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç."
            else:
                status_msg = "‚ö†Ô∏è –¢–∞–Ω—ã –∞—Å—É—É–¥–ª—ã–≥ —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞."
                
            response = f"{status_msg} –ë–∏–¥ —Ç–∞–Ω—Ç–∞–π —É–¥–∞—Ö–≥“Ø–π —Ö–æ–ª–±–æ–≥–¥–æ—Ö –±–æ–ª–Ω–æ. –ë–∞—è—Ä–ª–∞–ª–∞–∞!"
            
            if confirmation_sent:
                response += "\nüìß –¢–∞–Ω–¥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –º—ç–π–ª –∏–ª–≥—ç—ç–ª—ç—ç."
            send_to_chatwoot(conv_id, response)
            return jsonify({"status": "success"}), 200
    
    # Try to answer with AI first
    ai_response = get_ai_response(text, conv_id, crawled_data)
    
    # Check if AI couldn't find good answer by searching crawled data
    search_results = search_in_crawled_data(text, max_results=3)
    
    # Check if this user was previously escalated but asking a new question
    was_previously_escalated = any(
        msg.get("role") == "system" and "escalated_to_human" in msg.get("content", "")
        for msg in history
    )
    
    # Let AI evaluate its own response quality and decide if human help is needed
    needs_human_help = should_escalate_to_human(text, search_results, ai_response, history)
    
    # If user was previously escalated but AI can answer this new question, respond with AI
    if was_previously_escalated and not needs_human_help:
        # AI can handle this new question even though user was escalated before
        response_with_note = f"{ai_response}\n\nüí° –•—ç—Ä—ç–≤ —ç–Ω—ç —Ö–∞—Ä–∏—É–ª—Ç —Ö–∞–Ω–≥–∞–ª—Ç–≥“Ø–π –±–æ–ª, –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –æ—Ä—É—É–ª–∂ –¥—ç–º–∂–ª—ç–≥–∏–π–Ω –±–∞–≥—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ–Ω–æ —É—É."
        send_to_chatwoot(conv_id, response_with_note)
        return jsonify({"status": "success"}), 200
    
    if needs_human_help and not verified_email:
        # Mark this conversation as escalated
        if conv_id not in conversation_memory:
            conversation_memory[conv_id] = []
        conversation_memory[conv_id].append({
            "role": "system", 
            "content": "escalated_to_human"
        })
        
        # AI thinks it can't handle this properly, escalate to human
        escalation_response = """ü§ù –ë–∏ —Ç–∞–Ω—ã –∞—Å—É—É–ª—Ç–∞–¥ —Ö–∞–Ω–≥–∞–ª—Ç—Ç–∞–π —Ö–∞—Ä–∏—É–ª—Ç ”©–≥—á —á–∞–¥–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞. –î—ç–º–∂–ª—ç–≥–∏–π–Ω –±–∞–≥–∏–π–Ω —Ç—É—Å–ª–∞–º–∂ –∞–≤–∞—Ö—ã–≥ —Å–∞–Ω–∞–ª –±–æ–ª–≥–æ–∂ –±–∞–π–Ω–∞.

–¢—É—Å–ª–∞–º–∂ –∞–≤–∞—Ö—ã–Ω —Ç—É–ª–¥ –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –æ—Ä—É—É–ª–Ω–∞ —É—É. –ë–∏–¥ —Ç–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥–∏–π–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª—Å–Ω—ã –¥–∞—Ä–∞–∞ –∞—Å—É—É–¥–ª—ã–≥ —à–∏–π–¥–≤—ç—Ä–ª—ç—Ö –±–æ–ª–Ω–æ."""
        
        send_to_chatwoot(conv_id, escalation_response)
    else:
        # AI is confident in its response, send it
        send_to_chatwoot(conv_id, ai_response)

    return jsonify({"status": "success"}), 200


def should_escalate_to_human(user_message: str, search_results: list, ai_response: str, history: list) -> bool:
    """AI evaluates its own response and decides if human help is needed"""
    
    # Use AI to evaluate its own response quality
    if not client:
        # Fallback without AI evaluation
        return not search_results or (search_results and search_results[0].get('relevance_score', 0) < 2)
    
    # Build context for AI self-evaluation
    context = f"""–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–ª—Ç: "{user_message}"

–ú–∞–Ω–∞–π –±–∞—Ä–∏–º—Ç –±–∏—á–≥—ç—ç—Å —Ö–∞–π—Å–∞–Ω “Ø—Ä –¥“Ø–Ω:
{f"–û–ª–¥—Å–æ–Ω: {len(search_results)} “Ø—Ä –¥“Ø–Ω, —Ö–∞–º–≥–∏–π–Ω —Å–∞–π–Ω –æ–Ω–æ–æ: {search_results[0].get('relevance_score', 0)}" if search_results else "–ú—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π"}

–ú–∏–Ω–∏–π ”©–≥—Å”©–Ω —Ö–∞—Ä–∏—É–ª—Ç: "{ai_response}"

–Ø—Ä–∏–ª—Ü–ª–∞–≥—ã–Ω —Å“Ø“Ø–ª–∏–π–Ω –º–µ—Å—Å–µ–∂“Ø“Ø–¥:"""
    
    if history:
        recent_messages = [msg.get("content", "")[:100] for msg in history[-2:] if msg.get("role") == "user"]
        if recent_messages:
            context += "\n" + "\n".join(recent_messages)
    
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {
                    "role": "system",
                    "content": """–¢–∞ ”©”©—Ä–∏–π–Ω ”©–≥—Å”©–Ω —Ö–∞—Ä–∏—É–ª—Ç—ã–≥ “Ø–Ω—ç–ª–∂, —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ —Ö–∞–Ω–≥–∞–ª—Ç—Ç–∞–π —ç—Å—ç—Ö–∏–π–≥ —à–∏–π–¥–Ω—ç.

–î–∞—Ä–∞–∞—Ö —Ç–æ—Ö–∏–æ–ª–¥–ª—É—É–¥–∞–¥ —Ö“Ø–Ω–∏–π —Ç—É—Å–ª–∞–º–∂ —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π:
- –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–ª—Ç–∞–¥ —Ç–æ–¥–æ—Ä—Ö–æ–π —Ö–∞—Ä–∏—É–ª—Ç ”©–≥—á —á–∞–¥–∞–∞–≥“Ø–π
- –ë–∞—Ä–∏–º—Ç –±–∏—á–≥—ç—ç—Å —Ö–∞–Ω–≥–∞–ª—Ç—Ç–∞–π –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥–æ–æ–≥“Ø–π  
- –¢–µ—Ö–Ω–∏–∫–∏–π–Ω –∞–ª–¥–∞–∞, —Ç–æ—Ö–∏—Ä–≥–æ–æ, –∞–∫–∞—É–Ω—Ç—ã–Ω –∞—Å—É—É–¥–∞–ª
- Cloud.mn-—ç—ç—Å ”©”©—Ä “Ø–π–ª—á–∏–ª–≥—ç—ç —Ö“Ø—Å—ç–∂ –±–∞–π–≥–∞–∞ (—Ö–æ—Å—Ç–∏–Ω–≥, –¥–æ–º—ç–π–Ω –≥—ç—Ö –º—ç—Ç)
- –¢—É—Å–≥–∞–π —Ö“Ø—Å—ç–ª—Ç, –≥–æ–º–¥–æ–ª, —Å–∞–Ω–∞–ª
- –•–∞—Ä–∏—É–ª—Ç –µ—Ä”©–Ω—Ö–∏–π, —Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π –±–∞–π–≥–∞–∞

–•—ç—Ä—ç–≤ —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–ª—Ç–∞–¥ —Ö–∞–Ω–≥–∞–ª—Ç—Ç–∞–π, —Ç–æ–¥–æ—Ä—Ö–æ–π —Ö–∞—Ä–∏—É–ª—Ç ”©–≥—Å”©–Ω –±–æ–ª 'NO'.
–•—ç—Ä—ç–≤ —Ö–∞—Ä–∏—É–ª—Ç —Ö–∞–Ω–≥–∞–ª—Ç–≥“Ø–π —ç—Å–≤—ç–ª —Ö“Ø–Ω–∏–π —Ç—É—Å–ª–∞–º–∂ —Ö—ç—Ä—ç–≥—Ç—ç–π –±–æ–ª 'YES'.

–•–∞—Ä–∏—É–ª—Ç–∞–∞ –∑”©–≤—Ö”©–Ω 'YES' —ç—Å–≤—ç–ª 'NO' –≥—ç–∂ ”©–≥–Ω”© “Ø“Ø."""
                },
                {
                    "role": "user", 
                    "content": context
                }
            ],
            max_tokens=10,
            temperature=0.1
        )
        
        ai_decision = response.choices[0].message.content.strip().upper()
        logging.info(f"AI self-evaluation for conv {user_message[:50]}...: {ai_decision}")
        return ai_decision == "YES"
        
    except Exception as e:
        logging.error(f"AI self-evaluation error: {e}")
        # Fallback: escalate if no good search results
        return not search_results or (search_results and search_results[0].get('relevance_score', 0) < 2)


# ‚Äî‚Äî Additional API Endpoints ‚Äî‚Äî #
@app.route("/api/crawl-status", methods=["GET"])
def get_crawl_status():
    """Get current crawl status"""
    return jsonify({
        "crawl_status": crawl_status,
        "crawled_pages": len(crawled_data),
        "config": {
            "root_url": ROOT_URL,
            "auto_crawl_enabled": AUTO_CRAWL_ON_START,
            "max_pages": MAX_CRAWL_PAGES
        }
    })

@app.route("/api/force-crawl", methods=["POST"])
def force_crawl():
    """Force start a new crawl"""
    global crawled_data, crawl_status
    
    # Check if already running
    if crawl_status["status"] == "running":
        return jsonify({"error": "Crawl is already running"}), 409
    
    try:
        crawl_status = {"status": "running", "message": "Force crawl started via API"}
        crawled_data = crawl_and_scrape(ROOT_URL)
        
        if crawled_data:
            crawl_status = {
                "status": "completed",
                "message": f"Force crawl completed via API",
                "pages_count": len(crawled_data),
                "timestamp": datetime.now().isoformat()
            }
            return jsonify({
                "status": "success",
                "pages_crawled": len(crawled_data),
                "crawl_status": crawl_status
            })
        else:
            crawl_status = {"status": "failed", "message": "Force crawl failed - no pages found"}
            return jsonify({"error": "No pages were crawled"}), 500
            
    except Exception as e:
        crawl_status = {"status": "error", "message": f"Force crawl error: {str(e)}"}
        return jsonify({"error": f"Crawl failed: {e}"}), 500

@app.route("/api/search", methods=["POST"])
def api_search():
    """Search through crawled data via API"""
    data = request.get_json(force=True)
    query = data.get("query", "").strip()
    max_results = data.get("max_results", 5)
    
    if not query:
        return jsonify({"error": "Missing 'query' in request body"}), 400
    
    if crawl_status["status"] == "running":
        return jsonify({"error": "Crawl is currently running, please wait"}), 409
    
    if not crawled_data:
        return jsonify({"error": "No crawled data available. Run crawl first."}), 404
    
    results = search_in_crawled_data(query, max_results)
    return jsonify({
        "query": query,
        "results_count": len(results),
        "results": results,
        "crawl_status": crawl_status
    })

@app.route("/api/conversation/<int:conv_id>/memory", methods=["GET"])
def get_conversation_memory(conv_id):
    """Get conversation memory for debugging"""
    memory = conversation_memory.get(conv_id, [])
    return jsonify({"conversation_id": conv_id, "memory": memory})

@app.route("/api/conversation/<int:conv_id>/clear", methods=["POST"])
def clear_conversation_memory(conv_id):
    """Clear conversation memory"""
    if conv_id in conversation_memory:
        del conversation_memory[conv_id]
    return jsonify({"status": "cleared", "conversation_id": conv_id})

@app.route("/api/crawled-data", methods=["GET"])
def get_crawled_data():
    """Get current crawled data"""
    page_limit = request.args.get('limit', 10, type=int)
    return jsonify({
        "total_pages": len(crawled_data), 
        "crawl_status": crawl_status,
        "data": crawled_data[:page_limit]
    })

@app.route("/api/planner/create-task", methods=["POST"])
def api_create_planner_task():
    """Manual-–∞–∞—Ä Microsoft Planner-–¥ task “Ø“Ø—Å–≥—ç—Ö API"""
    data = request.get_json(force=True)
    email = data.get("email", "").strip()
    issue = data.get("issue", "").strip()
    conv_id = data.get("conversation_id")
    
    if not email or not issue:
        return jsonify({"error": "–ò–º—ç–π–ª –±–æ–ª–æ–Ω –∞—Å—É—É–¥–∞–ª –∑–∞–∞–≤–∞–ª —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π"}), 400
    
    if not is_valid_email(email):
        return jsonify({"error": "–ò–º—ç–π–ª —Ö–∞—è–≥–∏–π–Ω —Ñ–æ—Ä–º–∞—Ç –±—É—Ä—É—É –±–∞–π–Ω–∞"}), 400
    
    success = create_planner_task(email, issue, conv_id)
    
    if success:
        return jsonify({
            "status": "success",
            "message": "Microsoft Planner-–¥ task –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–≥—ç–ª—ç—ç",
            "email": email,
            "issue_preview": issue[:100] + "..." if len(issue) > 100 else issue
        })
    else:
        return jsonify({
            "status": "error", 
            "message": "Microsoft Planner-–¥ task “Ø“Ø—Å–≥—ç—Ö –∞–º–∂–∏–ª—Ç–≥“Ø–π –±–æ–ª–ª–æ–æ"
        }), 500

@app.route("/health", methods=["GET"])
def health_check():
    """Health check endpoint"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "crawl_status": crawl_status,
        "crawled_pages": len(crawled_data),
        "active_conversations": len(conversation_memory),
        "config": {
            "root_url": ROOT_URL,
            "auto_crawl_enabled": AUTO_CRAWL_ON_START,
            "openai_configured": client is not None,
            "chatwoot_configured": bool(CHATWOOT_API_KEY and ACCOUNT_ID),
            "teams_configured": bool(TEAMS_WEBHOOK_URL),
            "planner_configured": bool(PLANNER_TENANT_ID and PLANNER_CLIENT_ID and PLANNER_CLIENT_SECRET and PLANNER_PLAN_ID and PLANNER_BUCKET_ID),
            "smtp_configured": bool(SMTP_SERVER and SMTP_USERNAME and SMTP_PASSWORD)
        }
    })


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
# ‚Äî‚Äî Email Verification Functions ‚Äî‚Äî #
def is_valid_email(email: str) -> bool:
    """Check if email format is valid"""
    email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(email_regex, email))

def send_verification_email(email: str) -> str:
    """Send verification email with code and return the code"""
    if not SMTP_FROM_EMAIL or not SMTP_PASSWORD or not SMTP_SERVER:
        logging.error("SMTP credentials not configured")
        return None
        
    # Generate verification code
    verification_code = ''.join([str(random.randint(0, 9)) for _ in range(6)])
    
    # Create email
    msg = MIMEMultipart()
    msg['From'] = SMTP_FROM_EMAIL
    msg['To'] = email
    msg['Subject'] = "Cloud.mn –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∫–æ–¥"
    
    body = f"""–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É,

–¢–∞–Ω—ã Cloud.mn-–¥ —Ö–∞–Ω–¥—Å–∞–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –¥–æ–æ—Ä—Ö –∫–æ–¥—ã–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É:

{verification_code}

–•—ç—Ä—ç–≤ —Ç–∞ —ç–Ω—ç —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –∏–ª–≥—ç—ç–≥—ç—ç–≥“Ø–π –±–æ–ª –º—ç–¥—ç–≥–¥—ç–Ω—ç “Ø“Ø.

–•“Ø–Ω–¥—ç—Ç–≥—ç—Å—ç–Ω,
Cloud.mn –ë–∞–≥"""
    
    msg.attach(MIMEText(body, 'plain'))
    
    try:
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SMTP_USERNAME, SMTP_PASSWORD)
        server.send_message(msg)
        server.quit()
        logging.info(f"Verification email sent to {email}")
        return verification_code
    except Exception as e:
        logging.error(f"Failed to send verification email: {e}")
        return None

def send_confirmation_email(email: str, problem: str) -> bool:
    """Send confirmation email after issue is sent to support team"""
    if not SMTP_FROM_EMAIL or not SMTP_PASSWORD or not SMTP_SERVER:
        logging.error("SMTP credentials not configured")
        return False
        
    # Create email
    msg = MIMEMultipart()
    msg['From'] = SMTP_FROM_EMAIL
    msg['To'] = email
    msg['Subject'] = "Cloud.mn - –¢–∞–Ω—ã —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞"
    
    body = f"""–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É,

–¢–∞–Ω—ã "{problem}" –∞—Å—É—É–¥–ª—ã–≥ –¥—ç–º–∂–ª—ç–≥–∏–π–Ω –±–∞–≥—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç.

–ë–∏–¥ —Ç–∞–Ω—ã —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ —Ö“Ø–ª—ç—ç–Ω –∞–≤—á, —É–¥–∞—Ö–≥“Ø–π —Ç–∞–Ω–¥ —Ö–∞—Ä–∏—É ”©–≥”©—Ö –±–æ–ª–Ω–æ. –¢–∞ –Ω—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π –±–æ–ª –º–∞–Ω–∞–π –±–∞–≥—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ–Ω–æ —É—É.

–•“Ø–Ω–¥—ç—Ç–≥—ç—Å—ç–Ω,
Cloud.mn –î—ç–º–∂–ª—ç–≥–∏–π–Ω –ë–∞–≥"""
    
    msg.attach(MIMEText(body, 'plain'))
    
    try:
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SMTP_USERNAME, SMTP_PASSWORD)
        server.send_message(msg)
        server.quit()
        logging.info(f"Confirmation email sent to {email}")
        return True
    except Exception as e:
        logging.error(f"Failed to send confirmation email: {e}")
        return False
